var `Undo Count`
var `#vector`
var `position`
var `BIregionListSize`
game var `We.%player%.isStop`
var `distanse`
var `trapdoor`
game var `We.oldBlockIds`
var `Materials Count`
var `Massive Region Size`
var `args`
var `Hollow`
var `X set`
var `#second`
var `percents-100`
var `stringBlockIdLength`
var `Ignore air`
var `previousExpand`
var `Floor 1`
var `angleX`
var `#subtext21`
var `Iterations`
var `percents`
var `firstY`
game var `We.%player%.secondPos`
var `#subtext`
var `ID Check`
var `icons`
var `pageMaxIndex`
var `listSize`
var `#blockIds`
var `power`
var `dz`
var `numberRounded`
var `dx`
game var `We.%player%.clipboard`
game var `We.%player%.isOperation`
var `z`
var `Materials`
var `broken`
var `Pos max`
var `fence_gate`
var `#colonIndex`
save var `We.%player%.fastMode`
var `lever`
var `#number`
game var `We.commandsInfo`
var `cancelExplode`
var `X`
var `generated`
var `Pos Particle 7`
var `e`
var `-Radius`
var `#pos1`
var `distance`
var `Undo`
var `XYZ Set`
game var `worldFirstPos`
var `subCommand`
var `Set Region`
var `Undo Map`
var `countedblocksListCutted`
var `Направление`
var `secondZ`
var `regionFirstPos`
var `height`
var `maxCount`
var `regionList`
var `Positions`
var `Function`
var `Already Setting`
var `blocksList`
var `y`
var `length`
var `minY`
var `Pos min`
var `pageList`
var `#z`
var `button`
var `Location Min`
var `spaces`
var `regionSecondPos`
var `isStop`
var `#length`
var `indexId`
var `eventItem`
var `spacesCount`
var `flagType`
var `radius`
var `Blocks List`
var `regionListMin`
var `%subtext`
var `Thickness`
var `y1`
var `slot`
var `commandArgs`
var `pageListSize`
var `Replace`
var `Redo Count`
var `exception`
var `input`
var `maxCountLength`
var `2`
var `autoSlotDisable`
var `firstLocation`
game var `We.%player%.copyRegionVector`
var `Third Wall 2`
var `Направления`
var `Part Set Pos 1`
var `Ceiling 2`
var `drops`
game var `mapi=worldedit`
var `newRegionId`
var `#exceptionArgument`
var `dy`
var `line`
var `Part Set z2`
var `x1`
var `brushInfo`
game var `Empty List`
var `stringArgumentsTypes`
var `msgs`
var `types`
var `angleY`
var `x dist`
var `flower_pot`
game var `We.%player%.menuRegion`
var `create`
var `Player`
var `Paste Location`
var `Running`
var `check.clipboard`
var `RadiusSquared`
var `#[Index`
game var `We.%player%.blocks`
var `#repeats`
var `#exception`
var `regions`
var `checkmark`
var `#directions`
var `#blockData`
var `distr`
var `clipboard`
var `page`
var `command`
game var `pcmd`
var `xyz`
var `LgCOcVupXhCKEvYnCI1s`
var `number`
var `nbt`
game var `We.%player%.flag`
var `commands`
var `defaultFlagsValues`
var `firstZ`
var `center`
var `Pos Particle 5`
var `#isMe`
var `First Wall 1`
var `size`
var `1`
var `redstone`
var `x min`
var `countedblocksList`
var `Ceiling 1`
var `z dist`
var `volume`
var `markers`
var `radiusHeight`
var `RadiusSquared Min`
game var `%length(We.oldBlockIds)`
var `noise`
var `Replaced`
var `campfire`
var `description`
var `#blockId`
var `Z`
var `time`
var `vars`
var `x`
game var `We.%player%.nuberRedo`
var `denyUseCheckmarkValues`
var `denyUseCheckmarkKeys`
var `z2`
var `Part Set x2`
var `%empty%`
var `variables`
var `blockCount`
var `BIregionList`
var `n`
var `Radius`
var `lectern`
var `Floor 2`
var `#regions`
var `x2`
var `defaultFlagsKeys`
var `worldSecondPos`
var `disableSound`
var `playerPos`
var `#first`
var `table`
var `Cut Start`
var `door`
var `regionListSize`
var `Massive Region Size -1`
var `denyUseCheckmark`
var `Part Set Action`
var `Particle`
var `Pos Particle 8`
var `3`
var `%length_local(#arg)`
var `set`
var `speed`
var `Pos Particle 6`
var `bl`
var `subtrahend`
var `container`
var `#border`
var `allCountedblocksList`
var `min`
var `Y`
var `nextFirstY`
var `Third Wall 1`
game var `We.flagsIcons`
var `values`
var `Massive Region`
var `Region Size`
var `Cut End`
var `previousRegionId`
var `facing`
game var `Префикс WE`
var `Part Size`
var `angleZ`
var `#defineBorder`
var `#y`
var `direction`
var `Fourth Wall 2`
var `y dist`
var `argsCol`
var `gabarit`
var `msg`
var `regionId`
game var `worldSizeBlocks`
var `#x`
var `cmds`
var `argCol`
game var `globalRegionId`
var `Redo Map`
var `Fourth Wall 1`
game var `We.%player%.firstPos`
var `thickness`
var `%length_local(#blockIds)`
var `secondY`
var `block`
var `percentLength`
var `v`
game var `We.flags`
var `newPos`
var `#blockStates`
var `y2`
game var `We.brushes`
var `#pos2`
var `keys`
var `Result`
var `var`
var `nbtSignText`
var `Pos Particle 4`
var `Check Region`
var `%length_local(exception)`
var `Pos 2`
game var `We.defaultFlags`
var `delitel`
var `furnace`
var `Item`
var `#coordinatesSize`
var `#blockDataValue`
var `#defineBorderSize`
game var `worldSecondPos`
var `forRegion`
var `shift`
game var `worldNegativeSizeBlocks`
var `Location Max`
var `z min`
var `expression`
var `marker`
var `blockPreviousId`
var `y dist +1`
var `Volume Region`
var `Region`
var `z1`
var `cutEnd`
save var `We.%player%.distanceParticles`
var `y min`
var `firstX`
var `checkmarker`
var `listPageMax`
var `Y set`
var `Wait`
var `#name`
var `secondX`
var `First Wall 2`
var `Parts`
var `Region List Size`
var `gamemode`
var `axis`
var `blockIds`
var `countedblocksListSize`
var `nextSize`
var `progress`
game var `wu%player%%var_local(Location)`
game var `We.%player%.lastGamemode`
var `tp`
var `lines`
var `Index`
var `sign`
var `getIndex`
var `bed`
var `Pos Particle 1`
var `schemItem`
var `countLength`
var `regionVector`
var `pasteLocation`
var `Pos Particle 2`
var `pageMinIndex`
var `lore`
var `flagIcon`
var `brushType`
var `checkmarks`
var `icon`
var `stack`
var `Pos 1`
var `expand`
var `axises`
var `nbtStorages`
var `argumentsTypes`
var `y max`
var `Second Wall 1`
var `Height`
var `key`
var `#coordinates`
save var `regions`
var `Part Set Pos 2`
var `nextSecondY`
var `brush`
var `pressure_plate`
var `Center`
var `Count`
game var `We.%player%.region`
var `#arg`
var `canRepetitions`
var `z max`
var `nextSecondX`
var `saveNbt`
var `directions`
var `nextFirstZ`
var `x max`
var `argumentsTypesExecutors`
var `flags`
var `Pos`
var `subcommand`
var `Materials.proportions`
var `nextFirstX`
var `firstPos`
var `nextSecondZ`
var `Second Wall 2`
var `nbtSign`
var `Z set`
var `info`
game var `We.%player%.volumeRegion`
var `bell`
var `secondPos`
var `Materials.proportions.size`
var `distance_particles`
var `Copy Location`
var `#subtext2`
var `entities`
game var `We.%player%.numberRedo`
var `blocks`
var `isSelected`
var `Pos Particle 3`
game var `We.%player%.copyVector`
game var `We.%player%.inputting`
game var `We.%player%.numberUndo`
var `#directions1`
var `Message`
var `region`
var `schemData`
game var `%var()`
game var `We.%player%.regionInfo.%var().%var().index`
save var `regionInfo.%var().blockExplosions`
save var `regionInfo.%var().fire`
var `%var()regionListSize`
save var `regionInfo.%var().explosions`
save var `regionInfo.%var().time`
var `%length_local(%var().proportions)`
var `%var()`
save var `regionInfo.%var().hunger`
save var `regionInfo.%var().build`
save var `regionInfo.%var().flow`
var `%var()regionList`
save var `regionInfo.%var().fallDamage`
save var `regionInfo.%var().entityDrop`
save var `regionInfo.%var().itemDrops`
game var `We.%player%.%var()Pos`
save var `regionInfo.%var().fly`
var `%var() Massive List`
save var `regionInfo.%var().mobSpawning`
save var `regionInfo.%var().%var().index`
save var `regionInfo.%var().gamemode`
save var `regionInfo.%var().entryMessage`
var `%var().count`
save var `regionInfo.%var().exitMessage`
save var `regionInfo.%var().entityDamage`
save var `regionInfo.%var().blockDrops`
save var `regionInfo.%var().entranceMessage`
save var `regionInfo.%var().damage`
var `second%var()`
save var `regionInfo.%var().denyUse`
save var `regionInfo.%var().teleport`
save var `regionInfo.%var().mining`
var `%var() List`
game var `We.%player%.undo.%var()`
var `%var() Size`
var `first%var()`
var `%var().proportions`
save var `regionInfo.%var().chat`
save var `regionInfo.%var().%var()`
save var `regionInfo.%var().playerDrop`
save var `regionInfo.%var().pvp`
save var `regionInfo.%var().pistons`
save var `regionInfo.%var().interaction`
save var `regionInfo.%var().grow`
game var `We.%player%.redo.%var()`
function `We.locationAction`(){
    code::call_function(function_name="We.locationUndo")
    `Region Size`=variable::add(value=[`Region Size`,(1.0)])
    variable::list_append_value(values=[`Location`],variable=`Region`)
    if (variable::greater_or_equals(value=`Region Size`,compare=(200.0))){
        `Massive Region`=variable::list_append_list(list_1=`Massive Region`,list_2=`Region`)
        `Region`=variable::create_list(values=[])
        `Massive Region Size`=variable::add(value=[`Massive Region Size`,`Region Size`])
        `Region Size`=variable::set_value(value=(0.0))
        `Iterations`=variable::add(value=[`Iterations`,(199.0)])
        code::call_function(function_name="We.wait")
        if (variable::greater_or_equals(value=`Massive Region Size`,compare=(48000.0))){
            code::call_function(function_name="We.blockAction")
            `Massive Region`=variable::create_list(values=[])
            `Massive Region Size`=variable::set_value(value=(0.0))
        }
        `blocks`=variable::add(value=[`blocks`,(200.0)])
    }
}
function `We.locationUndo`(){
    if (variable::exists(variable=`Undo`)){
        if (variable::exists(variable=`canRepetitions`)){
            if not (variable::exists(variable=`wu%player%%var_local(Location)`)){
                `wu%player%%var_local(Location)`=variable::set_value(value=(1.0))
            }
            else{
                code::skip_iteration()
            }
        }
        `b`=variable::get_block_material(value_type="ID_WITH_DATA",location=`Location`)
        if not (variable::list_contains_value(values=[`b`],list=`Blocks List`)){
            variable::list_append_value(values=[`b`],variable=`Blocks List`)
            `%var_local(b) List`=variable::create_list(values=[])
        }
        variable::increment(variable=`%var_local(b) Size`,number=(1.0))
        variable::list_append_value(values=[`Location`],variable=`%var_local(b) List`)
        if (variable::greater_or_equals(value=`%var_local(b) Size`,compare=(200.0))){
            if (variable::exists(variable=`%var_local(b) Massive List`)){
                `%var_local(b) Massive List`=variable::list_append_list(list_1=`%var_local(b) Massive List`,list_2=`%var_local(b) List`)
            }
            else{
                `%var_local(b) Massive List`=variable::set_value(value=`%var_local(b) List`)
            }
            `%var_local(b) List`=variable::create_list(values=[])
            `%var_local(b) Size`=variable::set_value(value=(0.0))
            `Iterations`=variable::add(value=[`Iterations`,(199.0)])
            code::call_function(function_name="We.wait")
        }
    }
}
function `We.blockAction`(){
    `Massive Region Size`=variable::get_list_length(list=`Massive Region`)
    if (variable::greater_or_equals(value=`Massive Region Size`,compare=(1.0))){
        `Massive Region Size -1`=variable::subtract(value=[`Massive Region Size`,(1.0)])
        `Massive Region`=variable::randomize_list_order(list=`Massive Region`)
        if (variable::greater_or_equals(value=`Massive Region Size`,compare=`Materials Count`)){
            `Index`=variable::set_value(value=(0.0))
            `Cut Start`=variable::set_value(value=(0.0))
            repeat::for_each_map_entry(map=`Materials.proportions`){`Material`,`percent` ->
                `Index`=variable::add(value=[`Index`,(1.0)])
                `Cut End`=variable::multiply(value=[`Index`,(0.01),`percent`,`Massive Region Size`])
                `Cut End`=variable::round(number=`Cut End`)
                `Cut Start`=variable::clamp(number=`Cut Start`,min=(0.0),max=`Massive Region Size -1`)
                `Cut End`=variable::clamp(number=`Cut End`,min=`Cut Start`,max=`Massive Region Size`)
                `Set Region`=variable::trim_list(list=`Massive Region`,start=`Cut Start`,end=`Cut End`)
                `Cut Start`=variable::set_value(value=`Cut End`)
                world::set_block(locations=[`Set Region`],block=`Material`)
                code::call_function(function_name="We.wait")
            }
        }
        if (variable::equals(compare=[(100.0)],value=`percents`)){
            if (variable::less(value=`Cut End`,compare=`Massive Region Size`)){
                `Set Region`=variable::trim_list(list=`Massive Region`,start=`Cut End`,end=`Massive Region Size`)
                repeat::for_each_in_list(list=`Set Region`){`K1vd0Hz4vxBNwU6MWMk0`,`Location` ->
                    `Material`=variable::get_list_random_value(list=`Materials`)
                    world::set_block(locations=[`Location`],block=`Material`)
                    code::call_function(function_name="We.wait")
                }
            }
        }
    }
}
function `We.locationStart`(){
    `Region`=variable::create_list(values=[])
    `Massive Region`=variable::create_list(values=[])
}
function `We.locationEnd`(){
    code::call_function(function_name="We.undoEnd")
    `Massive Region`=variable::list_append_list(list_1=`Massive Region`,list_2=`Region`)
    code::call_function(function_name="We.blockAction")
    `blocks`=variable::add(value=[`blocks`,`Region Size`])
}
function `We.undoEnd`(){
    if (variable::exists(variable=`Undo`)){
        repeat::for_each_in_list(list=`Blocks List`){`TFsxfuW0mN5rOttjDp8J`,`b` ->
            if (variable::exists(variable=`%var_local(b) Massive List`)){
                `%var_local(b) Massive List`=variable::list_append_list(list_1=`%var_local(b) Massive List`,list_2=`%var_local(b) List`)
            }
            else{
                `%var_local(b) Massive List`=variable::set_value(value=`%var_local(b) List`)
            }
        }
    }
}
function `We.set`(){
    if (variable::exists(variable=`forRegion`)){
        code::call_function(function_name="We.locationStart")
        repeat::on_grid(start=`Pos 1`,end=`Pos 2`){`Location` ->
            code::call_function(function_name="We.locationAction")
        }
        code::call_function(function_name="We.locationEnd")
    }
    else{
        `Part Set Action`=variable::set_value(value="set")
        code::call_function(function_name="We.partSet")
    }
}
function `We.replace`(){
    if (variable::exists(variable=`forRegion`)){
        code::call_function(function_name="We.locationStart")
        repeat::on_grid(start=`Pos 1`,end=`Pos 2`){`Location` ->
            if (world::block_equals(blocks=[`Replace`],location=`Location`)){
                code::call_function(function_name="We.locationAction")
                `Replaced`=variable::add(value=[`Replaced`,(1.0)])
            }
            else{
                `blocks`=variable::add(value=[`blocks`,(1.0)])
                code::call_function(function_name="We.wait")
            }
        }
        code::call_function(function_name="We.locationEnd")
    }
    else{
        `Part Set Action`=variable::set_value(value="replace")
        code::call_function(function_name="We.partSet")
    }
}
function `We.sphere`(){
    `Radius`=variable::add(value=[`Radius`,(0.5)])
    variable::align_location(rotation_mode="REMOVE",align_mode="BLOCK_CENTER",variable=`Center`,location=`Center`)
    variable::get_all_coordinates(location=`Center`,x=`X`,y=`Y`,z=`Z`)
    `-Radius`=variable::multiply(value=[`Radius`,(-1.0)])
    `Pos 1`=variable::shift_all_coordinates(location=`Center`,x=`-Radius`,y=`-Radius`,z=`-Radius`)
    `Pos 2`=variable::shift_all_coordinates(location=`Center`,x=`Radius`,y=`Radius`,z=`Radius`)
    if (variable::exists(variable=`Hollow`)){
        `RadiusSquared Min`=variable::subtract(value=[`Radius`,(1.0)])
        `RadiusSquared Min`=variable::pow(base=`RadiusSquared Min`,power=(2))
    }
    `RadiusSquared`=variable::pow(base=`Radius`,power=(2.0))
    code::call_function(function_name="We.locationStart")
    repeat::on_grid(start=`Pos 1`,end=`Pos 2`){`Location` ->
        variable::get_all_coordinates(location=`Location`,x=`x`,y=`y`,z=`z`)
        `x`=variable::subtract(value=[`x`,(-0.5),`X`])
        `x`=variable::pow(base=`x`,power=(2.0))
        `y`=variable::subtract(value=[`y`,(-0.5),`Y`])
        `y`=variable::pow(base=`y`,power=(2.0))
        `z`=variable::subtract(value=[`z`,(-0.5),`Z`])
        `z`=variable::pow(base=`z`,power=(2.0))
        `Result`=variable::add(value=[`x`,`y`,`z`])
        if (variable::in_range(value=`Result`,min=`RadiusSquared Min`,max=`RadiusSquared`)){
            code::call_function(function_name="We.locationAction")
        }
        else{
            code::call_function(function_name="We.wait")
        }
    }
    code::call_function(function_name="We.locationEnd")
}
function `We.cyl`(){
    `Radius`=variable::add(value=[`Radius`,(0.5)])
    variable::align_location(rotation_mode="REMOVE",align_mode="BLOCK_CENTER",variable=`Center`,location=`Center`)
    variable::get_all_coordinates(location=`Center`,x=`X`,z=`Z`)
    `-Radius`=variable::multiply(value=[`Radius`,(-1.0)])
    `Pos 1`=variable::shift_all_coordinates(location=`Center`,x=`-Radius`,z=`-Radius`)
    `Pos 2`=variable::shift_all_coordinates(location=`Center`,x=`Radius`,z=`Radius`)
    if (variable::exists(variable=`Hollow`)){
        `RadiusSquared Min`=variable::subtract(value=[`Radius`,`Thickness`])
        `RadiusSquared Min`=variable::pow(base=`RadiusSquared Min`,power=(2))
    }
    `RadiusSquared`=variable::pow(base=`Radius`,power=(2.0))
    code::call_function(function_name="We.locationStart")
    repeat::on_grid(start=`Pos 1`,end=`Pos 2`){`Location` ->
        variable::get_all_coordinates(location=`Location`,x=`x`,z=`z`)
        `x`=variable::subtract(value=[`x`,(-0.5),`X`])
        `x`=variable::pow(base=`x`,power=(2.0))
        `z`=variable::subtract(value=[`z`,(-0.5),`Z`])
        `z`=variable::pow(base=`z`,power=(2.0))
        `Result`=variable::add(value=[`x`,`z`])
        if (variable::in_range(value=`Result`,min=`RadiusSquared Min`,max=`RadiusSquared`)){
            repeat::multi_times(amount=`Height`){`2KTbOPmRIa03DdAdm0OK` ->
                code::call_function(function_name="We.locationAction")
                `Location`=variable::shift_coordinate(location=`Location`,distance=(1.0),type="Y")
            }
        }
        else{
            code::call_function(function_name="We.wait")
        }
    }
    code::call_function(function_name="We.locationEnd")
}
function `We.walls`(){
    `canRepetitions`=variable::set_value(value=(1.0))
    code::call_function(function_name="We.getCorners")
    if (variable::exists(variable=`forRegion`)){
        code::call_function(function_name="We.locationStart")
        repeat::on_grid(start=`First Wall 1`,end=`First Wall 2`){`Location` ->
            code::call_function(function_name="We.locationAction")
        }
        code::call_function(function_name="We.locationEnd")
        code::call_function(function_name="We.locationStart")
        repeat::on_grid(start=`Second Wall 1`,end=`Second Wall 2`){`Location` ->
            code::call_function(function_name="We.locationAction")
        }
        code::call_function(function_name="We.locationEnd")
        code::call_function(function_name="We.locationStart")
        repeat::on_grid(start=`Third Wall 1`,end=`Third Wall 2`){`Location` ->
            code::call_function(function_name="We.locationAction")
        }
        code::call_function(function_name="We.locationEnd")
        code::call_function(function_name="We.locationStart")
        repeat::on_grid(start=`Fourth Wall 1`,end=`Fourth Wall 2`){`Location` ->
            code::call_function(function_name="We.locationAction")
        }
        code::call_function(function_name="We.locationEnd")
    }
    else{
        `Part Set Action`=variable::set_value(value="set")
        `Positions`=variable::create_list(values=[`First Wall 1`,`First Wall 2`])
        code::call_function(function_name="We.partSet")
        `Positions`=variable::create_list(values=[`Second Wall 1`,`Second Wall 2`])
        code::call_function(function_name="We.partSet")
        `Positions`=variable::create_list(values=[`Third Wall 1`,`Third Wall 2`])
        code::call_function(function_name="We.partSet")
        `Positions`=variable::create_list(values=[`Fourth Wall 1`,`Fourth Wall 2`])
        code::call_function(function_name="We.partSet")
    }
}
function `We.outline`(){
    `canRepetitions`=variable::set_value(value=(1.0))
    code::call_function(function_name="We.getCorners")
    if (variable::exists(variable=`forRegion`)){
        code::call_function(function_name="We.locationStart")
        repeat::on_grid(start=`Floor 1`,end=`Floor 2`){`Location` ->
            code::call_function(function_name="We.locationAction")
        }
        code::call_function(function_name="We.locationEnd")
        code::call_function(function_name="We.locationStart")
        repeat::on_grid(start=`First Wall 1`,end=`First Wall 2`){`Location` ->
            code::call_function(function_name="We.locationAction")
        }
        code::call_function(function_name="We.locationEnd")
        code::call_function(function_name="We.locationStart")
        repeat::on_grid(start=`Second Wall 1`,end=`Second Wall 2`){`Location` ->
            code::call_function(function_name="We.locationAction")
        }
        code::call_function(function_name="We.locationEnd")
        code::call_function(function_name="We.locationStart")
        repeat::on_grid(start=`Third Wall 1`,end=`Third Wall 2`){`Location` ->
            code::call_function(function_name="We.locationAction")
        }
        code::call_function(function_name="We.locationEnd")
        code::call_function(function_name="We.locationStart")
        repeat::on_grid(start=`Fourth Wall 1`,end=`Fourth Wall 2`){`Location` ->
            code::call_function(function_name="We.locationAction")
        }
        code::call_function(function_name="We.locationEnd")
        code::call_function(function_name="We.locationStart")
        repeat::on_grid(start=`Ceiling 1`,end=`Ceiling 2`){`Location` ->
            code::call_function(function_name="We.locationAction")
        }
        code::call_function(function_name="We.locationEnd")
    }
    else{
        code::call_function(function_name="We.outline2")
    }
}
function `We.outline2`(){
    `Part Set Action`=variable::set_value(value="set")
    `Positions`=variable::create_list(values=[`Floor 1`,`Floor 2`])
    code::call_function(function_name="We.partSet")
    `Positions`=variable::create_list(values=[`First Wall 1`,`First Wall 2`])
    code::call_function(function_name="We.partSet")
    `Positions`=variable::create_list(values=[`Second Wall 1`,`Second Wall 2`])
    code::call_function(function_name="We.partSet")
    `Positions`=variable::create_list(values=[`Third Wall 1`,`Third Wall 2`])
    code::call_function(function_name="We.partSet")
    `Positions`=variable::create_list(values=[`Fourth Wall 1`,`Fourth Wall 2`])
    code::call_function(function_name="We.partSet")
    `Positions`=variable::create_list(values=[`Ceiling 1`,`Ceiling 2`])
    code::call_function(function_name="We.partSet")
}
function `We.count`(){
    repeat::on_grid(start=`Pos 1`,end=`Pos 2`){`Location` ->
        `blocks`=variable::add(value=[`blocks`,(1.0)])
        if (world::block_equals(blocks=[`Materials`],location=`Location`)){
            `Count`=variable::add(value=[`Count`,(1.0)])
        }
        code::call_function(function_name="We.wait")
    }
}
function `We.undo`(){
    `Blocks List`=variable::create_list(values=[])
    `n`=variable::set_value(value=`We.%player%.numberUndo`)
    repeat::for_each_map_entry(map=`We.%player%.undo.%var_local(n)`){`Material`,`Region List` ->
        code::call_function(function_name="We.do2")
        `Region List Size`=variable::get_list_length(list=`Region List`)
        if (variable::greater(value=`Region List Size`,compare=(48000.0))){
            `Parts`=variable::divide(value=[`Region List Size`,(48000.0)])
            `Parts`=variable::round(round_type="CEIL",number=`Parts`)
            repeat::multi_times(amount=`Parts`){`Part` ->
                `Cut End`=variable::multiply(value=[`Part`,(48000.0)])
                `Part`=variable::subtract(value=[`Part`,(1.0)])
                `Cut Start`=variable::multiply(value=[`Part`,(48000.0)])
                `Cut End`=variable::clamp(number=`Cut End`,min=`Cut Start`,max=`Region List Size`)
                `Part`=variable::trim_list(list=`Region List`,start=`Cut Start`,end=`Cut End`)
                world::set_block(locations=[`Part`],block=`Material`)
            }
        }
        else{
            world::set_block(locations=[`Region List`],block=`Material`)
            code::call_function(function_name="We.wait")
        }
        `blocks`=variable::add(value=[`blocks`,`Region List Size`])
    }
    `We.%player%.numberUndo`=variable::subtract(value=[`We.%player%.numberUndo`,`Undo Count`])
    repeat::on_range(start=(`We.%player%.numberUndo`+1),end=`n`,interval=(1.0)){`N` ->
        variable::purge(names=["We.%player%.undo.%var_local(N)"])
    }
    repeat::for_each_in_list(list=`Blocks List`){`B0cZ98Iezxdi81masMIj`,`b` ->
        if (variable::in_range(value=`%var_local(b) Size`,min=(1.0),max=(199.0))){
            if (variable::exists(variable=`%var_local(b) Massive List`)){
                `%var_local(b) Massive List`=variable::list_append_list(list_1=`%var_local(b) Massive List`,list_2=`%var_local(b) List`)
            }
            else{
                `%var_local(b) Massive List`=variable::set_value(value=`%var_local(b) List`)
            }
        }
    }
    `Redo Map`=variable::create_map()
    `We.%player%.numberRedo`=variable::add(value=[`We.%player%.numberRedo`,(1.0)])
    repeat::for_each_in_list(list=`Blocks List`){`WqBT8n98CIHCyn6Xg2VA`,`b` ->
        `Redo Map`=variable::set_map_value(map=`Redo Map`,key=`b`,value=`%var_local(b) Massive List`)
    }
    `We.%player%.redo.%var(We.%player%.numberRedo)`=variable::set_value(value=`Redo Map`)
}
function `We.redo`(){
    `Blocks List`=variable::create_list(values=[])
    `n`=variable::set_value(value=`We.%player%.numberRedo`)
    repeat::for_each_map_entry(map=`We.%player%.redo.%var_local(n)`){`Material`,`Region List` ->
        code::call_function(function_name="We.do2")
        `Region List Size`=variable::get_list_length(list=`Region List`)
        if (variable::greater(value=`Region List Size`,compare=(48000.0))){
            `Parts`=variable::divide(value=[`Region List Size`,(48000.0)])
            `Parts`=variable::round(round_type="CEIL",number=`Parts`)
            repeat::multi_times(amount=`Parts`){`Part` ->
                `Cut End`=variable::multiply(value=[`Part`,(48000.0)])
                `Part`=variable::subtract(value=[`Part`,(1.0)])
                `Cut Start`=variable::multiply(value=[`Part`,(48000.0)])
                `Cut End`=variable::clamp(number=`Cut End`,min=`Cut Start`,max=`Region List Size`)
                `Part`=variable::trim_list(list=`Region List`,start=`Cut Start`,end=`Cut End`)
                world::set_block(locations=[`Part`],block=`Material`)
            }
        }
        else{
            world::set_block(locations=[`Region List`],block=`Material`)
            code::call_function(function_name="We.wait")
        }
        `blocks`=variable::add(value=[`blocks`,`Region List Size`])
    }
    `We.%player%.numberRedo`=variable::subtract(value=[`We.%player%.numberRedo`,`Redo Count`])
    repeat::on_range(start=(`We.%player%.nuberRedo`+1),end=`n`,interval=(1.0)){`N` ->
        variable::purge(names=["We.%player%.redo.%var_local(N)"])
    }
    repeat::for_each_in_list(list=`Blocks List`){`hlb4csR3V15XBgggb9fU`,`b` ->
        if (variable::in_range(value=`%var_local(b) Size`,min=(1.0),max=(199.0))){
            if (variable::exists(variable=`%var_local(b) Massive List`)){
                `%var_local(b) Massive List`=variable::list_append_list(list_1=`%var_local(b) Massive List`,list_2=`%var_local(b) List`)
            }
            else{
                `%var_local(b) Massive List`=variable::set_value(value=`%var_local(b) List`)
            }
        }
    }
}
function `We.do2`(){
    repeat::for_each_in_list(list=`Region List`){`5ULXYdshVotfP9C82mDP`,`Location` ->
        `b`=variable::get_block_material(value_type="ID_WITH_DATA",location=`Location`)
        if not (variable::list_contains_value(values=[`b`],list=`Blocks List`)){
            variable::list_append_value(values=[`b`],variable=`Blocks List`)
            `%var_local(b) List`=variable::create_list(values=[])
        }
        variable::increment(variable=`%var_local(b) Size`,number=(1.0))
        variable::list_append_value(values=[`Location`],variable=`%var_local(b) List`)
        if (variable::greater_or_equals(value=`%var_local(b) Size`,compare=(200.0))){
            if (variable::exists(variable=`%var_local(b) Massive List`)){
                `%var_local(b) Massive List`=variable::list_append_list(list_1=`%var_local(b) Massive List`,list_2=`%var_local(b) List`)
            }
            else{
                `%var_local(b) Massive List`=variable::set_value(value=`%var_local(b) List`)
            }
            `%var_local(b) List`=variable::create_list(values=[])
            `%var_local(b) Size`=variable::set_value(value=(0.0))
            `Iterations`=variable::add(value=[`Iterations`,(199.0)])
            code::call_function(function_name="We.wait")
        }
    }
}
function `We.distr`(){
    repeat::on_grid(start=`Pos 1`,end=`Pos 2`){`Location` ->
        `blocks`=variable::add(value=[`blocks`,(1.0)])
        `blockId`=variable::get_block_material(value_type="ID",location=`Location`)
        variable::increment(variable=`%var_local(blockId).count`)
        code::call_function(function_name="We.wait")
    }
    `distr`=variable::create_map()
    `variables`=variable::get_list_variables(scope="LOCAL")
    repeat::for_each_in_list(list=`variables`){`R7n8xFjJEugMvtzLxvTv`,`variable` ->
        if (variable::text_ends_with(compare=[".count"],value=`variable`)){
            `blockId`=variable::replace_text(first="FIRST",text=`variable`,replace=".count")
            `distr`=variable::set_map_value(map=`distr`,key=`blockId`,value=`%var_local(variable)`)
        }
    }
}
function `We.copy`(){
    `Blocks List`=variable::create_list(values=[])
    repeat::on_grid(start=`Pos 1`,end=`Pos 2`){`Location` ->
        `blocks`=variable::add(value=[`blocks`,(1.0)])
        if (world::block_equals(blocks=["air","cave_air"],location=`Location`)){
            code::call_function(function_name="We.wait")
        }
        else{
            `b`=variable::get_block_material(value_type="ID_WITH_DATA",location=`Location`)
            if not (variable::list_contains_value(values=[`b`],list=`Blocks List`)){
                variable::list_append_value(values=[`b`],variable=`Blocks List`)
                `%var_local(b) List`=variable::create_list(values=[])
            }
            variable::increment(variable=`%var_local(b) Size`,number=(1.0))
            variable::list_append_value(values=[`Location`],variable=`%var_local(b) List`)
            if (variable::greater_or_equals(value=`%var_local(b) Size`,compare=(200.0))){
                if (variable::exists(variable=`%var_local(b) Massive List`)){
                    `%var_local(b) Massive List`=variable::list_append_list(list_1=`%var_local(b) Massive List`,list_2=`%var_local(b) List`)
                }
                else{
                    `%var_local(b) Massive List`=variable::set_value(value=`%var_local(b) List`)
                }
                `%var_local(b) List`=variable::create_list(values=[])
                `%var_local(b) Size`=variable::set_value(value=(0.0))
                `Iterations`=variable::add(value=[`Iterations`,(199.0)])
                code::call_function(function_name="We.wait")
            }
        }
    }
    `clipboard`=variable::create_map()
    repeat::for_each_in_list(list=`Blocks List`){`ygoroGS8wKmTVynsgVhu`,`b` ->
        if (variable::exists(variable=`%var_local(b) Massive List`)){
            `%var_local(b) Massive List`=variable::list_append_list(list_1=`%var_local(b) Massive List`,list_2=`%var_local(b) List`)
        }
        else{
            `%var_local(b) Massive List`=variable::set_value(value=`%var_local(b) List`)
        }
        `clipboard`=variable::set_map_value(map=`clipboard`,key=`b`,value=`%var_local(b) Massive List`)
    }
}
function `We.paste`(){
    `Blocks List`=variable::create_list(values=[])
    `list`=variable::get_map_values(map=`clipboard`)
    `list`=variable::get_list_value(list=`list`,number=(0.0))
    `firstLocation`=variable::get_list_value(list=`list`,number=(0.0))
    `vector`=variable::get_vector_between_locations(start_location=`pasteLocation`,end_location=`firstLocation`)
    repeat::for_each_map_entry(map=`clipboard`){`Material`,`Region List` ->
        `regionList`=variable::create_list(values=[])
        `regionListMin`=variable::create_list(values=[])
        repeat::for_each_in_list(list=`Region List`){`akyMtedvPWCxSoc8snEq`,`Location` ->
            `Location`=variable::shift_location_on_vector(location=`Location`,vector=`vector`)
            variable::list_append_value(values=[`Location`],variable=`regionListMin`)
            `size`=variable::add(value=[`size`,(1.0)])
            if (variable::greater_or_equals(value=`size`,compare=(200.0))){
                `regionList`=variable::list_append_list(list_1=`regionList`,list_2=`regionListMin`)
                `regionListMin`=variable::create_list(values=[])
                `size`=variable::set_value(value=(0.0))
                `blocks`=variable::add(value=[`blocks`,(200.0)])
                `Iterations`=variable::add(value=[`Iterations`,(199.0)])
                code::call_function(function_name="We.wait")
            }
            code::call_function(function_name="We.locationUndo")
        }
        `Region List`=variable::list_append_list(list_1=`regionList`,list_2=`regionListMin`)
        `blocks`=variable::add(value=[`blocks`,`size`])
        `size`=variable::set_value(value=(0.0))
        `Region List Size`=variable::get_list_length(list=`Region List`)
        if (variable::greater(value=`Region List Size`,compare=(48000.0))){
            repeat::multi_times(amount=(ceil(`Region List Size`/48000))){`Part` ->
                `Cut End`=variable::multiply(value=[`Part`,(48000.0)])
                `Part`=variable::subtract(value=[`Part`,(1.0)])
                `Cut Start`=variable::multiply(value=[`Part`,(48000.0)])
                `Cut End`=variable::clamp(number=`Cut End`,min=`Cut Start`,max=`Region List Size`)
                `Part`=variable::trim_list(list=`Region List`,start=`Cut Start`,end=`Cut End`)
                world::set_block(locations=[`Part`],block=`Material`)
                code::call_function(function_name="We.wait")
            }
        }
        else{
            world::set_block(locations=[`Region List`],block=`Material`)
            code::call_function(function_name="We.wait")
        }
    }
    code::call_function(function_name="We.undoEnd")
}
function `We.sortPositions`(){
    if (variable::exists(variable=`Positions`)){
        `Pos 1`=variable::get_list_value(list=`Positions`,number=(0))
        `Pos 2`=variable::get_list_value(list=`Positions`,number=(1))
        variable::purge(names=["Positions"],scope="LOCAL")
    }
    variable::get_all_coordinates(location=`Pos 1`,x=`x1`,y=`y1`,z=`z1`)
    variable::get_all_coordinates(location=`Pos 2`,x=`x2`,y=`y2`,z=`z2`)
    `x min`=variable::min(value=[`x1`,`x2`])
    `y min`=variable::min(value=[`y1`,`y2`])
    `z min`=variable::min(value=[`z1`,`z2`])
    `x max`=variable::max(value=[`x1`,`x2`])
    `y max`=variable::max(value=[`y1`,`y2`])
    `z max`=variable::max(value=[`z1`,`z2`])
    `Pos min`=variable::set_all_coordinates(x=`x min`,y=`y min`,z=`z min`)
    `Pos max`=variable::set_all_coordinates(x=`x max`,y=`y max`,z=`z max`)
    `x dist`=variable::subtract(value=[`x max`,`x min`])
    `y dist`=variable::subtract(value=[`y max`,`y min`])
    `z dist`=variable::subtract(value=[`z max`,`z min`])
    `x dist`=variable::absolute(number=`x dist`)
    `y dist`=variable::absolute(number=`y dist`)
    `z dist`=variable::absolute(number=`z dist`)
    `Volume Region`=variable::multiply(value=[(`x dist`+1),(`y dist`+1),(`z dist`+1)])
}
function `We.getRegion`(){
    `#regions`=variable::remove_map_entry(values=[],map=`regions`,key=`globalRegionId`)
    repeat::for_each_map_entry(map=`#regions`){`#regionId`,`#region` ->
        `#pos1`=variable::get_list_value(list=`#region`,number=(0.0))
        `#pos2`=variable::get_list_value(list=`#region`,number=(1.0))
        if (variable::in_range(value=`Location`,min=`#pos1`,max=`#pos2`)){
            `regionId`=variable::set_value(value=`#regionId`)
            `region`=variable::set_value(value=`#region`)
            `regionFirstPos`=variable::set_value(value=`#pos1`)
            `regionSecondPos`=variable::set_value(value=`#pos2`)
            code::return_function()
        }
    }
    `regionId`=variable::set_value(value=`globalRegionId`)
    `region`=variable::get_map_value(map=`regions`,key=`globalRegionId`)
    `regionFirstPos`=variable::get_list_value(list=`region`,number=(0.0))
    `regionSecondPos`=variable::get_list_value(list=`region`,number=(1.0))
}
function `We.getCorners`(){
    code::call_function(function_name="We.sortPositions")
    `Floor 1`=variable::set_value(value=`Pos min`)
    `Floor 2`=variable::set_coordinate(type="Y",location=`Pos max`,coordinate=`y min`)
    `First Wall 1`=variable::set_value(value=`Pos min`)
    `First Wall 2`=variable::set_all_coordinates(x=`x max`,y=`y max`,z=`z min`)
    `Second Wall 1`=variable::set_value(value=`First Wall 2`)
    `Second Wall 2`=variable::set_coordinate(type="Y",location=`Pos max`,coordinate=`y min`)
    `Third Wall 1`=variable::set_value(value=`Second Wall 2`)
    `Third Wall 2`=variable::set_coordinate(location=`Pos max`,coordinate=`x min`)
    `Fourth Wall 1`=variable::set_value(value=`Third Wall 2`)
    `Fourth Wall 2`=variable::set_value(value=`Pos min`)
    `Ceiling 1`=variable::set_coordinate(type="Y",location=`Pos min`,coordinate=`y max`)
    `Ceiling 2`=variable::set_value(value=`Pos max`)
}
event<world_start>{
    code::call_function(function_name="We.load")
}
function `We.load`(){
    `Префикс WE`=variable::set_value(value="&#ff997cWorldEdit &8» &r")
    code::wait(duration=(1.0))
    if (variable::exists(variable=`pcmd`)){
        code::call_function(function_name="We.load2")
        code::call_function(function_name="We.loadOldBlockIds")
        `commands`=variable::create_list(values=["command: set, executor: \"We.setCommand\", description: \"Устанавливает блоки в регионе\"","command: replace, executor: \"We.replaceCommand\", description: \"Заменяет блоки в регионе\"","command: wand, executor: \"We.wandCommand\", description: \"Выдаёт выделяющий предмет\"","command: stop, executor: \"We.stopCommand\", description: \"Останавливает операцию\"","command: worldedit, executor: \"We.weCommand\", aliases: [we], description: \"Действия с WorldEdit\"","command: copy, executor: \"We.copyCommand\", description: \"Копирует регион\"","command: paste, executor: \"We.pasteCommand\", description: \"Вставляет скопированный регион\"","command: sphere, executor: \"We.sphereCommand\", description: \"Создаёт сферу\"","command: hsphere, executor: \"We.sphereCommand\", description: \"Создаёт пустую сферу\"","command: cylinder, executor: \"We.cylCommand\", aliases: [cyl], description: \"Создаёт цилиндр\"","command: hcylinder, executor: \"We.cylCommand\", aliases: [hcyl], description: \"Создаёт пустой цилиндр\"","command: visual, executor: \"We.visualCommand\", description: \"Изменяет расстояние между частицами выделения\"","command: walls, executor: \"We.wallsCommand\", description: \"Создаёт стены\"","command: outline, executor: \"We.outlineCommand\", aliases: [box], description: \"Создаёт пустой параллелепипед\"","command: count, executor: \"We.countCommand\", description: \"Подсчитывает количество блоков\"","command: undo, executor: \"We.undoCommand\", description: \"Отменяет операцию\"","command: redo, executor: \"We.redoCommand\", description: \"Отменяет отмену операции\"","command: fast, executor: \"We.fastCommand\", description: \"Переключает быстрый режим\"","command: schematic, executor: \"We.schemCommand\", aliases: [schem], description: \"Работа со схемами\"","command: region, executor: \"We.regionCommand\", aliases: [rg], description: \"Работа с регионами\"","command: expand, executor: \"We.expandCommand\", description: \"Расширяет регион\""])
        variable::list_append_value(values=["command: entitykill, executor: \"We.ekillCommand\", aliases: [ekill], description: \"Удаляет существ в регион\"","command: chunk, executor: \"We.chunkCommand\", description: \"Выделяет чанк\"","command: floor, executor: \"We.floorCeilCommand\", description: \"Создаёт пол\"","command: ceiling, executor: \"We.floorCeilCommand\", description: \"Создаёт потолок\"","command: pos1, executor: \"We.posCommand\", description: \"Устанавливает первую позицию\"","command: pos2, executor: \"We.posCommand\", description: \"Устанавливает вторую позицию\"","command: distr, executor: \"We.distrCommand\", description: \"Подсчёт состава региона\"","command: center, executor: \"We.centerCommand\", description: \"Находит центр региона\"","command: unstuck, executor: \"We.unstuckCommand\", description: \"Перемещает наверх, если вы застряли в блоках\"","command: clearclipboard, executor: \"We.clearclipboardCommand\", description: \"Очищает буфер обмена\"","command: rotate, executor: \"We.rotateCommand\", description: \"Вращает скопированный регион\"","command: calculate, executor: \"We.calcCommand\", aliases: [calc], description: \"Выдаёт результат математического выражения\"","command: oldids, executor: \"We.oldidsCommand\", description: \"Просмотр старых ID блоков\"","command: deselect, executor: \"We.deselCommand\", aliases: [desel], description: \"Очищает выделение региона\"","command: cone, executor: \"We.coneCommand\", description: \"Создаёт конус\"","command: hcone, executor: \"We.coneCommand\", description: \"Создаёт пустой конус\"","command: stack, executor: \"We.stackCommand\", description: \"Проставляет регион\"","command: smooth, executor: \"We.smoothCommand\", description: \"Сглаживает регион\"","command: brush, executor: \"We.brushCommand\", description: \"Создаёт кисть\"","command: break, executor: \"We.breakCommand\", description: \"Разрушает блоки в регионе\"","command: generate, executor: \"We.generateCommand\", description: \"Создаёт блоки по выражению\""],variable=`commands`)
        `argumentsTypes`=variable::create_list(values=["Materials","Location","Direction"])
        `argumentsTypesExecutors`=variable::create_list(values=["We.MaterialsType","We.LocationType","We.DirectionType"])
        `argumentsTypes`=variable::create_map(keys=`argumentsTypes`,values=`argumentsTypesExecutors`)
        `stringArgumentsTypes`=variable::create_list(values=["Location"])
        `keys`=variable::create_list(values=["release","version","authors","commands","argumentsTypes","stringArgumentsTypes"])
        `values`=variable::create_list(values=[(4.0),"2.0","unidok",`commands`,`argumentsTypes`,`stringArgumentsTypes`])
        `mapi=worldedit`=variable::create_map(keys=`keys`,values=`values`)
        `v`=variable::get_map_value(map=`mapi=worldedit`,key="version")
        select::player_by_conditional(player::has_privilege())
        player::message(messages=["%var(Префикс WE)&#a6ff6eЗагрузка завершена &7&ov%var_local(v)\\n &8| &fПомощь: &#abc4d6%var(pcmd)we help"])
        player::play_sound(sound=sound(sound="minecraft:entity.player.levelup",volume=1.0,pitch=1.5),location=value::location<current>)
        select::player_by_conditional(player::has_privilege())
        player::message(messages=["%var(Префикс WE)&#a6ff6eЗагрузка завершена &7&ov%var_local(v)\\n &#a6ff6eПомощь: &#abc4d6%var(pcmd)we help"])
        player::play_sound(sound=sound(sound="minecraft:entity.player.levelup",volume=1.0,pitch=1.5),location=value::location<current>)
    }
    else{
        select::player_by_conditional(player::has_privilege())
        player::message(messages=["%var(Префикс WE)&#ff6e6eНеобходим модуль &#ffb657MAPI&#ff6e6e версии &#abc4d60.6.5"])
        player::play_sound(sound=sound(sound="minecraft:block.lava.extinguish",volume=0.5,pitch=2.0),location=value::location<default>)
    }
}
function `We.load2`(){
    `worldSizeBlocks`=variable::multiply(value=[value::world_size,(16.0)])
    `worldNegativeSizeBlocks`=variable::multiply(value=[`worldSizeBlocks`,(-1.0)])
    `worldFirstPos`=variable::set_all_coordinates(x=`worldNegativeSizeBlocks`,y=(-64.0),z=`worldNegativeSizeBlocks`)
    `worldSecondPos`=variable::set_all_coordinates(x=`worldSizeBlocks`,y=(319.0),z=`worldSizeBlocks`)
    `globalRegionId`=variable::set_value(value="__global__")
    `denyUseCheckmarkKeys`=variable::create_list(values=["flagType","door","trapdoor","fence_gate","pressure_plate","button","lever","container","table","campfire","furnace","bed","bell","lectern","redstone","flower_pot"])
    `denyUseCheckmarkValues`=variable::create_list(values=["Checkmark","Дверей","Люков","Калиток","Нажимных плит","Кнопок","Рычагов","Хранилищ","Станков","Костров","Печек","Кроватей","Колоколов","Кафедры","Редстоун-механизмов","Цветочных горшков"])
    `denyUseCheckmark`=variable::create_map(keys=`denyUseCheckmarkKeys`,values=`denyUseCheckmarkValues`)
    `flags`=variable::create_list(values=["interaction","denyUse","mining","build","explosions","blockExplosions","blockDrops","entityDrop","playerDrop","itemDrops","hunger","damage","pvp","fallDamage","fire","pistons","flow","grow","mobSpawning","chat","fly"])
    `types`=variable::create_list(values=["Boolean",`denyUseCheckmark`,"Boolean","Boolean","Boolean","Boolean","Boolean","Boolean","Boolean","Boolean","Boolean","Boolean","Boolean","Boolean","Boolean","Boolean","Boolean","Boolean","Boolean","Boolean","Boolean"])
    variable::list_append_value(values=["gamemode","time","teleport","entryMessage","exitMessage"],variable=`flags`)
    variable::list_append_value(values=["Marker{ adventure: \"Приключение\", creative: \"Творческий\", spectator: \"Наблюдатель\", survival: \"Выживание\" }","Int","Location","String","String"],variable=`types`)
    `We.flags`=variable::create_map(keys=`flags`,values=`types`)
    `icons`=variable::create_list(values=["\{\C\o\u\n\t\:\1\b\,\i\d\:\"\m\i\n\e\c\r\a\f\t\:\g\o\l\d\e\n\_\h\o\e\"\,\t\a\g\:\{\D\a\m\a\g\e\:\0\,\H\i\d\e\F\l\a\g\s\:\2\,\d\i\s\p\l\a\y\:\{\N\a\m\e\:\'\{\"\i\t\a\l\i\c\"\:\f\a\l\s\e\,\"\e\x\t\r\a\"\:\[\{\"\t\e\x\t\"\:\"\"\}\,\{\"\t\e\x\t\"\:\"\В\з\а\и\м\о\д\е\й\с\т\в\и\е\ \с\ \м\и\р\о\м\"\}\]\,\"\t\e\x\t\"\:\"\"\}\'\}\}\}","\{\C\o\u\n\t\:\1\b\,\i\d\:\"\m\i\n\e\c\r\a\f\t\:\m\a\n\g\r\o\v\e\_\d\o\o\r\"\,\t\a\g\:\{\d\i\s\p\l\a\y\:\{\N\a\m\e\:\'\{\"\i\t\a\l\i\c\"\:\f\a\l\s\e\,\"\e\x\t\r\a\"\:\[\{\"\t\e\x\t\"\:\"\"\}\,\{\"\t\e\x\t\"\:\"\З\а\п\р\е\т\и\т\ь\ \и\с\п\о\л\ь\з\о\в\а\н\и\е\"\}\]\,\"\t\e\x\t\"\:\"\"\}\'\}\}\}","\{\C\o\u\n\t\:\1\b\,\i\d\:\"\m\i\n\e\c\r\a\f\t\:\d\i\a\m\o\n\d\_\p\i\c\k\a\x\e\"\,\t\a\g\:\{\D\a\m\a\g\e\:\0\,\H\i\d\e\F\l\a\g\s\:\2\,\d\i\s\p\l\a\y\:\{\N\a\m\e\:\'\{\"\i\t\a\l\i\c\"\:\f\a\l\s\e\,\"\e\x\t\r\a\"\:\[\{\"\t\e\x\t\"\:\"\"\}\,\{\"\t\e\x\t\"\:\"\Л\о\м\а\н\и\е\ \б\л\о\к\о\в\"\}\]\,\"\t\e\x\t\"\:\"\"\}\'\}\}\}","\{\C\o\u\n\t\:\1\b\,\i\d\:\"\m\i\n\e\c\r\a\f\t\:\b\r\i\c\k\s\"\,\t\a\g\:\{\d\i\s\p\l\a\y\:\{\N\a\m\e\:\'\{\"\i\t\a\l\i\c\"\:\f\a\l\s\e\,\"\e\x\t\r\a\"\:\[\{\"\t\e\x\t\"\:\"\"\}\,\{\"\t\e\x\t\"\:\"\С\т\р\о\и\т\е\л\ь\с\т\в\о\"\}\]\,\"\t\e\x\t\"\:\"\"\}\'\}\}\}","\{\C\o\u\n\t\:\1\b\,\i\d\:\"\m\i\n\e\c\r\a\f\t\:\t\n\t\"\,\t\a\g\:\{\d\i\s\p\l\a\y\:\{\N\a\m\e\:\'\{\"\i\t\a\l\i\c\"\:\f\a\l\s\e\,\"\e\x\t\r\a\"\:\[\{\"\t\e\x\t\"\:\"\"\}\,\{\"\t\e\x\t\"\:\"\В\з\р\ы\в\ы\"\}\]\,\"\t\e\x\t\"\:\"\"\}\'\}\}\}","\{\C\o\u\n\t\:\1\b\,\i\d\:\"\m\i\n\e\c\r\a\f\t\:\e\n\d\_\c\r\y\s\t\a\l\"\,\t\a\g\:\{\d\i\s\p\l\a\y\:\{\N\a\m\e\:\'\{\"\i\t\a\l\i\c\"\:\f\a\l\s\e\,\"\e\x\t\r\a\"\:\[\{\"\t\e\x\t\"\:\"\"\}\,\{\"\t\e\x\t\"\:\"\В\з\р\ы\в\ы\ \б\л\о\к\о\в\"\}\]\,\"\t\e\x\t\"\:\"\"\}\'\}\}\}","\{\C\o\u\n\t\:\1\b\,\i\d\:\"\m\i\n\e\c\r\a\f\t\:\c\o\b\b\l\e\s\t\o\n\e\"\,\t\a\g\:\{\d\i\s\p\l\a\y\:\{\N\a\m\e\:\'\{\"\i\t\a\l\i\c\"\:\f\a\l\s\e\,\"\e\x\t\r\a\"\:\[\{\"\t\e\x\t\"\:\"\"\}\,\{\"\t\e\x\t\"\:\"\В\ы\п\а\д\е\н\и\е\ \п\р\е\д\м\е\т\о\в\ \и\з\ \б\л\о\к\о\в\"\}\]\,\"\t\e\x\t\"\:\"\"\}\'\}\}\}","\{\C\o\u\n\t\:\1\b\,\i\d\:\"\m\i\n\e\c\r\a\f\t\:\s\k\e\l\e\t\o\n\_\s\k\u\l\l\"\,\t\a\g\:\{\d\i\s\p\l\a\y\:\{\N\a\m\e\:\'\{\"\i\t\a\l\i\c\"\:\f\a\l\s\e\,\"\e\x\t\r\a\"\:\[\{\"\t\e\x\t\"\:\"\"\}\,\{\"\t\e\x\t\"\:\"\В\ы\п\а\д\е\н\и\е\ \п\р\е\д\м\е\т\о\в\ \и\з\ \с\у\щ\е\с\т\в\"\}\]\,\"\t\e\x\t\"\:\"\"\}\'\}\}\}","\{\C\o\u\n\t\:\1\b\,\i\d\:\"\m\i\n\e\c\r\a\f\t\:\c\h\e\s\t\"\,\t\a\g\:\{\d\i\s\p\l\a\y\:\{\N\a\m\e\:\'\{\"\i\t\a\l\i\c\"\:\f\a\l\s\e\,\"\e\x\t\r\a\"\:\[\{\"\t\e\x\t\"\:\"\"\}\,\{\"\t\e\x\t\"\:\"\С\о\х\р\а\н\е\н\и\е\ \п\р\е\д\м\е\т\о\в\ \п\р\и\ \с\м\е\р\т\и\ \и\г\р\о\к\а\"\}\]\,\"\t\e\x\t\"\:\"\"\}\'\}\}\}","\{\C\o\u\n\t\:\1\b\,\i\d\:\"\m\i\n\e\c\r\a\f\t\:\g\l\o\w\s\t\o\n\e\_\d\u\s\t\"\,\t\a\g\:\{\d\i\s\p\l\a\y\:\{\N\a\m\e\:\'\{\"\i\t\a\l\i\c\"\:\f\a\l\s\e\,\"\e\x\t\r\a\"\:\[\{\"\t\e\x\t\"\:\"\"\}\,\{\"\t\e\x\t\"\:\"\В\ы\б\р\а\с\ы\в\а\н\и\е\ \п\р\е\д\м\е\т\о\в\"\}\]\,\"\t\e\x\t\"\:\"\"\}\'\}\}\}","\{\C\o\u\n\t\:\1\b\,\i\d\:\"\m\i\n\e\c\r\a\f\t\:\c\o\o\k\e\d\_\c\h\i\c\k\e\n\"\,\t\a\g\:\{\d\i\s\p\l\a\y\:\{\N\a\m\e\:\'\{\"\i\t\a\l\i\c\"\:\f\a\l\s\e\,\"\e\x\t\r\a\"\:\[\{\"\t\e\x\t\"\:\"\"\}\,\{\"\t\e\x\t\"\:\"\И\з\м\е\н\е\н\и\е\ \г\о\л\о\д\а\"\}\]\,\"\t\e\x\t\"\:\"\"\}\'\}\}\}","\{\C\o\u\n\t\:\1\b\,\i\d\:\"\m\i\n\e\c\r\a\f\t\:\r\e\d\s\t\o\n\e\"\,\t\a\g\:\{\d\i\s\p\l\a\y\:\{\N\a\m\e\:\'\{\"\i\t\a\l\i\c\"\:\f\a\l\s\e\,\"\e\x\t\r\a\"\:\[\{\"\t\e\x\t\"\:\"\"\}\,\{\"\t\e\x\t\"\:\"\П\о\л\у\ч\е\н\и\е\ \у\р\о\н\а\"\}\]\,\"\t\e\x\t\"\:\"\"\}\'\}\}\}","\{\C\o\u\n\t\:\1\b\,\i\d\:\"\m\i\n\e\c\r\a\f\t\:\w\o\o\d\e\n\_\s\w\o\r\d\"\,\t\a\g\:\{\D\a\m\a\g\e\:\0\,\H\i\d\e\F\l\a\g\s\:\2\,\d\i\s\p\l\a\y\:\{\N\a\m\e\:\'\{\"\i\t\a\l\i\c\"\:\f\a\l\s\e\,\"\e\x\t\r\a\"\:\[\{\"\t\e\x\t\"\:\"\"\}\,\{\"\t\e\x\t\"\:\"\P\v\P\"\}\]\,\"\t\e\x\t\"\:\"\"\}\'\}\}\}","\{\C\o\u\n\t\:\1\b\,\i\d\:\"\m\i\n\e\c\r\a\f\t\:\l\e\a\t\h\e\r\_\b\o\o\t\s\"\,\t\a\g\:\{\D\a\m\a\g\e\:\0\,\H\i\d\e\F\l\a\g\s\:\2\,\d\i\s\p\l\a\y\:\{\N\a\m\e\:\'\{\"\i\t\a\l\i\c\"\:\f\a\l\s\e\,\"\e\x\t\r\a\"\:\[\{\"\t\e\x\t\"\:\"\"\}\,\{\"\t\e\x\t\"\:\"\У\р\о\н\ \о\т\ \п\а\д\е\н\и\я\"\}\]\,\"\t\e\x\t\"\:\"\"\}\'\}\}\}","\{\C\o\u\n\t\:\1\b\,\i\d\:\"\m\i\n\e\c\r\a\f\t\:\f\l\i\n\t\_\a\n\d\_\s\t\e\e\l\"\,\t\a\g\:\{\D\a\m\a\g\e\:\0\,\d\i\s\p\l\a\y\:\{\N\a\m\e\:\'\{\"\i\t\a\l\i\c\"\:\f\a\l\s\e\,\"\e\x\t\r\a\"\:\[\{\"\t\e\x\t\"\:\"\"\}\,\{\"\t\e\x\t\"\:\"\О\г\о\н\ь\"\}\]\,\"\t\e\x\t\"\:\"\"\}\'\}\}\}","\{\C\o\u\n\t\:\1\b\,\i\d\:\"\m\i\n\e\c\r\a\f\t\:\p\i\s\t\o\n\"\,\t\a\g\:\{\d\i\s\p\l\a\y\:\{\N\a\m\e\:\'\{\"\i\t\a\l\i\c\"\:\f\a\l\s\e\,\"\e\x\t\r\a\"\:\[\{\"\t\e\x\t\"\:\"\"\}\,\{\"\t\e\x\t\"\:\"\Р\а\б\о\т\а\ \п\о\р\ш\н\е\й\"\}\]\,\"\t\e\x\t\"\:\"\"\}\'\}\}\}","\{\C\o\u\n\t\:\1\b\,\i\d\:\"\m\i\n\e\c\r\a\f\t\:\w\a\t\e\r\_\b\u\c\k\e\t\"\,\t\a\g\:\{\d\i\s\p\l\a\y\:\{\N\a\m\e\:\'\{\"\i\t\a\l\i\c\"\:\f\a\l\s\e\,\"\e\x\t\r\a\"\:\[\{\"\t\e\x\t\"\:\"\"\}\,\{\"\t\e\x\t\"\:\"\Т\е\ч\е\н\и\е\ \ж\и\д\к\о\с\т\е\й\"\}\]\,\"\t\e\x\t\"\:\"\"\}\'\}\}\}","\{\C\o\u\n\t\:\1\b\,\i\d\:\"\m\i\n\e\c\r\a\f\t\:\w\h\e\a\t\_\s\e\e\d\s\"\,\t\a\g\:\{\d\i\s\p\l\a\y\:\{\N\a\m\e\:\'\{\"\i\t\a\l\i\c\"\:\f\a\l\s\e\,\"\e\x\t\r\a\"\:\[\{\"\t\e\x\t\"\:\"\"\}\,\{\"\t\e\x\t\"\:\"\Р\о\с\т\ \б\л\о\к\о\в\"\}\]\,\"\t\e\x\t\"\:\"\"\}\'\}\}\}","\{\C\o\u\n\t\:\1\b\,\i\d\:\"\m\i\n\e\c\r\a\f\t\:\z\o\m\b\i\e\_\h\e\a\d\"\,\t\a\g\:\{\d\i\s\p\l\a\y\:\{\L\o\r\e\:\[\'\{\"\i\t\a\l\i\c\"\:\f\a\l\s\e\,\"\c\o\l\o\r\"\:\"\w\h\i\t\e\"\,\"\e\x\t\r\a\"\:\[\{\"\t\e\x\t\"\:\"\"\}\,\{\"\c\o\l\o\r\"\:\"\g\r\a\y\"\,\"\t\e\x\t\"\:\"\Ч\т\о\б\ы\ \о\т\ \э\т\о\г\о\ \б\ы\л\ \т\о\л\к\,\ \н\у\ж\н\о\ \и\г\р\о\в\о\е\"\}\]\,\"\t\e\x\t\"\:\"\"\}\'\,\'\{\"\i\t\a\l\i\c\"\:\f\a\l\s\e\,\"\c\o\l\o\r\"\:\"\w\h\i\t\e\"\,\"\e\x\t\r\a\"\:\[\{\"\t\e\x\t\"\:\"\"\}\,\{\"\c\o\l\o\r\"\:\"\g\r\a\y\"\,\"\t\e\x\t\"\:\"\п\р\а\в\и\л\о\ \"\}\,\{\"\c\o\l\o\r\"\:\"\y\e\l\l\o\w\"\,\"\t\e\x\t\"\:\"\d\o\M\o\b\S\p\a\w\n\i\n\g\"\}\,\{\"\t\e\x\t\"\:\"\ \"\}\,\{\"\c\o\l\o\r\"\:\"\g\r\a\y\"\,\"\t\e\x\t\"\:\"\\\\\u\0\0\3\d\"\}\,\{\"\t\e\x\t\"\:\"\ \"\}\,\{\"\c\o\l\o\r\"\:\"\g\r\e\e\n\"\,\"\t\e\x\t\"\:\"\t\r\u\e\"\}\]\,\"\t\e\x\t\"\:\"\"\}\'\]\,\N\a\m\e\:\'\{\"\i\t\a\l\i\c\"\:\f\a\l\s\e\,\"\e\x\t\r\a\"\:\[\{\"\t\e\x\t\"\:\"\"\}\,\{\"\t\e\x\t\"\:\"\П\о\я\в\л\е\н\и\е\ \м\о\б\о\в\"\}\]\,\"\t\e\x\t\"\:\"\"\}\'\}\}\}","\{\C\o\u\n\t\:\1\b\,\i\d\:\"\m\i\n\e\c\r\a\f\t\:\w\r\i\t\a\b\l\e\_\b\o\o\k\"\,\t\a\g\:\{\d\i\s\p\l\a\y\:\{\L\o\r\e\:\[\'\{\"\i\t\a\l\i\c\"\:\f\a\l\s\e\,\"\c\o\l\o\r\"\:\"\w\h\i\t\e\"\,\"\e\x\t\r\a\"\:\[\{\"\t\e\x\t\"\:\"\"\}\,\{\"\c\o\l\o\r\"\:\"\g\r\a\y\"\,\"\t\e\x\t\"\:\"\М\о\ж\е\т\ \н\е\ \р\а\б\о\т\а\т\ь\,\ \е\с\л\и\ \в\ \м\и\р\е\"\}\]\,\"\t\e\x\t\"\:\"\"\}\'\,\'\{\"\i\t\a\l\i\c\"\:\f\a\l\s\e\,\"\c\o\l\o\r\"\:\"\w\h\i\t\e\"\,\"\e\x\t\r\a\"\:\[\{\"\t\e\x\t\"\:\"\"\}\,\{\"\c\o\l\o\r\"\:\"\g\r\a\y\"\,\"\t\e\x\t\"\:\"\к\а\с\т\о\м\н\ы\й\ \ч\а\т\"\}\]\,\"\t\e\x\t\"\:\"\"\}\'\]\,\N\a\m\e\:\'\{\"\i\t\a\l\i\c\"\:\f\a\l\s\e\,\"\e\x\t\r\a\"\:\[\{\"\t\e\x\t\"\:\"\"\}\,\{\"\t\e\x\t\"\:\"\В\о\з\м\о\ж\н\о\с\т\ь\ \п\и\с\а\т\ь\ \в\ \ч\а\т\"\}\]\,\"\t\e\x\t\"\:\"\"\}\'\}\}\}","\{\C\o\u\n\t\:\1\b\,\i\d\:\"\m\i\n\e\c\r\a\f\t\:\f\e\a\t\h\e\r\"\,\t\a\g\:\{\d\i\s\p\l\a\y\:\{\N\a\m\e\:\'\{\"\i\t\a\l\i\c\"\:\f\a\l\s\e\,\"\e\x\t\r\a\"\:\[\{\"\t\e\x\t\"\:\"\"\}\,\{\"\t\e\x\t\"\:\"\В\ы\д\а\в\а\т\ь\ \п\о\л\ё\т\"\}\]\,\"\t\e\x\t\"\:\"\"\}\'\}\}\}"])
    variable::list_append_value(values=["\{\C\o\u\n\t\:\1\b\,\i\d\:\"\m\i\n\e\c\r\a\f\t\:\g\o\l\d\e\n\_\p\i\c\k\a\x\e\"\,\t\a\g\:\{\D\a\m\a\g\e\:\0\,\H\i\d\e\F\l\a\g\s\:\2\,\d\i\s\p\l\a\y\:\{\N\a\m\e\:\'\{\"\i\t\a\l\i\c\"\:\f\a\l\s\e\,\"\e\x\t\r\a\"\:\[\{\"\t\e\x\t\"\:\"\"\}\,\{\"\t\e\x\t\"\:\"\В\ы\д\а\в\а\т\ь\ \р\е\ж\и\м\ \и\г\р\ы\"\}\]\,\"\t\e\x\t\"\:\"\"\}\'\}\}\}","\{\C\o\u\n\t\:\1\b\,\i\d\:\"\m\i\n\e\c\r\a\f\t\:\c\l\o\c\k\"\,\t\a\g\:\{\d\i\s\p\l\a\y\:\{\L\o\r\e\:\[\'\{\"\i\t\a\l\i\c\"\:\f\a\l\s\e\,\"\c\o\l\o\r\"\:\"\w\h\i\t\e\"\,\"\e\x\t\r\a\"\:\[\{\"\t\e\x\t\"\:\"\"\}\,\{\"\c\o\l\o\r\"\:\"\g\r\a\y\"\,\"\t\e\x\t\"\:\"\П\о\с\л\е\ \в\ы\х\о\д\а\ \и\з\ \р\е\г\и\о\н\а\ \в\р\е\м\я\ \н\е\ \"\}\]\,\"\t\e\x\t\"\:\"\"\}\'\,\'\{\"\i\t\a\l\i\c\"\:\f\a\l\s\e\,\"\c\o\l\o\r\"\:\"\w\h\i\t\e\"\,\"\e\x\t\r\a\"\:\[\{\"\t\e\x\t\"\:\"\"\}\,\{\"\c\o\l\o\r\"\:\"\g\r\a\y\"\,\"\t\e\x\t\"\:\"\б\у\д\е\т\ \и\д\т\и\ \д\л\я\ \и\г\р\о\к\а\"\}\]\,\"\t\e\x\t\"\:\"\"\}\'\]\,\N\a\m\e\:\'\{\"\i\t\a\l\i\c\"\:\f\a\l\s\e\,\"\e\x\t\r\a\"\:\[\{\"\t\e\x\t\"\:\"\"\}\,\{\"\t\e\x\t\"\:\"\В\р\е\м\я\"\}\]\,\"\t\e\x\t\"\:\"\"\}\'\}\}\}","\{\C\o\u\n\t\:\1\b\,\i\d\:\"\m\i\n\e\c\r\a\f\t\:\e\n\d\e\r\_\e\y\e\"\,\t\a\g\:\{\d\i\s\p\l\a\y\:\{\L\o\r\e\:\[\'\{\"\i\t\a\l\i\c\"\:\f\a\l\s\e\,\"\c\o\l\o\r\"\:\"\w\h\i\t\e\"\,\"\e\x\t\r\a\"\:\[\{\"\t\e\x\t\"\:\"\"\}\,\{\"\c\o\l\o\r\"\:\"\g\r\a\y\"\,\"\t\e\x\t\"\:\"\К\у\д\а\ \б\у\д\е\т\ \т\е\л\е\п\о\р\т\и\р\о\в\а\т\ь\ \п\р\и\"\}\]\,\"\t\e\x\t\"\:\"\"\}\'\,\'\{\"\i\t\a\l\i\c\"\:\f\a\l\s\e\,\"\c\o\l\o\r\"\:\"\w\h\i\t\e\"\,\"\e\x\t\r\a\"\:\[\{\"\t\e\x\t\"\:\"\"\}\,\{\"\c\o\l\o\r\"\:\"\g\r\a\y\"\,\"\t\e\x\t\"\:\"\и\с\п\о\л\ь\з\о\в\а\н\и\и\ \r\e\g\i\o\n\ \t\e\l\e\p\o\r\t\"\}\]\,\"\t\e\x\t\"\:\"\"\}\'\]\,\N\a\m\e\:\'\{\"\i\t\a\l\i\c\"\:\f\a\l\s\e\,\"\e\x\t\r\a\"\:\[\{\"\t\e\x\t\"\:\"\"\}\,\{\"\t\e\x\t\"\:\"\М\е\с\т\о\ \т\е\л\е\п\о\р\т\а\ц\и\и\"\}\]\,\"\t\e\x\t\"\:\"\"\}\'\}\}\}","\{\C\o\u\n\t\:\1\b\,\i\d\:\"\m\i\n\e\c\r\a\f\t\:\k\n\o\w\l\e\d\g\e\_\b\o\o\k\"\,\t\a\g\:\{\d\i\s\p\l\a\y\:\{\N\a\m\e\:\'\{\"\i\t\a\l\i\c\"\:\f\a\l\s\e\,\"\e\x\t\r\a\"\:\[\{\"\t\e\x\t\"\:\"\"\}\,\{\"\t\e\x\t\"\:\"\С\о\о\б\щ\е\н\и\е\ \п\р\и\ \в\х\о\д\е\"\}\]\,\"\t\e\x\t\"\:\"\"\}\'\}\}\}","\{\C\o\u\n\t\:\1\b\,\i\d\:\"\m\i\n\e\c\r\a\f\t\:\b\o\o\k\"\,\t\a\g\:\{\d\i\s\p\l\a\y\:\{\N\a\m\e\:\'\{\"\i\t\a\l\i\c\"\:\f\a\l\s\e\,\"\e\x\t\r\a\"\:\[\{\"\t\e\x\t\"\:\"\"\}\,\{\"\t\e\x\t\"\:\"\С\о\о\б\щ\е\н\и\е\ \п\р\и\ \в\ы\х\о\д\е\"\}\]\,\"\t\e\x\t\"\:\"\"\}\'\}\}\}"],variable=`icons`)
    `We.flagsIcons`=variable::create_map(keys=`flags`,values=`icons`)
    `defaultFlagsKeys`=variable::create_list(values=["interaction","explosions","blockExplosions","damage","pvp","fallDamage","mobSpawning","chat","fire","grow","flow","pistons","hunger","blockDrops","itemDrops","mining","build","entityDrop"])
    `defaultFlagsValues`=variable::create_list(values=[(1.0),(1.0),(1.0),(1.0),(1.0),(1.0),(1.0),(1.0),(1.0),(1.0),(1.0),(1.0),(1.0),(1.0),(1.0),(1.0),(1.0),(1.0)])
    `We.defaultFlags`=variable::create_map(keys=`defaultFlagsKeys`,values=`defaultFlagsValues`)
    if not (variable::exists(variable=`regions`)){
        `regions`=variable::create_map()
        repeat::for_each_map_entry(map=`We.defaultFlags`){`flag`,`value` ->
            `regionInfo.%var(globalRegionId).%var_local(flag)`=variable::set_value(value=`value`)
        }
    }
    `worldSecondPos`=variable::set_all_coordinates(x=(`worldSizeBlocks`+0.999),y=(319.999),z=(`worldSizeBlocks`+0.999))
    `region`=variable::create_list(values=[`worldFirstPos`,`worldSecondPos`])
    `regions`=variable::set_map_value(map=`regions`,key=`globalRegionId`,value=`region`)
    `We.commandsInfo`=variable::create_list(values=["{ command: we, args: [первы, второ], description: [\"Ваще ебейшиая\"], example: [\"релоад\", \"хелп\"], icon: warped_sign, info: [\"есле короче то капец\"] }"])
    `We.brushes`=variable::create_list(values=["cube","replace","sphere","cyl","explode","break"])
    code::start_process(process_name="We.prepare")
}
function `We.loadOldBlockIds`(){
    `We.oldBlockIds`=variable::create_list(values=["air","stone, granite, polished_granite, diorite, polished_diorite, andesite, polished_andesite","grass_block","dirt, coarse_dirt, podzol","cobblestone","oak_planks, spruce_planks, birch_planks, jungle_planks, acacia_planks, dark_oak_planks","oak_planks, spruce_sapling, birch_sapling, jungle_sapling, acacia_sapling, dark_oak_sapling","bedrock","water","water","lava","lava","sand, red_sand","gravel","gold_ore","iron_ore","coal_ore","oak_log, spruce_log, birch_log, jungle_log","oak_leaves, spruce_leaves, birch_leaves, jungle_leaves","sponge, wet_sponge","glass"])
    variable::list_append_value(values=["lapis_ore","lapis_block","dispenser","sandstone, chiseled_sandstone, cut_sandstone","note_block","red_bed","powered_rail","detector_rail","sticky_piston","cobweb","dead_bush, grass, fern","dead_bush","piston","piston_head","white_wool, orange_wool, magenta_wool, light_blue_wool, yellow_wool, lime_wool, pink_wool, gray_wool, light_gray_wool, cyan_wool, purple_wool, blue_wool, brown_wool, green_wool, red_wool, black_wool","air","dandelion","poppy, blue_orchid, allium, azure_bluet, red_tulip, orange_tulip, white_tulip, pink_tulip, oxeye_daisy","brown_mushroom","red_mushroom","gold_block"],variable=`We.oldBlockIds`)
    variable::list_append_value(values=["iron_block","stone_slab, sandstone_slab, petrified_oak_slab, cobblestone_slab, brick_slab, stone_brick_slab, quartz_slab, nether_brick_slab","stone_slab, sandstone_slab, petrified_oak_slab, cobblestone_slab, brick_slab, stone_brick_slab, quartz_slab, nether_brick_slab","bricks","tnt","bookshelf","mossy_cobblestone","obsidian","torch","fire","spawner","oak_stairs","chest","redstone_wire","diamond_ore","diamond_block","crafting_table","wheat","farmland","furnace","furnace"],variable=`We.oldBlockIds`)
    variable::list_append_value(values=["oak_sign","oak_door","ladder","rail","cobblestone_stairs","wall_oak_sign","lever","stone_pressure_plate","iron_door","oak_pressure_plate","redstone_ore","redstone_ore","redstone_torch","redstone_torch","stone_button","snow","ice","snow_block","cactus","clay","sugar_cane"],variable=`We.oldBlockIds`)
    variable::list_append_value(values=["note_block","oak_fence","pumpkin","netherrack","soul_sand","glowstone","nether_portal","lit_pumpkin","cake","repeater","repeater","white_stained_glass,orange_stained_glass,magenta_stained_glass,light_blue_stained_glass,yellow_stained_glass,lime_stained_glass,pink_stained_glass,gray_stained_glass,light_gray_stained_glass,cyan_stained_glass,purple_stained_glass,blue_stained_glass,brown_stained_glass,green_stained_glass,red_stained_glass,black_stained_glass","oak_trapdoor","infested_stone,infested_cobblestone,infested_stone_bricks,infested_mossy_stone_bricks,infested_cracked_stone_bricks,infested_chiseled_stone_bricks","stone_bricks,mossy_stone_bricks,cracked_stone_bricks,chiseled_stone_bricks,stone_bricks","brown_mushroom_block","red_mushroom_block","iron_bars","glass_pane","melon","pumpkin_stem"],variable=`We.oldBlockIds`)
    variable::list_append_value(values=["melon_stem","vine","oak_fence_gate","brick_stairs","stone_brick_stairs","mycelium","lily_pad","nether_bricks","nether_brick_fence","nether_brick_stairs","nether_wart","enchanting_table","brewing_stand","cauldron","end_portal","end_portal_frame","end_stone","dragon_egg","redstone_lamp","redstone_lamp","dropper"],variable=`We.oldBlockIds`)
    variable::list_append_value(values=["oak_slab,spruce_slab,birch_slab,jungle_slab,acacia_slab,dark_oak_slab","cocoa","sandstone_stairs","emerald_ore","enderchest","tripwire_hook","string","emerald_block","spruce_stairs","birch_stairs","jungle_stairs","command_block","beacon","stone_wall","flower_pot","carrots","potatoes","oak_button","skeleton_skull","anvil","trapped_chest"],variable=`We.oldBlockIds`)
    variable::list_append_value(values=["light_weighted_pressure_plate","heavy_weighted_pressure_plate","comparator","comparator","daylight_detector","redstone_block","quartz_ore","hopper","quartz_block,chiseled_quartz_block,quartz_pillar","quartz_stairs","oak_planks,spruce_planks,jungle_planks,acacia_planks,dark_oak_planks","activator_rail","white_teraccota,orange_teraccota,magenta_teraccota,light_blue_teraccota,yellow_teraccota,lime_teraccota,pink_teraccota,gray_teraccota,light_gray_teraccota,cyan_teraccota,purple_teraccota,blue_teraccota,brown_teraccota,green_teraccota,red_teraccota,black_teraccota","white_stained_glass_pane,orange_stained_glass_pane,magenta_stained_glass_pane,light_blue_stained_glass_pane,yellow_stained_glass_pane,lime_stained_glass_pane,pink_stained_glass_pane,gray_stained_glass_pane,light_gray_stained_glass_pane,cyan_stained_glass_pane,purple_stained_glass_pane,blue_stained_glass_pane,brown_stained_glass_pane,green_stained_glass_pane,red_stained_glass_pane,black_stained_glass_pane","acacia_leaves,dark_oak_leaves","acacia_log,dark_oak_log","acacia_stairs","dark_oak_stairs","slime_block","barrier","iron_trapdoor"],variable=`We.oldBlockIds`)
    variable::list_append_value(values=["prismarine,dark_prismarine,prismarine_bricks","sea_lantern","hay_block","white_carpet,orange_carpet,magenta_carpet,light_blue_carpet,yellow_carpet,lime_carpet,pink_carpet,gray_carpet,light_gray_carpet,cyan_carpet,purple_carpet,blue_carpet,brown_carpet,green_carpet,red_carpet,black_carpet","teraccota","coal_block","packed_ice","sunflower,lilac,tall_grass,large_fern,rose_bush,peony","white_banner","white_wall_banner","daylight_detector","red_sandstone,chiseled_red_sandstone,cut_red_sandstone","red_sandstone_stairs","red_sandstone_slab","red_sandstone_slab","spruce_fence_gate","birch_fence_gate","jungle_fence_gate","dark_oak_fence_gate","acacia_fence_gate","spruce_fence"],variable=`We.oldBlockIds`)
    variable::list_append_value(values=["birch_fence","jungle_fence","acacia_fence","dark_oak_fence","spruce_door","birch_door","jungle_door","acacia_door","dark_oak_door","end_rod","chorus_plant","chorus_flower","purpur_block","purpur_pillar","purpur_stairs","purpur_slab","purpur_slab","end_stone_bricks","beetroots","dirt_path","end_gateway"],variable=`We.oldBlockIds`)
    variable::list_append_value(values=["repeating_command_block","chain_command_block","frosted_ice","magma","nether_wart_block","red_nether_bricks","bone_block","structure_void","observer","white_shulker_box","orange_shulker_box","magenta_shulker_box","light_blue_shulker_box","yellow_shulker_box","lime_shulker_box","pink_shulker_box","gray_shulker_box","light_gray_shulker_box","cyan_shulker_box","purple_shulker_box","blue_shulker_box"],variable=`We.oldBlockIds`)
    variable::list_append_value(values=["brown_shulker_box","green_shulker_box","red_shulker_box","black_shulker_box","white_glazed_teraccota","orange_glazed_teraccota","magenta_glazed_teraccota","light_blue_glazed_teraccota","yellow_glazed_teraccota","lime_glazed_teraccota","pink_glazed_teraccota","gray_glazed_teraccota","light_gray_glazed_teraccota","cyan_glazed_teraccota","purple_glazed_teraccota","blue_glazed_teraccota","brown_glazed_teraccota","green_glazed_teraccota","red_glazed_teraccota","black_glazed_teraccota","white_concrete,orange_concrete,magenta_concrete,light_blue_concrete,yellow_concrete,lime_concrete,pink_concrete,gray_concrete,light_gray_concrete,cyan_concrete,purple_concrete,blue_concrete,brown_concrete,green_concrete,red_concrete,black_concrete"],variable=`We.oldBlockIds`)
    variable::list_append_value(values=["white_concrete_powder,orange_concrete_powder,magenta_concrete_powder,light_blue_concrete_powder,yellow_concrete_powder,lime_concrete_powder,pink_concrete_powder,gray_concrete_powder,light_gray_concrete_powder,cyan_concrete_powder,purple_concrete_powder,blue_concrete_powder,brown_concrete_powder,green_concrete_powder,red_concrete_powder,black_concrete_powder","null","null","structure_block"],variable=`We.oldBlockIds`)
    repeat::for_each_in_list(list=`We.oldBlockIds`){`i`,`id` ->
        `id`=variable::parse_json(json="[%var_local(id)]")
        `We.oldBlockIds`=variable::set_list_value(list=`We.oldBlockIds`,number=`i`,value=`id`)
    }
}
function `We.getBlockId`(){
    `#[Index`=variable::get_index_of_subtext(text=`stringBlockId`,subtext="[")
    if (variable::greater_or_equals(value=`#[Index`,compare=(0.0))){
        `#length`=variable::get_text_length(text=`stringBlockId`)
        `#blockData`=variable::trim_text(text=`stringBlockId`,start=`#[Index`,end=`#length`)
        `stringBlockId`=variable::trim_text(text=`stringBlockId`,start=(0.0),end=`#[Index`)
    }
    if (variable::text_matches(values=[`stringBlockId`],regular_expressions="TRUE",match="\\d+")){
        if (variable::in_range(value=`stringBlockId`,min=(0.0),max=(%length(`We.oldBlockIds`)-(1)))){
            `blockId`=variable::get_list_value(list=`We.oldBlockIds`,number=`stringBlockId`)
            `blockId`=variable::get_list_value(list=`blockId`,number=(0.0))
        }
        else{
            `blockId`=variable::set_value(value=`stringBlockId`)
        }
    }
    else{
        if (variable::text_matches(values=[`stringBlockId`],match="\\d+:\\d+",regular_expressions="TRUE")){
            `#colonIndex`=variable::get_index_of_subtext(text=`stringBlockId`,subtext=":")
            `#blockId`=variable::trim_text(text=`stringBlockId`,start=(0.0),end=`#colonIndex`)
            if (variable::in_range(value=`#blockId`,min=(0.0),max=(%length(`We.oldBlockIds`)-(1)))){
                `#blockIds`=variable::get_list_value(list=`We.oldBlockIds`,number=`#blockId`)
                `#colonIndex`=variable::add(value=[`#colonIndex`,(1.0)])
                `#length`=variable::get_text_length(text=`stringBlockId`)
                `#blockDataValue`=variable::trim_text(text=`stringBlockId`,start=`#colonIndex`,end=`#length`)
                if (variable::in_range(value=`#blockDataValue`,min=(0.0),max=(%length_local(`#blockIds`)-(1)))){
                    `blockId`=variable::get_list_value(list=`#blockIds`,number=`#blockDataValue`)
                }
                else{
                    `blockId`=variable::set_value(value=`stringBlockId`)
                }
            }
            else{
                `blockId`=variable::set_value(value=`stringBlockId`)
            }
        }
        else{
            `blockId`=variable::set_value(value=`stringBlockId`)
        }
    }
    if (variable::exists(variable=`#blockData`)){
        `blockId`=variable::set_value(value="%var_local(blockId)%var_local(#blockData)")
        variable::purge(names=["#blockData"],scope="LOCAL")
    }
}
function `We.run`(){
    if (variable::exists(variable=`Materials`)){
        `Materials Count`=variable::get_list_length(list=`Materials`)
        if (variable::equals(compare=[(1.0)],value=`Materials Count`)){
            `Material`=variable::get_list_value(list=`Materials`,number=(0.0))
        }
    }
    code::call_function(function_name="We.run2")
    `Running`=variable::set_value(value=(1.0))
    code::start_process(local_variables_mode="SHARE",process_name="We.operationTick",target_mode="CURRENT_TARGET")
    code::controller_measure_time(duration="MICROSECONDS",variable=`time`){
        code::call_function(function_name=`Function`)
    }
    variable::purge(names=["Running"],scope="LOCAL")
    if (variable::exists(variable=`Player`)){
        if not (variable::exists(variable=`disableSound`)){
            player::play_sound(sound=sound(sound="minecraft:entity.experience_orb.pickup",volume=1.0,pitch=1.0),location=value::location<default>)
        }
        `region`=variable::set_value(value="&7(&f%var_local(blocks) м³&7)&#a6ff6e")
        `time`=variable::divide(value=[`time`,(1000000.0)],division_mode="DEFAULT")
        if not (variable::exists(variable=`blocks`)){
            `blocks`=variable::set_value(value=`We.%player%.volumeRegion`)
        }
        `speed`=variable::divide(value=[`blocks`,`time`],division_mode="ROUND_TO_INT")
        `speed`=variable::set_value(value="&7(&#abc4d6%var_local(speed)&7/сек.)")
        `time`=variable::round(number=`time`,precision=(2.0))
        `time`=variable::set_value(value="&7(&#a6ff6e%var_local(time) &7сек.)")
        variable::purge(names=["We.%player%.blocks","We.%player%.isOperation","We.%player%.isStop"])
        if (variable::exists(variable=`Blocks List`)){
            if (variable::not_equals(compare=["We.undo"],value=`Function`)){
                if (variable::exists(variable=`Undo`)){
                    variable::purge(names=["wu%player%"],match="NAME_CONTAINS")
                    `We.%player%.numberUndo`=variable::add(value=[`We.%player%.numberUndo`,(1.0)])
                    repeat::for_each_in_list(list=`Blocks List`){`l7EVPq31sXjISllSuqXf`,`b` ->
                        `Undo Map`=variable::set_map_value(map=`Undo Map`,key=`b`,value=`%var_local(b) Massive List`)
                    }
                    `We.%player%.undo.%var(We.%player%.numberUndo)`=variable::set_value(value=`Undo Map`)
                }
            }
        }
    }
}
function `We.run2`(){
    if (variable::exists(variable=`Player`)){
        variable::purge(names=["wu%player%"],match="NAME_CONTAINS",scope="GAME")
        variable::purge(names=["We.%player%.isStop","We.%player%.blocks"])
        `We.%player%.isOperation`=variable::set_value(value=(1.0))
        if not (variable::exists(variable=`volume`)){
            if not (variable::exists(variable=`Pos 1`)){
                if not (variable::exists(variable=`Pos 2`)){
                    if (variable::exists(variable=`We.%player%.firstPos`)){
                        if (variable::exists(variable=`We.%player%.secondPos`)){
                            `Pos 1`=variable::set_value(value=`We.%player%.firstPos`)
                            `Pos 2`=variable::set_value(value=`We.%player%.secondPos`)
                            code::call_function(function_name="We.sortPositions")
                        }
                    }
                }
            }
            if not (variable::exists(variable=`Volume Region`)){
                if (variable::exists(variable=`Pos 1`)){
                    if (variable::exists(variable=`Pos 2`)){
                        code::call_function(function_name="We.sortPositions")
                    }
                }
            }
        }
        if (variable::exists(variable=`Volume Region`)){
            `volume`=variable::set_value(value=`Volume Region`)
        }
        if not (variable::exists(variable=`We.%player%.fastMode`)){
            `Undo`=variable::set_value(value=(1.0))
            `forRegion`=variable::set_value(value=(1.0))
            `Undo Map`=variable::create_map()
            `Blocks List`=variable::create_list(values=[])
        }
    }
    if (variable::greater_or_equals(value=`Materials Count`,compare=(2.0))){
        `forRegion`=variable::set_value(value=(1.0))
    }
    code::call_function(function_name="We.run3")
}
function `We.run3`(){
    if (variable::exists(variable=`Materials`)){
        if not (variable::exists(variable=`Materials.proportions`)){
            `Materials.proportions`=variable::create_map()
        }
        `percents`=variable::get_map_values(map=`Materials.proportions`)
        `percents`=variable::add(value=[`percents`])
        if (variable::not_equals(compare=[(100.0)],value=`percents`)){
            `percents-100`=variable::subtract(value=[(100.0),`percents`])
            `Materials.proportions.size`=variable::get_map_size(map=`Materials.proportions`)
            `min`=variable::subtract(value=[`Materials Count`,`Materials.proportions.size`])
            `delitel`=variable::clamp(number=`Materials.proportions.size`,min=`min`,max=(100000.0))
            `percent`=variable::divide(value=[`percents-100`,`delitel`])
            repeat::for_each_in_list(list=`Materials`){`vVsgq1JSRVYZB4kuIeGq`,`Material` ->
                if not (variable::map_has_key(map=`Materials.proportions`,key=`Material`)){
                    `Materials.proportions`=variable::set_map_value(map=`Materials.proportions`,key=`Material`,value=`percent`)
                }
            }
        }
    }
}
function `We.partSet`(){
    code::call_function(function_name="We.sortPositions")
    `y dist +1`=variable::add(value=[`y dist`,(1.0)])
    `Part`=variable::set_value(value=(20000.0))
    if (variable::greater(value=`Volume Region`,compare=`Part`)){
        `Part Size`=variable::divide(value=[`Part`,`y dist +1`])
        `Part Size`=variable::root(base=`Part Size`,root=(2.0))
        `Part Size`=variable::round(number=`Part Size`)
        repeat::on_range(start=`z min`,end=`z max`,interval=`Part Size`){`Part Set z` ->
            repeat::on_range(start=`x min`,end=`x max`,interval=`Part Size`){`Part Set x` ->
                `Part Set Pos 1`=variable::set_all_coordinates(x=`Part Set x`,y=`y min`,z=`Part Set z`)
                `Part Set x2`=variable::add(value=[`Part Set x`,`Part Size`,(-1.0)])
                `Part Set x2`=variable::clamp(number=`Part Set x2`,min=`x min`,max=`x max`)
                `Part Set z2`=variable::add(value=[`Part Set z`,`Part Size`,(-1.0)])
                `Part Set z2`=variable::clamp(number=`Part Set z2`,min=`z min`,max=`z max`)
                `Part Set Pos 2`=variable::set_all_coordinates(x=`Part Set x2`,y=`y max`,z=`Part Set z2`)
                code::call_function(function_name="We.partSetAction")
            }
        }
    }
    else{
        `Part Set Pos 1`=variable::set_value(value=`Pos min`)
        `Part Set Pos 2`=variable::set_value(value=`Pos max`)
        code::call_function(function_name="We.partSetAction")
    }
}
function `We.partSetAction`(){
    `Wait`=variable::divide(division_mode="ROUND_TO_INT",value=[value::server_stopped_time,(4.0)])
    code::wait(duration=`Wait`)
    if (variable::equals(value=`Part Set Action`,compare=["set"])){
        world::set_region(block=`Material`,pos_1=`Part Set Pos 1`,pos_2=`Part Set Pos 2`)
    }
    else{
        if (variable::equals(value=`Part Set Action`,compare=["clone"])){
            if not (variable::exists(variable=`Ignore air`)){
                world::clone_region(ignore_air="FALSE",pos_1=`Part Set Pos 1`,pos_2=`Part Set Pos 2`,target_pos=`Copy Location`,paste_pos=`Paste Location`)
            }
            else{
                world::clone_region(ignore_air="TRUE",pos_1=`Part Set Pos 1`,pos_2=`Part Set Pos 2`,target_pos=`Copy Location`,paste_pos=`Paste Location`)
            }
        }
        else{
            if (variable::equals(value=`Part Set Action`,compare=["replace"])){
                world::replace_blocks_in_region(old_block=[`Replace`],pos_1=`Part Set Pos 1`,pos_2=`Part Set Pos 2`,new_block=`Material`)
            }
        }
    }
    if (variable::exists(variable=`Player`)){
        variable::get_all_coordinates(location=`Part Set Pos 1`,x=`x1`,y=`y1`,z=`z1`)
        variable::get_all_coordinates(location=`Part Set Pos 2`,x=`x2`,y=`y2`,z=`z2`)
        `x`=variable::subtract(value=[`x1`,`x2`])
        `y`=variable::subtract(value=[`y1`,`y2`])
        `z`=variable::subtract(value=[`z1`,`z2`])
        `x`=variable::absolute(number=`x`)
        `y`=variable::absolute(number=`y`)
        `z`=variable::absolute(number=`z`)
        `Volume Region`=variable::multiply(value=[(`x`+1),(`y`+1),(`z`+1)])
        `blocks`=variable::add(value=[`blocks`,`Volume Region`])
    }
    code::call_function(function_name="We.wait")
}
function `We.wandCommand`(){
    `args`=variable::create_list(values=["name: \"set\", optional: true, equals: \"set\"","type: Option, permission: build_or_dev, exception: \"%var(Префикс WE)Использование: &7$scmd [set]\""])
    code::call_function(function_name="Mapi.commandConstructor")
    if (variable::exists(variable=`set`)){
        if (variable::item_equals(value=value::main_hand_item<default>,compare=["\{\}","\{\}","\{\}","\{\}","\{\}","\{\}","\{\}","\{\}","\{\}","\{\}","\{\}","\{\}","\{\}","\{\}","\{\}","\{\}","\{\}","\{\}","\{\}","\{\}","\{\}"])){
            player::message(messages=["%var(Префикс WE)&#ff6e6eДержите предмет в основной руке"])
            player::play_sound(sound=sound(sound="minecraft:block.lava.extinguish",volume=0.5,pitch=2.0),location=value::location<default>)
            break
        }
        if (variable::item_has_tag(item=value::main_hand_item<default>,tag="worldedit",value="wand")){
            `Item`=variable::remove_item_custom_tag(item=value::main_hand_item<default>,tag_name="worldedit")
            player::message(messages=["%var(Префикс WE)Режим &7\"&#ffb657Wand&7\" &fна предмете &#ff6e6eвыключен"])
        }
        else{
            `Item`=variable::set_item_custom_tag(item=value::main_hand_item<default>,tag_name="worldedit",tag_value="wand")
            player::message(messages=["%var(Префикс WE)Режим &7\"&#ffb657Wand&7\" &fна предмете &#a6ff6eвключён"])
        }
        player::set_equipment(item=`Item`)
        player::play_sound(sound=sound(sound="minecraft:ui.button.click",volume=1.0,pitch=1.0),location=value::location<default>)
    }
    else{
        `Item`=variable::set_item_custom_tag(item="\{\C\o\u\n\t\:\1\b\,\i\d\:\"\m\i\n\e\c\r\a\f\t\:\g\o\l\d\e\n\_\a\x\e\"\,\t\a\g\:\{\A\t\t\r\i\b\u\t\e\M\o\d\i\f\i\e\r\s\:\[\{\A\m\o\u\n\t\:\9\9\.\0\d\,\A\t\t\r\i\b\u\t\e\N\a\m\e\:\"\m\i\n\e\c\r\a\f\t\:\g\e\n\e\r\i\c\.\a\t\t\a\c\k\_\s\p\e\e\d\"\,\N\a\m\e\:\"\"\,\O\p\e\r\a\t\i\o\n\:\0\,\S\l\o\t\:\"\m\a\i\n\h\a\n\d\"\,\U\U\I\D\:\[\I\;\-\8\4\0\3\5\7\6\1\0\,\1\5\2\2\6\1\8\2\3\1\,\-\1\8\3\5\4\6\0\3\9\9\,\1\7\3\3\5\8\9\9\7\3\]\}\]\,\D\a\m\a\g\e\:\0\,\E\n\c\h\a\n\t\m\e\n\t\s\:\[\{\i\d\:\"\m\i\n\e\c\r\a\f\t\:\e\f\f\i\c\i\e\n\c\y\"\,\l\v\l\:\0\s\}\]\,\H\i\d\e\F\l\a\g\s\:\7\,\U\n\b\r\e\a\k\a\b\l\e\:\1\b\,\d\i\s\p\l\a\y\:\{\L\o\r\e\:\[\'\{\"\i\t\a\l\i\c\"\:\f\a\l\s\e\,\"\c\o\l\o\r\"\:\"\w\h\i\t\e\"\,\"\e\x\t\r\a\"\:\[\{\"\t\e\x\t\"\:\"\"\}\,\{\"\c\o\l\o\r\"\:\"\g\r\a\y\"\,\"\t\e\x\t\"\:\"\В\ы\д\е\л\я\е\т\ \р\е\г\и\о\н\ \м\е\ж\д\у\ \д\в\у\м\я\ \п\о\з\и\ц\и\я\м\и\"\}\]\,\"\t\e\x\t\"\:\"\"\}\'\,\'\{\"\e\x\t\r\a\"\:\[\{\"\t\e\x\t\"\:\"\"\}\]\,\"\t\e\x\t\"\:\"\"\}\'\,\'\{\"\i\t\a\l\i\c\"\:\f\a\l\s\e\,\"\c\o\l\o\r\"\:\"\w\h\i\t\e\"\,\"\e\x\t\r\a\"\:\[\{\"\t\e\x\t\"\:\"\"\}\,\{\"\c\o\l\o\r\"\:\"\g\r\a\y\"\,\"\t\e\x\t\"\:\"\Е\с\л\и\ \в\ы\ \н\е\ \н\а\ц\е\л\е\н\ы\ \н\а\ \б\л\о\к\,\ \т\о\ \п\о\з\и\ц\и\я\"\}\]\,\"\t\e\x\t\"\:\"\"\}\'\,\'\{\"\i\t\a\l\i\c\"\:\f\a\l\s\e\,\"\c\o\l\o\r\"\:\"\w\h\i\t\e\"\,\"\e\x\t\r\a\"\:\[\{\"\t\e\x\t\"\:\"\"\}\,\{\"\c\o\l\o\r\"\:\"\g\r\a\y\"\,\"\t\e\x\t\"\:\"\у\с\т\а\н\о\в\и\т\с\я\ \н\а\ \в\а\ш\е\ \м\е\с\т\о\п\о\л\о\ж\е\н\и\е\.\"\}\]\,\"\t\e\x\t\"\:\"\"\}\'\,\'\{\"\e\x\t\r\a\"\:\[\{\"\t\e\x\t\"\:\"\"\}\]\,\"\t\e\x\t\"\:\"\"\}\'\,\'\{\"\i\t\a\l\i\c\"\:\f\a\l\s\e\,\"\c\o\l\o\r\"\:\"\w\h\i\t\e\"\,\"\e\x\t\r\a\"\:\[\{\"\t\e\x\t\"\:\"\"\}\,\{\"\t\e\x\t\"\:\"\Л\е\в\ы\й\ \к\л\и\к\ \"\}\,\{\"\c\o\l\o\r\"\:\"\d\a\r\k\_\g\r\a\y\"\,\"\t\e\x\t\"\:\"\-\"\}\,\{\"\t\e\x\t\"\:\"\ \"\}\,\{\"\c\o\l\o\r\"\:\"\g\r\a\y\"\,\"\t\e\x\t\"\:\"\У\с\т\а\н\о\в\и\т\ь\ \п\е\р\в\у\ю\ \п\о\з\и\ц\и\ю\"\}\]\,\"\t\e\x\t\"\:\"\"\}\'\,\'\{\"\i\t\a\l\i\c\"\:\f\a\l\s\e\,\"\c\o\l\o\r\"\:\"\w\h\i\t\e\"\,\"\e\x\t\r\a\"\:\[\{\"\t\e\x\t\"\:\"\"\}\,\{\"\t\e\x\t\"\:\"\П\р\а\в\ы\й\ \к\л\и\к\ \"\}\,\{\"\c\o\l\o\r\"\:\"\d\a\r\k\_\g\r\a\y\"\,\"\t\e\x\t\"\:\"\-\"\}\,\{\"\t\e\x\t\"\:\"\ \"\}\,\{\"\c\o\l\o\r\"\:\"\g\r\a\y\"\,\"\t\e\x\t\"\:\"\У\с\т\а\н\о\в\и\т\ь\ \в\т\о\р\у\ю\ \п\о\з\и\ц\и\ю\"\}\]\,\"\t\e\x\t\"\:\"\"\}\'\]\,\N\a\m\e\:\'\{\"\i\t\a\l\i\c\"\:\f\a\l\s\e\,\"\e\x\t\r\a\"\:\[\{\"\t\e\x\t\"\:\"\"\}\,\{\"\c\o\l\o\r\"\:\"\#\f\f\9\9\7\c\"\,\"\t\e\x\t\"\:\"\W\o\r\l\d\E\d\i\t\ \"\}\,\{\"\c\o\l\o\r\"\:\"\d\a\r\k\_\g\r\a\y\"\,\"\t\e\x\t\"\:\"\»\"\}\,\{\"\t\e\x\t\"\:\"\ \"\}\,\{\"\c\o\l\o\r\"\:\"\w\h\i\t\e\"\,\"\t\e\x\t\"\:\"\В\ы\б\р\а\т\ь\ \р\е\г\и\о\н\"\}\]\,\"\t\e\x\t\"\:\"\"\}\'\}\}\}",tag_name="worldedit",tag_value="wand")
        if (variable::item_equals(value=value::main_hand_item<default>,compare=["\{\}","\{\}","\{\}","\{\}","\{\}","\{\}","\{\}","\{\}","\{\}","\{\}","\{\}","\{\}","\{\}","\{\}","\{\}","\{\}","\{\}","\{\}","\{\}","\{\}","\{\}"])){
            player::set_equipment(item=`Item`)
        }
        else{
            if (player::has_room_for_item(checked_slots="MAIN_INVENTORY",items=[`Item`,"\{\}","\{\}","\{\}","\{\}","\{\}","\{\}","\{\}","\{\}","\{\}","\{\}","\{\}","\{\}","\{\}","\{\}","\{\}","\{\}","\{\}"])){
                player::give_items(items=[`Item`,"\{\}","\{\}","\{\}","\{\}","\{\}","\{\}","\{\}","\{\}","\{\}","\{\}","\{\}","\{\}","\{\}","\{\}","\{\}","\{\}"])
            }
            else{
                player::message(messages=["%var(Префикс WE)&#ff6e6eУ вас нет места в инвентаре"])
                player::play_sound(sound=sound(sound="minecraft:block.lava.extinguish",volume=0.5,pitch=2.0),location=value::location<default>)
                break
            }
        }
        player::message(messages=["%var(Префикс WE)&#ffb657Wand&7-предмет &#a6ff6eуспешно выдан"])
        player::play_sound(sound=sound(sound="minecraft:entity.player.levelup",volume=1.0,pitch=1.5),location=value::location<default>)
    }
}
event<player_interact>{
    if not (player::has_privilege()){
        if not (player::has_privilege(privilege="DEVELOPER")){
            break
        }
    }
    if (variable::equals(value=value::event_interaction,compare=["right_click_block","left_click_block","right_click_air","left_click_air"])){
        if (variable::item_has_tag(item=value::event_item,tag="worldedit",value="wand")){
            world::cancel_event()
            `1`=variable::create_list(values=["right_click_block","left_click_block","right_click_air","left_click_air"])
            `2`=variable::create_list(values=["We.%player%.secondPos","We.%player%.firstPos","We.%player%.secondPos","We.%player%.firstPos"])
            `3`=variable::create_map(keys=`1`,values=`2`)
            `Pos`=variable::get_map_value(map=`3`,key=value::event_interaction)
            if (variable::equals(value=value::event_interaction,compare=["right_click_block","left_click_block"])){
                `%var_local(Pos)`=variable::set_value(value=value::event_block_location)
            }
            else{
                variable::align_location(rotation_mode="REMOVE",coordinates_mode="ALL",variable=`%var_local(Pos)`,location=value::location<default>)
            }
            `y`=variable::get_coordinate(location=`%var_local(Pos)`,type="Y")
            `y`=variable::clamp(number=`y`,min=(-64.5),max=(319.5))
            `%var_local(Pos)`=variable::set_coordinate(type="Y",location=`%var_local(Pos)`,coordinate=`y`)
            if (variable::exists(variable=`We.%player%.firstPos`)){
                if (variable::exists(variable=`We.%player%.secondPos`)){
                    `Positions`=variable::create_list(values=[`We.%player%.firstPos`,`We.%player%.secondPos`])
                    code::call_function(function_name="We.sortPositions")
                }
            }
            variable::align_location(rotation_mode="REMOVE",align_mode="CORNER",variable=`XYZ Set`,location=`%var_local(Pos)`)
            variable::get_all_coordinates(location=`XYZ Set`,x=`X set`,y=`Y set`,z=`Z set`)
            `2`=variable::create_list(values=["&#a6ff6eВторая позиция установлена","&#a6ff6eПервая позиция установлена","&#a6ff6eВторая позиция установлена","&#a6ff6eПервая позиция установлена"])
            `3`=variable::create_map(keys=`1`,values=`2`)
            `Message`=variable::get_map_value(map=`3`,key=value::event_interaction)
            if not (variable::exists(variable=`Volume Region`)){
                `Volume Region`=variable::set_value(value=(1))
            }
            player::action_bar(messages=[`Префикс WE`,`Message`,"&7 (&#abc4d6%var_local(X set)&7, &#abc4d6%var_local(Y set)&7, &#abc4d6%var_local(Z set)&7)%space%","&7(&f%var_local(Volume Region) м³&7)"],merging="CONCATENATION")
        }
    }
}
event<player_click_inventory>{
    if (variable::text_starts_with(ignore_case="TRUE",value=value::open_inventory_title<default>,compare=["WE","WorldEdit"])){
        if (variable::text_ends_with(value=value::open_inventory_title<default>,compare=["» Команды","» Помощь"],ignore_case="TRUE")){
            world::cancel_event()
        }
    }
}
event<player_join>{
    if not (player::has_privilege()){
        if not (player::has_privilege(privilege="DEVELOPER")){
            break
        }
    }
    code::wait(duration=(1.0))
    if not (variable::exists(variable=`We.%player%.distanceParticles`)){
        `We.%player%.distanceParticles`=variable::set_value(value=(0.5))
        `We.%player%.fastMode`=variable::set_value(value=(1.0))
    }
    if (variable::exists(variable=`pcmd`)){
        code::start_process(process_name="We.playerCycle")
    }
}
process `We.playerCycle`(){
    repeat::while(world::has_player()){
        code::wait(duration=(4.0))
        if (variable::greater_or_equals(value=`We.%player%.distanceParticles`,compare=(0.01))){
            if (variable::item_has_tag(item=value::main_hand_item<default>,tag="worldedit",value="schem")){
                if (player::gamemode_equals(gamemode="CREATIVE")){
                    if (player::is_looking_at_block(blocks=[],locations=[value::target_block_location<default>],distance=(5.0))){
                        if (variable::not_equals(compare=["%empty%"],value=value::target_block_face<default>)){
                            variable::get_vector_from_block_face(variable=`vector`,block_face=value::target_block_face<default>)
                            `Pos 1`=variable::shift_location_on_vector(location=value::target_block_location<default>,vector=`vector`)
                            `schemData`=variable::get_template_code(return_type="MAP",template=value::main_hand_item<default>)
                            `vector`=variable::get_map_value(map=`schemData`,key="gabarit")
                            `Pos 2`=variable::shift_location_on_vector(location=`Pos 1`,vector=`vector`)
                            code::call_function(function_name="We.sortPositions")
                            `Particle`=variable::set_value(value=particle(particle="SOUL_FIRE_FLAME",count=1,spread_x=0.0,spread_y=0.0,motion_x=0.0,motion_y=0.0,motion_z=0.0))
                            code::call_function(function_name="We.showParticles")
                        }
                    }
                }
            }
            if (variable::item_has_tag(item=value::main_hand_item<default>,tag="worldedit",value="wand")){
                `Particle`=variable::set_value(value=particle(particle="FLAME",count=1,spread_x=0.0,spread_y=0.0,motion_x=0.0,motion_y=0.0,motion_z=0.0))
                if (variable::is_type(variable_type="LOCATION",value=`We.%player%.firstPos`)){
                    if (variable::is_type(value=`We.%player%.secondPos`,variable_type="LOCATION")){
                        `Positions`=variable::create_list(values=[`We.%player%.firstPos`,`We.%player%.secondPos`])
                        code::call_function(function_name="We.sortPositions")
                        code::call_function(function_name="We.showParticles")
                    }
                    else{
                        `Positions`=variable::create_list(values=[`We.%player%.firstPos`,`We.%player%.firstPos`])
                        code::call_function(function_name="We.sortPositions")
                        code::call_function(function_name="We.showParticles")
                    }
                }
                else{
                    if (variable::is_type(value=`We.%player%.secondPos`,variable_type="LOCATION")){
                        `Positions`=variable::create_list(values=[`We.%player%.secondPos`,`We.%player%.secondPos`])
                        code::call_function(function_name="We.sortPositions")
                        code::call_function(function_name="We.showParticles")
                    }
                }
            }
        }
    }
}
process `We.operationTick`(){
    repeat::while(variable::exists()){
        code::wait(duration=(1.0))
        if (variable::exists(variable=`Player`)){
            if (variable::exists(variable=`We.%player%.isStop`)){
                `isStop`=variable::set_value(value=(1.0))
                variable::purge(names=["We.%player%.isStop","We.%player%.blocks","We.%player%.isOperation"])
                player::remove_boss_bar(id="We.bossbar")
                player::message(messages=["%var(Префикс WE)&#a6ff6eТекущая операция успешно остановлена"])
                player::play_sound(sound=sound(sound="minecraft:entity.player.levelup",volume=1.0,pitch=1.5),location=value::location<default>)
                break
            }
            if (variable::greater(value=`volume`,compare=(0.0))){
                `progress`=variable::divide(value=[`blocks`,`volume`,(0.01)],division_mode="ROUND_TO_INT")
                player::set_boss_bar(id="We.bossbar",title="%var(Префикс WE)Progress: &#a6ff6e%var_local(progress)% &7(&#abc4d6%var_local(blocks)&7/&#abc4d6%var_local(volume))",progress=`progress`,color="GREEN",style="NOTCHED_20")
            }
            `We.%player%.blocks`=variable::set_value(value=`blocks`)
        }
        `Iterations`=variable::set_value(value=(0.0))
    }
    if (variable::exists(variable=`Player`)){
        player::remove_boss_bar(id="We.bossbar")
    }
}
function `We.wait`(){
    `Iterations`=variable::add(value=[`Iterations`,(1.0)])
    if (variable::exists(variable=`isStop`)){
        break
    }
    if (variable::greater_or_equals(value=value::cpu_usage,compare=(80.0))){
        code::wait(duration=(2.0))
    }
    else{
        if (variable::greater_or_equals(value=`Iterations`,compare=(5000.0))){
            code::wait(duration=(1.0))
        }
    }
}
function `We.check`(){
    if (variable::exists(variable=`check.clipboard`)){
        if not (variable::exists(variable=`We.%player%.clipboard`)){
            player::message(messages=["%var(Префикс WE)&#ff6e6eБуфер обмена пуст"])
            player::play_sound(sound=sound(sound="minecraft:block.lava.extinguish",volume=0.5,pitch=2.0),location=value::location<default>)
            break
        }
    }
    if (variable::exists(variable=`Check Region`)){
        if not (variable::is_type(variable_type="LOCATION",value=`We.%player%.firstPos`)){
            player::message(messages=["%var(Префикс WE)&#ff6e6eРегион не выделен"])
            player::play_sound(sound=sound(sound="minecraft:block.lava.extinguish",volume=0.5,pitch=2.0),location=value::location<default>)
            break
        }
        if not (variable::is_type(variable_type="LOCATION",value=`We.%player%.secondPos`)){
            player::message(messages=["%var(Префикс WE)&#ff6e6eРегион не выделен"])
            player::play_sound(sound=sound(sound="minecraft:block.lava.extinguish",volume=0.5,pitch=2.0),location=value::location<default>)
            break
        }
        code::return_function()
    }
    if (variable::exists(variable=`Already Setting`)){
        if (variable::exists(variable=`We.%player%.isOperation`)){
            player::message(messages=["%var(Префикс WE)&#ff6e6eСейчас уже выполняется операция"])
            player::play_sound(sound=sound(sound="minecraft:block.lava.extinguish",volume=0.5,pitch=2.0),location=value::location<default>)
            break
        }
        code::return_function()
    }
    if (variable::exists(variable=`We.%player%.isOperation`)){
        player::message(messages=["%var(Префикс WE)&#ff6e6eСейчас уже выполняется операция"])
        player::play_sound(sound=sound(sound="minecraft:block.lava.extinguish",volume=0.5,pitch=2.0),location=value::location<default>)
        break
    }
    if not (variable::is_type(variable_type="LOCATION",value=`We.%player%.firstPos`)){
        player::message(messages=["%var(Префикс WE)&#ff6e6eРегион не выделен"])
        player::play_sound(sound=sound(sound="minecraft:block.lava.extinguish",volume=0.5,pitch=2.0),location=value::location<default>)
        break
    }
    if not (variable::is_type(variable_type="LOCATION",value=`We.%player%.secondPos`)){
        player::message(messages=["%var(Префикс WE)&#ff6e6eРегион не выделен"])
        player::play_sound(sound=sound(sound="minecraft:block.lava.extinguish",volume=0.5,pitch=2.0),location=value::location<default>)
        break
    }
}
function `We.showParticles`(){
    `x min`=variable::round(round_type="FLOOR",number=`x min`)
    `y min`=variable::round(round_type="FLOOR",number=`y min`)
    `z min`=variable::round(round_type="FLOOR",number=`z min`)
    `x max`=variable::round(round_type="CEIL",number=`x max`)
    `y max`=variable::round(round_type="CEIL",number=`y max`)
    `z max`=variable::round(round_type="CEIL",number=`z max`)
    `Pos Particle 1`=variable::set_all_coordinates(x=`x min`,y=`y min`,z=`z min`)
    `Pos Particle 2`=variable::set_coordinate(location=`Pos Particle 1`,coordinate=`x max`)
    `Pos Particle 3`=variable::set_coordinate(type="Z",location=`Pos Particle 2`,coordinate=`z max`)
    `Pos Particle 4`=variable::set_coordinate(location=`Pos Particle 3`,coordinate=`x min`)
    `Pos Particle 5`=variable::set_coordinate(type="Y",location=`Pos Particle 1`,coordinate=`y max`)
    `Pos Particle 6`=variable::set_coordinate(type="Y",location=`Pos Particle 2`,coordinate=`y max`)
    `Pos Particle 7`=variable::set_coordinate(type="Y",location=`Pos Particle 3`,coordinate=`y max`)
    `Pos Particle 8`=variable::set_coordinate(type="Y",location=`Pos Particle 4`,coordinate=`y max`)
    `distance_particles`=variable::set_value(value=`We.%player%.distanceParticles`)
    player::display_particle_line(unit_of_measurement="DISTANCE",particle=`Particle`,start=`Pos Particle 1`,end=`Pos Particle 2`,divider=`distance_particles`)
    player::display_particle_line(unit_of_measurement="DISTANCE",particle=`Particle`,start=`Pos Particle 2`,end=`Pos Particle 3`,divider=`distance_particles`)
    player::display_particle_line(particle=`Particle`,start=`Pos Particle 3`,end=`Pos Particle 4`,divider=`distance_particles`,unit_of_measurement="DISTANCE")
    player::display_particle_line(unit_of_measurement="DISTANCE",particle=`Particle`,start=`Pos Particle 4`,end=`Pos Particle 1`,divider=`distance_particles`)
    player::display_particle_line(unit_of_measurement="DISTANCE",particle=`Particle`,start=`Pos Particle 1`,end=`Pos Particle 5`,divider=`distance_particles`)
    player::display_particle_line(unit_of_measurement="DISTANCE",particle=`Particle`,start=`Pos Particle 2`,end=`Pos Particle 6`,divider=`distance_particles`)
    player::display_particle_line(unit_of_measurement="DISTANCE",particle=`Particle`,start=`Pos Particle 3`,end=`Pos Particle 7`,divider=`distance_particles`)
    player::display_particle_line(unit_of_measurement="DISTANCE",particle=`Particle`,start=`Pos Particle 4`,end=`Pos Particle 8`,divider=`distance_particles`)
    player::display_particle_line(unit_of_measurement="DISTANCE",particle=`Particle`,start=`Pos Particle 5`,end=`Pos Particle 6`,divider=`distance_particles`)
    player::display_particle_line(unit_of_measurement="DISTANCE",particle=`Particle`,start=`Pos Particle 6`,end=`Pos Particle 7`,divider=`distance_particles`)
    player::display_particle_line(unit_of_measurement="DISTANCE",particle=`Particle`,start=`Pos Particle 7`,end=`Pos Particle 8`,divider=`distance_particles`)
    player::display_particle_line(unit_of_measurement="DISTANCE",particle=`Particle`,start=`Pos Particle 8`,end=`Pos Particle 5`,divider=`distance_particles`)
}
function `We.LocationType`(){
    if (variable::exists(variable=`#defineBorder`)){
        `#defineBorderSize`=variable::get_list_length(list=`#defineBorder`)
        `#border`=variable::clamp(number=(3.0),min=(0.0),max=`#defineBorderSize`)
        `#border`=variable::trim_list(list=`#defineBorder`,start=(0.0),end=`#border`)
    }
    else{
        `#coordinates`=variable::split_text(text=`#arg`)
        `#coordinatesSize`=variable::get_list_length(list=`#coordinates`)
        `#x`=variable::get_list_value(list=`#coordinates`,number=(0.0))
        if (variable::greater_or_equals(value=`#coordinatesSize`,compare=(2.0))){
            `#y`=variable::get_list_value(list=`#coordinates`,number=(1.0))
            if (variable::greater_or_equals(value=`#coordinatesSize`,compare=(3.0))){
                `#z`=variable::get_list_value(list=`#coordinates`,number=(2.0))
            }
            else{
                `#exceptionArgument`=variable::set_value(value="%var(Префикс WE)&#ff6e6eZ не установлен")
                code::return_function()
            }
        }
        else{
            `#exceptionArgument`=variable::set_value(value="%var(Префикс WE)&#ff6e6eY и Z не установлены")
            code::return_function()
        }
        `xyz`=variable::create_list(values=["#x","#y","#z"])
        `values`=variable::create_list(values=[value::x_coordinate<default>,value::y_coordinate<default>,value::z_coordinate<default>])
        `xyz`=variable::create_map(keys=`xyz`,values=`values`)
        repeat::for_each_map_entry(map=`xyz`){`coordinate`,`value` ->
            if (variable::text_starts_with(compare=["~"],value=`%var_local(coordinate)`)){
                `%var_local(coordinate)`=variable::replace_text(text=`%var_local(coordinate)`,replace="~",first="FIRST")
                if (variable::list_is_empty(list=`%var_local(coordinate)`)){
                    `%var_local(coordinate)`=variable::set_value(value=(0.0))
                }
                `%var_local(coordinate)`=variable::add(value=[`value`,`%var_local(coordinate)`])
            }
        }
        `#arg`=variable::set_all_coordinates(x=`#x`,y=`#y`,z=`#z`)
    }
}
process `We.prepare`(){
    code::wait(duration=(2.0))
    repeat::for_each_map_entry(map=`We.flags`){`flag`,`type` ->
        if (variable::is_type(variable_type="MAP",value=`type`)){
            `flagType`=variable::get_map_value(map=`type`,key="flagType")
            `type`=variable::remove_map_entry(values=[],map=`type`,key="flagType")
            `type`=variable::to_json(value=`type`)
            `type`=variable::set_text(text=[`flagType`,`type`],merging="CONCATENATION")
            `We.flags`=variable::set_map_value(map=`We.flags`,key=`flag`,value=`type`)
        }
        if (variable::text_starts_with(compare=["Marker"],value=`type`)){
            `marker`=variable::replace_text(text=`type`,replace="Marker",first="FIRST")
            `marker`=variable::parse_json(json=`marker`)
            `keys`=variable::get_map_keys(map=`marker`)
            `keys`=variable::insert_list_value(list=`keys`,number=(0.0),value="none")
            `values`=variable::get_map_values(map=`marker`)
            `values`=variable::insert_list_value(list=`values`,number=(0.0),value="Не установлено")
            `marker`=variable::create_map(keys=`keys`,values=`values`)
            `marker`=variable::to_json(value=`marker`)
            `We.flags`=variable::set_map_value(map=`We.flags`,key=`flag`,value="Marker%var_local(marker)")
        }
    }
}
function `We.posCommand`(){
    `args`=variable::create_list(values=["type: Location, name: \"Location\", optional: true","type: Option, permission: build_or_dev, exception: \"%var(Префикс WE)Использование: &7$scmd &b[<координаты>]\""])
    code::call_function(function_name="Mapi.commandConstructor")
    if not (variable::exists(variable=`Location`)){
        `Location`=variable::set_value(value=value::location<default>)
    }
    variable::get_all_coordinates(location=`Location`,x=`x`,y=`y`,z=`z`)
    `cmds`=variable::create_list(values=["pos1","pos2"])
    `vars`=variable::create_list(values=["first","second"])
    `var`=variable::create_map(keys=`cmds`,values=`vars`)
    `var`=variable::get_map_value(map=`var`,key=`command`)
    `msgs`=variable::create_list(values=["&#a6ff6eПервая позиция установлена","&#a6ff6eВторая позиция установлена"])
    `msgs`=variable::create_map(keys=`cmds`,values=`msgs`)
    `msg`=variable::get_map_value(map=`msgs`,key=`command`)
    `y`=variable::get_coordinate(type="Y",location=`Location`)
    `y`=variable::clamp(number=`y`,min=(-64.5),max=(319.5))
    `Location`=variable::set_coordinate(type="Y",location=`Location`,coordinate=`y`)
    variable::align_location(align_mode="BLOCK_CENTER",rotation_mode="REMOVE",variable=`Location`,location=`Location`)
    `We.%player%.%var_local(var)Pos`=variable::set_value(value=`Location`)
    if (variable::exists(variable=`We.%player%.firstPos`)){
        if (variable::exists(variable=`We.%player%.secondPos`)){
            `Positions`=variable::create_list(values=[`We.%player%.firstPos`,`We.%player%.secondPos`])
            code::call_function(function_name="We.sortPositions")
        }
    }
    if not (variable::exists(variable=`Volume Region`)){
        `Volume Region`=variable::set_value(value=(1.0))
    }
    variable::get_all_coordinates(location=`Location`,x=`x`,y=`y`,z=`z`)
    player::message(messages=["%var(Префикс WE)%var_local(msg)","&7(&#abc4d6%math(floor(%var_local(x)))&7,&#abc4d6 %math(floor(%var_local(y)))&7,&#abc4d6 %math(floor(%var_local(z)))&7)","&7(&f%var_local(Volume Region) м³&7)"])
    player::play_sound(sound=sound(sound="minecraft:entity.experience_orb.pickup",volume=1.0,pitch=1.0),location=value::location<default>)
}
function `We.floorCeilCommand`(){
    code::call_function(function_name="We.check")
    `args`=variable::create_list(values=["type: Materials, name: Materials","type: Int, name: shift, optional: true","type: Int, name: thickness, optional: true","type: Option, permission: build_or_dev, exception: \"%var(Префикс WE)Использование: &7$scmd &b<материал> &e[<сдвиг по высоте>] &a[<толщина>]\""])
    code::call_function(function_name="Mapi.commandConstructor")
    `Positions`=variable::create_list(values=[`We.%player%.firstPos`,`We.%player%.secondPos`])
    code::call_function(function_name="We.sortPositions")
    if (variable::equals(compare=["floor"],value=`command`)){
        `y`=variable::set_value(value=`y min`)
    }
    else{
        `y`=variable::set_value(value=`y max`)
    }
    `y`=variable::add(value=[`y`,`shift`])
    if (variable::greater_or_equals(value=`thickness`,compare=(1.0))){
        `thickness`=variable::subtract(value=[`thickness`,(1.0)])
    }
    if (variable::less_or_equals(value=`thickness`,compare=(-1.0))){
        `thickness`=variable::add(value=[`thickness`,(1.0)])
    }
    `y2`=variable::add(value=[`y`,`thickness`])
    `Pos 1`=variable::set_coordinate(type="Y",location=`Pos min`,coordinate=`y`)
    `Pos 2`=variable::set_coordinate(type="Y",location=`Pos max`,coordinate=`y2`)
    `Player`=variable::set_value(value=(1.0))
    `Function`=variable::set_value(value="We.set")
    code::call_function(function_name="We.run")
    if (variable::equals(compare=["floor"],value=`command`)){
        player::message(messages=[`Префикс WE`,"&#a6ff6eПол успешно заполнен","%space%%var_local(region) %var_local(speed) %var_local(time)"],merging="CONCATENATION")
    }
    else{
        player::message(messages=[`Префикс WE`,"&#a6ff6eПотолок успешно заполнен","%space%%var_local(region) %var_local(speed) %var_local(time)"],merging="CONCATENATION")
    }
}
function `We.chunkCommand`(){
    `args`=variable::create_list(values=["type: Location, name: \"Location\", optional: true","type: Option, permission: build_or_dev, exception: \"%var(Префикс WE)Использование: &7$scmd &b[<координаты>]\""])
    code::call_function(function_name="Mapi.commandConstructor")
    if not (variable::exists(variable=`Location`)){
        `Location`=variable::set_value(value=value::location<default>)
    }
    variable::get_all_coordinates(location=`Location`,x=`x`,z=`z`)
    `x`=variable::divide(value=[`x`,(16.0)])
    `z`=variable::divide(value=[`z`,(16.0)])
    `We.%player%.firstPos`=variable::set_all_coordinates(x=(floor(`x`)*16+0.5),y=(-63.5),z=(floor(`z`)*16+0.5))
    `We.%player%.secondPos`=variable::set_all_coordinates(x=(ceil(`x`)*16-(0.5)),y=(319.5),z=(ceil(`z`)*16-(0.5)))
    player::message(messages=["%var(Префикс WE)&#a6ff6eВыделен чанк &#abc4d6%math(floor(%var_local(x))) %math(floor(%var_local(z)))","&7(&f98304 м³&7)&#a6ff6e"])
    player::play_sound(sound=sound(sound="minecraft:entity.experience_orb.pickup",volume=1.0,pitch=1.0),location=value::location<default>)
}
function `We.visualCommand`(){
    `args`=variable::create_list(values=["type: Number, name: distanse, in_range: [0,5]","type: Option, permission: build_or_dev, exception: \"%var(Префикс WE)Использование: &7$scmd &b<расстояние>\""])
    code::call_function(function_name="Mapi.commandConstructor")
    `We.%player%.distanceParticles`=variable::set_value(value=`distanse`)
    if (variable::equals(compare=[(0.0)],value=`distanse`)){
        player::message(messages=["%var(Префикс WE)Отображение частиц &#ff6e6eотключено"])
    }
    else{
        player::message(messages=["%var(Префикс WE)&#a6ff6eРасстояние между частицами установлено на &#abc4d6%var_local(distanse)"])
    }
    player::play_sound(sound=sound(sound="minecraft:entity.experience_orb.pickup",volume=1.0,pitch=1.0),location=value::location<default>)
}
function `We.weCommand`(){
    `args`=variable::create_list(values=["name: subCommand, equals: [reload, help]","type: Option, permission: build_or_dev, exception: \"%var(Префикс WE)Использование: &7$scmd &b<reload&7|&bhelp>\""])
    code::call_function(function_name="Mapi.commandConstructor")
    if (variable::equals(compare=["reload"],value=`subCommand`)){
        code::call_function(function_name="We.load")
    }
    if (variable::equals(compare=["help"],value=`subCommand`)){
        player::show_menu(items=["\{\C\o\u\n\t\:\1\b\,\i\d\:\"\m\i\n\e\c\r\a\f\t\:\b\i\r\c\h\_\s\i\g\n\"\,\t\a\g\:\{\d\i\s\p\l\a\y\:\{\L\o\r\e\:\[\'\{\"\i\t\a\l\i\c\"\:\f\a\l\s\e\,\"\c\o\l\o\r\"\:\"\w\h\i\t\e\"\,\"\e\x\t\r\a\"\:\[\{\"\t\e\x\t\"\:\"\"\}\,\{\"\c\o\l\o\r\"\:\"\#\c\b\d\a\f\4\"\,\"\t\e\x\t\"\:\"\У\с\т\а\н\а\в\л\и\в\а\е\т\ \б\л\о\к\и\ \в\ \р\е\г\и\о\н\е\"\}\]\,\"\t\e\x\t\"\:\"\"\}\'\,\'\{\"\e\x\t\r\a\"\:\[\{\"\t\e\x\t\"\:\"\"\}\]\,\"\t\e\x\t\"\:\"\"\}\'\,\'\{\"\i\t\a\l\i\c\"\:\f\a\l\s\e\,\"\c\o\l\o\r\"\:\"\w\h\i\t\e\"\,\"\e\x\t\r\a\"\:\[\{\"\t\e\x\t\"\:\"\"\}\,\{\"\c\o\l\o\r\"\:\"\#\8\5\a\8\e\2\"\,\"\t\e\x\t\"\:\"\Н\а\п\р\и\м\е\р\:\"\}\]\,\"\t\e\x\t\"\:\"\"\}\'\,\'\{\"\i\t\a\l\i\c\"\:\f\a\l\s\e\,\"\c\o\l\o\r\"\:\"\w\h\i\t\e\"\,\"\e\x\t\r\a\"\:\[\{\"\t\e\x\t\"\:\"\"\}\,\{\"\c\o\l\o\r\"\:\"\#\d\a\f\4\b\c\"\,\"\t\e\x\t\"\:\"\s\e\t\"\}\,\{\"\t\e\x\t\"\:\"\ \"\}\,\{\"\i\t\a\l\i\c\"\:\t\r\u\e\,\"\c\o\l\o\r\"\:\"\a\q\u\a\"\,\"\t\e\x\t\"\:\"\d\i\a\m\o\n\d\_\b\l\o\c\k\"\}\]\,\"\t\e\x\t\"\:\"\"\}\'\]\,\N\a\m\e\:\'\{\"\i\t\a\l\i\c\"\:\f\a\l\s\e\,\"\e\x\t\r\a\"\:\[\{\"\t\e\x\t\"\:\"\"\}\,\{\"\c\o\l\o\r\"\:\"\#\d\a\f\4\b\c\"\,\"\t\e\x\t\"\:\"\s\e\t\"\}\,\{\"\c\o\l\o\r\"\:\"\y\e\l\l\o\w\"\,\"\t\e\x\t\"\:\"\ \"\}\,\{\"\i\t\a\l\i\c\"\:\t\r\u\e\,\"\c\o\l\o\r\"\:\"\a\q\u\a\"\,\"\t\e\x\t\"\:\"\м\а\т\е\р\и\а\л\"\}\]\,\"\t\e\x\t\"\:\"\"\}\'\}\}\}","\{\C\o\u\n\t\:\1\b\,\i\d\:\"\m\i\n\e\c\r\a\f\t\:\b\i\r\c\h\_\s\i\g\n\"\,\t\a\g\:\{\d\i\s\p\l\a\y\:\{\L\o\r\e\:\[\'\{\"\i\t\a\l\i\c\"\:\f\a\l\s\e\,\"\c\o\l\o\r\"\:\"\w\h\i\t\e\"\,\"\e\x\t\r\a\"\:\[\{\"\t\e\x\t\"\:\"\"\}\,\{\"\c\o\l\o\r\"\:\"\#\c\b\d\a\f\4\"\,\"\t\e\x\t\"\:\"\З\а\м\е\н\я\е\т\ \б\л\о\к\и\ \в\ \р\е\г\и\о\н\е\"\}\]\,\"\t\e\x\t\"\:\"\"\}\'\,\'\{\"\e\x\t\r\a\"\:\[\{\"\t\e\x\t\"\:\"\"\}\]\,\"\t\e\x\t\"\:\"\"\}\'\,\'\{\"\i\t\a\l\i\c\"\:\f\a\l\s\e\,\"\c\o\l\o\r\"\:\"\w\h\i\t\e\"\,\"\e\x\t\r\a\"\:\[\{\"\t\e\x\t\"\:\"\"\}\,\{\"\c\o\l\o\r\"\:\"\#\8\5\a\8\e\2\"\,\"\t\e\x\t\"\:\"\Н\а\п\р\и\м\е\р\:\"\}\]\,\"\t\e\x\t\"\:\"\"\}\'\,\'\{\"\i\t\a\l\i\c\"\:\f\a\l\s\e\,\"\c\o\l\o\r\"\:\"\w\h\i\t\e\"\,\"\e\x\t\r\a\"\:\[\{\"\t\e\x\t\"\:\"\"\}\,\{\"\c\o\l\o\r\"\:\"\#\d\a\f\4\b\c\"\,\"\t\e\x\t\"\:\"\r\e\p\l\a\c\e\"\}\,\{\"\t\e\x\t\"\:\"\ \"\}\,\{\"\i\t\a\l\i\c\"\:\t\r\u\e\,\"\c\o\l\o\r\"\:\"\a\q\u\a\"\,\"\t\e\x\t\"\:\"\d\i\a\m\o\n\d\_\b\l\o\c\k\ \"\}\,\{\"\i\t\a\l\i\c\"\:\t\r\u\e\,\"\c\o\l\o\r\"\:\"\y\e\l\l\o\w\"\,\"\t\e\x\t\"\:\"\e\m\e\r\a\l\d\_\b\l\o\c\k\"\}\]\,\"\t\e\x\t\"\:\"\"\}\'\]\,\N\a\m\e\:\'\{\"\i\t\a\l\i\c\"\:\f\a\l\s\e\,\"\e\x\t\r\a\"\:\[\{\"\t\e\x\t\"\:\"\"\}\,\{\"\c\o\l\o\r\"\:\"\#\d\a\f\4\b\c\"\,\"\t\e\x\t\"\:\"\r\e\p\l\a\c\e\"\}\,\{\"\t\e\x\t\"\:\"\ \"\}\,\{\"\i\t\a\l\i\c\"\:\t\r\u\e\,\"\c\o\l\o\r\"\:\"\a\q\u\a\"\,\"\t\e\x\t\"\:\"\з\а\м\е\н\я\е\м\ы\й\ \м\а\т\е\р\и\а\л\ \"\}\,\{\"\i\t\a\l\i\c\"\:\t\r\u\e\,\"\c\o\l\o\r\"\:\"\y\e\l\l\o\w\"\,\"\t\e\x\t\"\:\"\з\а\м\е\н\я\ю\щ\и\й\ \м\а\т\е\р\и\а\л\"\}\]\,\"\t\e\x\t\"\:\"\"\}\'\}\}\}","\{\C\o\u\n\t\:\1\b\,\i\d\:\"\m\i\n\e\c\r\a\f\t\:\b\i\r\c\h\_\s\i\g\n\"\,\t\a\g\:\{\d\i\s\p\l\a\y\:\{\L\o\r\e\:\[\'\{\"\i\t\a\l\i\c\"\:\f\a\l\s\e\,\"\c\o\l\o\r\"\:\"\w\h\i\t\e\"\,\"\e\x\t\r\a\"\:\[\{\"\t\e\x\t\"\:\"\"\}\,\{\"\c\o\l\o\r\"\:\"\#\c\b\d\a\f\4\"\,\"\t\e\x\t\"\:\"\З\а\п\о\м\и\н\а\е\т\ \м\е\с\т\о\п\о\л\о\ж\е\н\и\е\ \к\о\п\и\р\о\в\а\н\и\я\"\}\]\,\"\t\e\x\t\"\:\"\"\}\'\]\,\N\a\m\e\:\'\{\"\i\t\a\l\i\c\"\:\f\a\l\s\e\,\"\e\x\t\r\a\"\:\[\{\"\t\e\x\t\"\:\"\"\}\,\{\"\c\o\l\o\r\"\:\"\#\d\a\f\4\b\c\"\,\"\t\e\x\t\"\:\"\c\o\p\y\"\}\]\,\"\t\e\x\t\"\:\"\"\}\'\}\}\}","\{\C\o\u\n\t\:\1\b\,\i\d\:\"\m\i\n\e\c\r\a\f\t\:\b\i\r\c\h\_\s\i\g\n\"\,\t\a\g\:\{\d\i\s\p\l\a\y\:\{\L\o\r\e\:\[\'\{\"\i\t\a\l\i\c\"\:\f\a\l\s\e\,\"\c\o\l\o\r\"\:\"\w\h\i\t\e\"\,\"\e\x\t\r\a\"\:\[\{\"\t\e\x\t\"\:\"\"\}\,\{\"\c\o\l\o\r\"\:\"\#\C\B\D\A\F\4\"\,\"\t\e\x\t\"\:\"\К\л\о\н\и\р\у\е\т\ \р\е\г\и\о\н\"\}\]\,\"\t\e\x\t\"\:\"\"\}\'\]\,\N\a\m\e\:\'\{\"\i\t\a\l\i\c\"\:\f\a\l\s\e\,\"\e\x\t\r\a\"\:\[\{\"\t\e\x\t\"\:\"\"\}\,\{\"\c\o\l\o\r\"\:\"\#\D\A\F\4\B\C\"\,\"\t\e\x\t\"\:\"\p\a\s\t\e\ \"\}\,\{\"\i\t\a\l\i\c\"\:\t\r\u\e\,\"\c\o\l\o\r\"\:\"\a\q\u\a\"\,\"\t\e\x\t\"\:\"\*\ф\л\а\г\*\"\}\]\,\"\t\e\x\t\"\:\"\"\}\'\}\}\}","\{\C\o\u\n\t\:\1\b\,\i\d\:\"\m\i\n\e\c\r\a\f\t\:\b\i\r\c\h\_\s\i\g\n\"\,\t\a\g\:\{\d\i\s\p\l\a\y\:\{\L\o\r\e\:\[\'\{\"\i\t\a\l\i\c\"\:\f\a\l\s\e\,\"\c\o\l\o\r\"\:\"\w\h\i\t\e\"\,\"\e\x\t\r\a\"\:\[\{\"\t\e\x\t\"\:\"\"\}\,\{\"\c\o\l\o\r\"\:\"\#\c\b\d\a\f\4\"\,\"\t\e\x\t\"\:\"\В\ы\д\а\ё\т\ \п\р\е\д\м\е\т\ \д\л\я\ \в\ы\д\е\л\е\н\и\я\ \р\е\г\и\о\н\а\"\}\]\,\"\t\e\x\t\"\:\"\"\}\'\,\'\{\"\i\t\a\l\i\c\"\:\f\a\l\s\e\,\"\c\o\l\o\r\"\:\"\w\h\i\t\e\"\,\"\e\x\t\r\a\"\:\[\{\"\t\e\x\t\"\:\"\"\}\,\{\"\i\t\a\l\i\c\"\:\t\r\u\e\,\"\c\o\l\o\r\"\:\"\a\q\u\a\"\,\"\t\e\x\t\"\:\"\s\e\t\"\}\,\{\"\t\e\x\t\"\:\"\ \"\}\,\{\"\c\o\l\o\r\"\:\"\d\a\r\k\_\g\r\a\y\"\,\"\t\e\x\t\"\:\"\-\"\}\,\{\"\t\e\x\t\"\:\"\ \"\}\,\{\"\c\o\l\o\r\"\:\"\#\c\b\d\a\f\4\"\,\"\t\e\x\t\"\:\"\в\к\л\.\/\в\ы\к\л\.\ \с\п\о\с\о\б\н\о\с\т\ь\ \в\ы\д\е\л\я\т\ь\"\}\]\,\"\t\e\x\t\"\:\"\"\}\'\,\'\{\"\i\t\a\l\i\c\"\:\f\a\l\s\e\,\"\c\o\l\o\r\"\:\"\w\h\i\t\e\"\,\"\e\x\t\r\a\"\:\[\{\"\t\e\x\t\"\:\"\"\}\,\{\"\c\o\l\o\r\"\:\"\#\c\b\d\a\f\4\"\,\"\t\e\x\t\"\:\"\р\е\г\и\о\н\ \п\р\е\д\м\е\т\о\м\ \в\ \р\у\к\е\.\"\}\]\,\"\t\e\x\t\"\:\"\"\}\'\,\'\{\"\e\x\t\r\a\"\:\[\{\"\t\e\x\t\"\:\"\"\}\]\,\"\t\e\x\t\"\:\"\"\}\'\,\'\{\"\i\t\a\l\i\c\"\:\f\a\l\s\e\,\"\c\o\l\o\r\"\:\"\w\h\i\t\e\"\,\"\e\x\t\r\a\"\:\[\{\"\t\e\x\t\"\:\"\"\}\,\{\"\c\o\l\o\r\"\:\"\#\8\5\a\8\e\2\"\,\"\t\e\x\t\"\:\"\Н\а\п\р\и\м\е\р\:\"\}\]\,\"\t\e\x\t\"\:\"\"\}\'\,\'\{\"\i\t\a\l\i\c\"\:\f\a\l\s\e\,\"\c\o\l\o\r\"\:\"\w\h\i\t\e\"\,\"\e\x\t\r\a\"\:\[\{\"\t\e\x\t\"\:\"\"\}\,\{\"\c\o\l\o\r\"\:\"\#\d\a\f\4\b\c\"\,\"\t\e\x\t\"\:\"\w\a\n\d\"\}\,\{\"\t\e\x\t\"\:\"\ \"\}\,\{\"\i\t\a\l\i\c\"\:\t\r\u\e\,\"\c\o\l\o\r\"\:\"\a\q\u\a\"\,\"\t\e\x\t\"\:\"\s\e\t\"\}\]\,\"\t\e\x\t\"\:\"\"\}\'\]\,\N\a\m\e\:\'\{\"\i\t\a\l\i\c\"\:\f\a\l\s\e\,\"\e\x\t\r\a\"\:\[\{\"\t\e\x\t\"\:\"\"\}\,\{\"\c\o\l\o\r\"\:\"\#\d\a\f\4\b\c\"\,\"\t\e\x\t\"\:\"\w\a\n\d\"\}\,\{\"\c\o\l\o\r\"\:\"\y\e\l\l\o\w\"\,\"\t\e\x\t\"\:\"\ \"\}\,\{\"\i\t\a\l\i\c\"\:\t\r\u\e\,\"\c\o\l\o\r\"\:\"\a\q\u\a\"\,\"\t\e\x\t\"\:\"\*\s\e\t\*\"\}\]\,\"\t\e\x\t\"\:\"\"\}\'\}\}\}","\{\C\o\u\n\t\:\1\b\,\i\d\:\"\m\i\n\e\c\r\a\f\t\:\b\i\r\c\h\_\s\i\g\n\"\,\t\a\g\:\{\d\i\s\p\l\a\y\:\{\L\o\r\e\:\[\'\{\"\i\t\a\l\i\c\"\:\f\a\l\s\e\,\"\c\o\l\o\r\"\:\"\w\h\i\t\e\"\,\"\e\x\t\r\a\"\:\[\{\"\t\e\x\t\"\:\"\"\}\,\{\"\c\o\l\o\r\"\:\"\#\c\b\d\a\f\4\"\,\"\t\e\x\t\"\:\"\С\о\з\д\а\ё\т\ \с\ф\е\р\у\"\}\]\,\"\t\e\x\t\"\:\"\"\}\'\,\'\{\"\e\x\t\r\a\"\:\[\{\"\t\e\x\t\"\:\"\"\}\]\,\"\t\e\x\t\"\:\"\"\}\'\,\'\{\"\i\t\a\l\i\c\"\:\f\a\l\s\e\,\"\c\o\l\o\r\"\:\"\w\h\i\t\e\"\,\"\e\x\t\r\a\"\:\[\{\"\t\e\x\t\"\:\"\"\}\,\{\"\c\o\l\o\r\"\:\"\#\8\5\a\8\e\2\"\,\"\t\e\x\t\"\:\"\Н\а\п\р\и\м\е\р\:\"\}\]\,\"\t\e\x\t\"\:\"\"\}\'\,\'\{\"\i\t\a\l\i\c\"\:\f\a\l\s\e\,\"\c\o\l\o\r\"\:\"\w\h\i\t\e\"\,\"\e\x\t\r\a\"\:\[\{\"\t\e\x\t\"\:\"\"\}\,\{\"\c\o\l\o\r\"\:\"\#\d\a\f\4\b\c\"\,\"\t\e\x\t\"\:\"\s\p\h\e\r\e\"\}\,\{\"\t\e\x\t\"\:\"\ \"\}\,\{\"\i\t\a\l\i\c\"\:\t\r\u\e\,\"\c\o\l\o\r\"\:\"\a\q\u\a\"\,\"\t\e\x\t\"\:\"\d\i\a\m\o\n\d\_\b\l\o\c\k\ \"\}\,\{\"\i\t\a\l\i\c\"\:\t\r\u\e\,\"\c\o\l\o\r\"\:\"\y\e\l\l\o\w\"\,\"\t\e\x\t\"\:\"\5\"\}\]\,\"\t\e\x\t\"\:\"\"\}\'\]\,\N\a\m\e\:\'\{\"\i\t\a\l\i\c\"\:\f\a\l\s\e\,\"\e\x\t\r\a\"\:\[\{\"\t\e\x\t\"\:\"\"\}\,\{\"\c\o\l\o\r\"\:\"\#\d\a\f\4\b\c\"\,\"\t\e\x\t\"\:\"\s\p\h\e\r\e\"\}\,\{\"\c\o\l\o\r\"\:\"\y\e\l\l\o\w\"\,\"\t\e\x\t\"\:\"\ \"\}\,\{\"\i\t\a\l\i\c\"\:\t\r\u\e\,\"\c\o\l\o\r\"\:\"\a\q\u\a\"\,\"\t\e\x\t\"\:\"\м\а\т\е\р\и\а\л\ \"\}\,\{\"\i\t\a\l\i\c\"\:\t\r\u\e\,\"\c\o\l\o\r\"\:\"\y\e\l\l\o\w\"\,\"\t\e\x\t\"\:\"\р\а\д\и\у\с\"\}\]\,\"\t\e\x\t\"\:\"\"\}\'\}\}\}","\{\C\o\u\n\t\:\1\b\,\i\d\:\"\m\i\n\e\c\r\a\f\t\:\b\i\r\c\h\_\s\i\g\n\"\,\t\a\g\:\{\d\i\s\p\l\a\y\:\{\L\o\r\e\:\[\'\{\"\i\t\a\l\i\c\"\:\f\a\l\s\e\,\"\c\o\l\o\r\"\:\"\w\h\i\t\e\"\,\"\e\x\t\r\a\"\:\[\{\"\t\e\x\t\"\:\"\"\}\,\{\"\c\o\l\o\r\"\:\"\#\c\b\d\a\f\4\"\,\"\t\e\x\t\"\:\"\С\о\з\д\а\ё\т\ \ц\и\л\и\н\д\р\"\}\]\,\"\t\e\x\t\"\:\"\"\}\'\,\'\{\"\e\x\t\r\a\"\:\[\{\"\t\e\x\t\"\:\"\"\}\]\,\"\t\e\x\t\"\:\"\"\}\'\,\'\{\"\i\t\a\l\i\c\"\:\f\a\l\s\e\,\"\c\o\l\o\r\"\:\"\w\h\i\t\e\"\,\"\e\x\t\r\a\"\:\[\{\"\t\e\x\t\"\:\"\"\}\,\{\"\c\o\l\o\r\"\:\"\#\8\5\a\8\e\2\"\,\"\t\e\x\t\"\:\"\Н\а\п\р\и\м\е\р\:\"\}\]\,\"\t\e\x\t\"\:\"\"\}\'\,\'\{\"\i\t\a\l\i\c\"\:\f\a\l\s\e\,\"\c\o\l\o\r\"\:\"\w\h\i\t\e\"\,\"\e\x\t\r\a\"\:\[\{\"\t\e\x\t\"\:\"\"\}\,\{\"\c\o\l\o\r\"\:\"\#\d\a\f\4\b\c\"\,\"\t\e\x\t\"\:\"\c\y\l\"\}\,\{\"\t\e\x\t\"\:\"\ \"\}\,\{\"\i\t\a\l\i\c\"\:\t\r\u\e\,\"\c\o\l\o\r\"\:\"\a\q\u\a\"\,\"\t\e\x\t\"\:\"\d\i\a\m\o\n\d\_\b\l\o\c\k\ \"\}\,\{\"\i\t\a\l\i\c\"\:\t\r\u\e\,\"\c\o\l\o\r\"\:\"\y\e\l\l\o\w\"\,\"\t\e\x\t\"\:\"\5\"\}\]\,\"\t\e\x\t\"\:\"\"\}\'\,\'\{\"\i\t\a\l\i\c\"\:\f\a\l\s\e\,\"\c\o\l\o\r\"\:\"\w\h\i\t\e\"\,\"\e\x\t\r\a\"\:\[\{\"\t\e\x\t\"\:\"\"\}\,\{\"\c\o\l\o\r\"\:\"\#\d\a\f\4\b\c\"\,\"\t\e\x\t\"\:\"\c\y\l\"\}\,\{\"\t\e\x\t\"\:\"\ \"\}\,\{\"\c\o\l\o\r\"\:\"\a\q\u\a\"\,\"\t\e\x\t\"\:\"\e\"\}\,\{\"\i\t\a\l\i\c\"\:\t\r\u\e\,\"\c\o\l\o\r\"\:\"\a\q\u\a\"\,\"\t\e\x\t\"\:\"\m\e\r\a\l\d\_\b\l\o\c\k\"\}\,\{\"\i\t\a\l\i\c\"\:\t\r\u\e\,\"\t\e\x\t\"\:\"\ \"\}\,\{\"\i\t\a\l\i\c\"\:\t\r\u\e\,\"\c\o\l\o\r\"\:\"\y\e\l\l\o\w\"\,\"\t\e\x\t\"\:\"\7\"\}\,\{\"\i\t\a\l\i\c\"\:\t\r\u\e\,\"\t\e\x\t\"\:\"\ \"\}\,\{\"\i\t\a\l\i\c\"\:\t\r\u\e\,\"\c\o\l\o\r\"\:\"\g\r\e\e\n\"\,\"\t\e\x\t\"\:\"\5\"\}\]\,\"\t\e\x\t\"\:\"\"\}\'\]\,\N\a\m\e\:\'\{\"\i\t\a\l\i\c\"\:\f\a\l\s\e\,\"\e\x\t\r\a\"\:\[\{\"\t\e\x\t\"\:\"\"\}\,\{\"\c\o\l\o\r\"\:\"\#\d\a\f\4\b\c\"\,\"\t\e\x\t\"\:\"\c\y\l\"\}\,\{\"\c\o\l\o\r\"\:\"\y\e\l\l\o\w\"\,\"\t\e\x\t\"\:\"\ \"\}\,\{\"\i\t\a\l\i\c\"\:\t\r\u\e\,\"\c\o\l\o\r\"\:\"\a\q\u\a\"\,\"\t\e\x\t\"\:\"\м\а\т\е\р\и\а\л\ \"\}\,\{\"\i\t\a\l\i\c\"\:\t\r\u\e\,\"\c\o\l\o\r\"\:\"\y\e\l\l\o\w\"\,\"\t\e\x\t\"\:\"\р\а\д\и\у\с\ \"\}\,\{\"\i\t\a\l\i\c\"\:\t\r\u\e\,\"\c\o\l\o\r\"\:\"\g\r\e\e\n\"\,\"\t\e\x\t\"\:\"\*\в\ы\с\о\т\а\*\"\}\]\,\"\t\e\x\t\"\:\"\"\}\'\}\}\}","\{\}","\{\C\o\u\n\t\:\1\b\,\i\d\:\"\m\i\n\e\c\r\a\f\t\:\g\r\a\y\_\s\t\a\i\n\e\d\_\g\l\a\s\s\_\p\a\n\e\"\,\t\a\g\:\{\d\i\s\p\l\a\y\:\{\N\a\m\e\:\'\{\"\t\e\x\t\"\:\"\"\}\'\}\}\}","\{\C\o\u\n\t\:\1\b\,\i\d\:\"\m\i\n\e\c\r\a\f\t\:\w\a\r\p\e\d\_\s\i\g\n\"\,\t\a\g\:\{\d\i\s\p\l\a\y\:\{\L\o\r\e\:\[\'\{\"\i\t\a\l\i\c\"\:\f\a\l\s\e\,\"\c\o\l\o\r\"\:\"\w\h\i\t\e\"\,\"\e\x\t\r\a\"\:\[\{\"\t\e\x\t\"\:\"\"\}\,\{\"\c\o\l\o\r\"\:\"\#\c\b\d\a\f\4\"\,\"\t\e\x\t\"\:\"\О\с\т\а\н\а\в\л\и\в\а\е\т\ \в\ы\п\о\л\н\е\н\и\е\ \о\п\е\р\а\ц\и\и\"\}\]\,\"\t\e\x\t\"\:\"\"\}\'\]\,\N\a\m\e\:\'\{\"\i\t\a\l\i\c\"\:\f\a\l\s\e\,\"\e\x\t\r\a\"\:\[\{\"\t\e\x\t\"\:\"\"\}\,\{\"\c\o\l\o\r\"\:\"\#\d\a\f\4\b\c\"\,\"\t\e\x\t\"\:\"\s\t\o\p\"\}\]\,\"\t\e\x\t\"\:\"\"\}\'\}\}\}","\{\C\o\u\n\t\:\1\b\,\i\d\:\"\m\i\n\e\c\r\a\f\t\:\w\a\r\p\e\d\_\s\i\g\n\"\,\t\a\g\:\{\d\i\s\p\l\a\y\:\{\L\o\r\e\:\[\'\{\"\i\t\a\l\i\c\"\:\f\a\l\s\e\,\"\c\o\l\o\r\"\:\"\w\h\i\t\e\"\,\"\e\x\t\r\a\"\:\[\{\"\t\e\x\t\"\:\"\"\}\,\{\"\i\t\a\l\i\c\"\:\t\r\u\e\,\"\c\o\l\o\r\"\:\"\a\q\u\a\"\,\"\t\e\x\t\"\:\"\r\e\l\o\a\d\"\}\,\{\"\c\o\l\o\r\"\:\"\#\c\b\d\a\f\4\"\,\"\t\e\x\t\"\:\"\ \"\}\,\{\"\c\o\l\o\r\"\:\"\d\a\r\k\_\g\r\a\y\"\,\"\t\e\x\t\"\:\"\-\"\}\,\{\"\c\o\l\o\r\"\:\"\#\c\b\d\a\f\4\"\,\"\t\e\x\t\"\:\"\ \п\е\р\е\з\а\г\р\у\ж\а\е\т\"\}\]\,\"\t\e\x\t\"\:\"\"\}\'\,\'\{\"\i\t\a\l\i\c\"\:\f\a\l\s\e\,\"\c\o\l\o\r\"\:\"\w\h\i\t\e\"\,\"\e\x\t\r\a\"\:\[\{\"\t\e\x\t\"\:\"\"\}\,\{\"\i\t\a\l\i\c\"\:\t\r\u\e\,\"\c\o\l\o\r\"\:\"\a\q\u\a\"\,\"\t\e\x\t\"\:\"\h\e\l\p\"\}\,\{\"\c\o\l\o\r\"\:\"\#\c\b\d\a\f\4\"\,\"\t\e\x\t\"\:\"\ \"\}\,\{\"\c\o\l\o\r\"\:\"\d\a\r\k\_\g\r\a\y\"\,\"\t\e\x\t\"\:\"\-\"\}\,\{\"\c\o\l\o\r\"\:\"\#\c\b\d\a\f\4\"\,\"\t\e\x\t\"\:\"\ \п\о\к\а\з\ы\в\а\е\т\ \м\е\н\ю\ \п\о\м\о\щ\и\"\}\]\,\"\t\e\x\t\"\:\"\"\}\'\,\'\{\"\e\x\t\r\a\"\:\[\{\"\t\e\x\t\"\:\"\"\}\]\,\"\t\e\x\t\"\:\"\"\}\'\,\'\{\"\i\t\a\l\i\c\"\:\f\a\l\s\e\,\"\c\o\l\o\r\"\:\"\w\h\i\t\e\"\,\"\e\x\t\r\a\"\:\[\{\"\t\e\x\t\"\:\"\"\}\,\{\"\c\o\l\o\r\"\:\"\#\8\5\a\8\e\2\"\,\"\t\e\x\t\"\:\"\Н\а\п\р\и\м\е\р\:\"\}\]\,\"\t\e\x\t\"\:\"\"\}\'\,\'\{\"\i\t\a\l\i\c\"\:\f\a\l\s\e\,\"\c\o\l\o\r\"\:\"\w\h\i\t\e\"\,\"\e\x\t\r\a\"\:\[\{\"\t\e\x\t\"\:\"\"\}\,\{\"\t\e\x\t\"\:\"\w\o\r\l\d\e\d\i\t\ \"\}\,\{\"\i\t\a\l\i\c\"\:\t\r\u\e\,\"\c\o\l\o\r\"\:\"\a\q\u\a\"\,\"\t\e\x\t\"\:\"\r\e\l\o\a\d\"\}\]\,\"\t\e\x\t\"\:\"\"\}\'\]\,\N\a\m\e\:\'\{\"\i\t\a\l\i\c\"\:\f\a\l\s\e\,\"\e\x\t\r\a\"\:\[\{\"\t\e\x\t\"\:\"\"\}\,\{\"\c\o\l\o\r\"\:\"\#\d\a\f\4\b\c\"\,\"\t\e\x\t\"\:\"\w\o\r\l\d\e\d\i\t\ \"\}\,\{\"\i\t\a\l\i\c\"\:\t\r\u\e\,\"\c\o\l\o\r\"\:\"\a\q\u\a\"\,\"\t\e\x\t\"\:\"\r\e\l\o\a\d\"\}\,\{\"\c\o\l\o\r\"\:\"\#\d\a\f\4\b\c\"\,\"\t\e\x\t\"\:\"\ \"\}\,\{\"\c\o\l\o\r\"\:\"\#\8\5\a\8\e\2\"\,\"\t\e\x\t\"\:\"\|\"\}\,\{\"\c\o\l\o\r\"\:\"\#\d\a\f\4\b\c\"\,\"\t\e\x\t\"\:\"\ \"\}\,\{\"\i\t\a\l\i\c\"\:\t\r\u\e\,\"\c\o\l\o\r\"\:\"\a\q\u\a\"\,\"\t\e\x\t\"\:\"\h\e\l\p\"\}\]\,\"\t\e\x\t\"\:\"\"\}\'\}\}\}","\{\C\o\u\n\t\:\1\b\,\i\d\:\"\m\i\n\e\c\r\a\f\t\:\w\a\r\p\e\d\_\s\i\g\n\"\,\t\a\g\:\{\d\i\s\p\l\a\y\:\{\L\o\r\e\:\[\'\{\"\i\t\a\l\i\c\"\:\f\a\l\s\e\,\"\c\o\l\o\r\"\:\"\w\h\i\t\e\"\,\"\e\x\t\r\a\"\:\[\{\"\t\e\x\t\"\:\"\"\}\,\{\"\c\o\l\o\r\"\:\"\#\c\b\d\a\f\4\"\,\"\t\e\x\t\"\:\"\Е\с\л\и\ \у\к\а\з\а\т\ь\ \0\,\ \т\о\ \о\т\о\б\р\а\ж\е\н\и\е\"\}\]\,\"\t\e\x\t\"\:\"\"\}\'\,\'\{\"\i\t\a\l\i\c\"\:\f\a\l\s\e\,\"\c\o\l\o\r\"\:\"\w\h\i\t\e\"\,\"\e\x\t\r\a\"\:\[\{\"\t\e\x\t\"\:\"\"\}\,\{\"\c\o\l\o\r\"\:\"\#\c\b\d\a\f\4\"\,\"\t\e\x\t\"\:\"\ч\а\с\т\и\ц\ \о\т\к\л\ю\ч\и\т\с\я\"\}\]\,\"\t\e\x\t\"\:\"\"\}\'\,\'\{\"\e\x\t\r\a\"\:\[\{\"\t\e\x\t\"\:\"\"\}\]\,\"\t\e\x\t\"\:\"\"\}\'\,\'\{\"\i\t\a\l\i\c\"\:\f\a\l\s\e\,\"\c\o\l\o\r\"\:\"\w\h\i\t\e\"\,\"\e\x\t\r\a\"\:\[\{\"\t\e\x\t\"\:\"\"\}\,\{\"\c\o\l\o\r\"\:\"\#\8\5\a\8\e\2\"\,\"\t\e\x\t\"\:\"\Н\а\п\р\и\м\е\р\:\"\}\]\,\"\t\e\x\t\"\:\"\"\}\'\,\'\{\"\i\t\a\l\i\c\"\:\f\a\l\s\e\,\"\c\o\l\o\r\"\:\"\w\h\i\t\e\"\,\"\e\x\t\r\a\"\:\[\{\"\t\e\x\t\"\:\"\"\}\,\{\"\t\e\x\t\"\:\"\v\i\s\u\a\l\ \"\}\,\{\"\i\t\a\l\i\c\"\:\t\r\u\e\,\"\c\o\l\o\r\"\:\"\a\q\u\a\"\,\"\t\e\x\t\"\:\"\1\"\}\]\,\"\t\e\x\t\"\:\"\"\}\'\]\,\N\a\m\e\:\'\{\"\i\t\a\l\i\c\"\:\f\a\l\s\e\,\"\e\x\t\r\a\"\:\[\{\"\t\e\x\t\"\:\"\"\}\,\{\"\c\o\l\o\r\"\:\"\#\d\a\f\4\b\c\"\,\"\t\e\x\t\"\:\"\v\i\s\u\a\l\ \"\}\,\{\"\i\t\a\l\i\c\"\:\t\r\u\e\,\"\c\o\l\o\r\"\:\"\a\q\u\a\"\,\"\t\e\x\t\"\:\"\р\а\с\с\т\о\я\н\и\е\"\}\]\,\"\t\e\x\t\"\:\"\"\}\'\}\}\}","\{\}","\{\}","\{\}","\{\}","\{\}","\{\C\o\u\n\t\:\1\b\,\i\d\:\"\m\i\n\e\c\r\a\f\t\:\k\n\o\w\l\e\d\g\e\_\b\o\o\k\"\,\t\a\g\:\{\d\i\s\p\l\a\y\:\{\L\o\r\e\:\[\'\{\"\i\t\a\l\i\c\"\:\f\a\l\s\e\,\"\c\o\l\o\r\"\:\"\w\h\i\t\e\"\,\"\e\x\t\r\a\"\:\[\{\"\t\e\x\t\"\:\"\"\}\,\{\"\t\e\x\t\"\:\"\ \Ч\т\о\б\ы\ \и\с\п\о\л\ь\з\о\в\а\т\ь\ \н\е\с\к\о\л\ь\к\о\ \б\л\о\к\о\в\"\}\]\,\"\t\e\x\t\"\:\"\"\}\'\,\'\{\"\i\t\a\l\i\c\"\:\f\a\l\s\e\,\"\c\o\l\o\r\"\:\"\w\h\i\t\e\"\,\"\e\x\t\r\a\"\:\[\{\"\t\e\x\t\"\:\"\"\}\,\{\"\t\e\x\t\"\:\"\ \р\а\з\д\е\л\я\й\т\е\ \и\х\ \с\ \п\о\м\о\щ\ь\ю\ \з\а\п\я\т\о\й\"\}\]\,\"\t\e\x\t\"\:\"\"\}\'\,\'\{\"\e\x\t\r\a\"\:\[\{\"\t\e\x\t\"\:\"\"\}\]\,\"\t\e\x\t\"\:\"\"\}\'\]\,\N\a\m\e\:\'\{\"\i\t\a\l\i\c\"\:\f\a\l\s\e\,\"\e\x\t\r\a\"\:\[\{\"\t\e\x\t\"\:\"\"\}\,\{\"\t\e\x\t\"\:\"\"\}\]\,\"\t\e\x\t\"\:\"\"\}\'\}\}\}","\{\}","\{\}","\{\}","\{\}","\{\}","\{\}","\{\}","\{\}","\{\C\o\u\n\t\:\1\b\,\i\d\:\"\m\i\n\e\c\r\a\f\t\:\g\r\a\y\_\s\t\a\i\n\e\d\_\g\l\a\s\s\_\p\a\n\e\"\,\t\a\g\:\{\d\i\s\p\l\a\y\:\{\N\a\m\e\:\'\{\"\t\e\x\t\"\:\"\"\}\'\}\}\}"],name="WE » Команды")
        `argsCol`=variable::create_list(values=["&b","&e","&a","&d","&6"])
        repeat::for_each_in_list(list=`We.commandsInfo`){`index`,`commandInfo` ->
            if (variable::is_type(variable_type="TEXT",value=`commandInfo`)){
                code::controller_exception(variable=`exception`,exception_type="ERROR"){
                    `commandInfo`=variable::parse_json(json=`commandInfo`)
                }
                if (variable::greater_or_equals(value=(%length_local(`exception`)),compare=(1.0))){
                    code::skip_iteration()
                }
                `We.commandsInfo`=variable::set_list_value(list=`We.commandsInfo`,number=`index`,value=`commandInfo`)
            }
            if (variable::is_type(variable_type="MAP",value=`commandInfo`)){
                `icon`=variable::get_map_value(map=`commandInfo`,key="icon",default_value="\{\C\o\u\n\t\:\1\b\,\i\d\:\"\m\i\n\e\c\r\a\f\t\:\b\i\r\c\h\_\s\i\g\n\"\}")
                `args`=variable::get_map_value(map=`commandInfo`,key="args")
                `commandArgs`=variable::set_value(value="%empty%")
                repeat::for_each_in_list(list=`args`){`index`,`arg` ->
                    `index`=variable::warp(number=`index`,min=(0.0),max=(5.0))
                    `argCol`=variable::get_list_value(list=`argsCol`,number=`index`)
                    `arg`=variable::replace_text(text=`arg`,replace="$c",replacement=`argCol`)
                    `commandArgs`=variable::set_text(text=[`commandArgs`,"%space%",`argCol`,`arg`],merging="CONCATENATION")
                }
                `item`=variable::set_item_name(item=`icon`,text="&#daf4bc%var_local(command)%var_local(commandArgs)")
                `description`=variable::get_map_value(map=`commandInfo`,key="description",default_value=`Empty List`)
                if (variable::map_has_key(map=`commandInfo`,key="info")){
                    `info`=variable::get_map_value(map=`commandInfo`,key="info")
                    variable::list_append_value(values=["%empty%","&#7a8085» &#85a8e2Например:"],variable=`description`)
                    `description`=variable::list_append_list(list_1=`description`,list_2=`info`)
                }
                `item`=variable::set_item_lore(lore=[`description`],item=`item`)
                player::set_menu_item(item=`item`,slot=`slot`)
                `slot`=variable::add(value=[`slot`,(1.0)])
            }
        }
        player::play_sound(sound=sound(sound="minecraft:entity.experience_orb.pickup",volume=1.0,pitch=1.0),location=value::location<default>)
    }
}
function `We.stopCommand`(){
    `args`=variable::create_list(values=["type: Option, exception: \"%var(Префикс WE)Использование: &7$scmd\""])
    code::call_function(function_name="Mapi.commandConstructor")
    if (variable::exists(variable=`We.%player%.isOperation`)){
        if not (variable::exists(variable=`We.%player%.isStop`)){
            `We.%player%.isStop`=variable::set_value(value=(1.0))
            code::wait(duration=(2.0))
            if not (variable::exists(variable=`We.%player%.isStop`)){
                break
            }
            variable::purge(names=["We.%player%.blocks","We.%player%.isOperation","We.%player%.isStop"])
            player::message(messages=["%var(Префикс WE)&#ff6e6eТекущая операция принудительно остановлена"])
            player::play_sound(sound=sound(sound="minecraft:block.note_block.bit",volume=1.0,pitch=1.0),location=value::location<default>)
        }
        else{
            player::message(messages=["%var(Префикс WE)&#ff6e6eОперация уже останавливается"])
            player::play_sound(sound=sound(sound="minecraft:block.lava.extinguish",volume=0.5,pitch=2.0),location=value::location<default>)
        }
    }
    else{
        player::message(messages=["%var(Префикс WE)&#ff6e6eСейчас не выполняется операция"])
        player::play_sound(sound=sound(sound="minecraft:block.lava.extinguish",volume=0.5,pitch=2.0),location=value::location<default>)
    }
}
function `We.ekillCommand`(){
    code::call_function(function_name="Mapi.commandConstructor")
    `Check Region`=variable::set_value(value=(1.0))
    code::call_function(function_name="We.check")
    variable::get_all_coordinates(location=`We.%player%.firstPos`,x=`x1`,y=`y1`,z=`z1`)
    variable::get_all_coordinates(location=`We.%player%.secondPos`,x=`x2`,y=`y2`,z=`z2`)
    `firstPos`=variable::set_all_coordinates(x=(floor(`x1`,0)),y=(floor(`y1`,0)),z=(floor(`z1`,0)))
    `secondPos`=variable::set_all_coordinates(x=(floor(`x2`,0)+0.999),y=(floor(`y2`,0)+0.999),z=(floor(`z2`,0)+0.999))
    select::entity_by_conditional(entity::in_area())
    `entities`=variable::set_value(value=value::selection_size)
    entity::remove()
    select::reset()
    player::message(messages=["%var(Префикс WE)&#a6ff6eУничтожено &#abc4d6%var_local(entities)&#a6ff6e сущностей"])
    player::play_sound(sound=sound(sound="minecraft:entity.experience_orb.pickup",volume=1.0,pitch=1.0),location=value::location<default>)
}
function `We.schemCommand`(){
    `args`=variable::create_list(values=["name: subCommand, equals: [save]","type: String, name: schemName, optional: true","type: Option, exception: \"%var(Префикс WE)Использование: &7$scmd save &b[<название>]\""])
    code::call_function(function_name="Mapi.commandConstructor")
    `Player`=variable::set_value(value=(1.0))
    if (variable::equals(compare=["save"],value=`subCommand`)){
        code::call_function(function_name="We.check")
        `Function`=variable::set_value(value="We.schemSave")
        if not (variable::exists(variable=`We.%player%.fastMode`)){
            `saveNbt`=variable::set_value(value=(1.0))
        }
        code::call_function(function_name="We.run")
        `schemItem`=variable::set_random(values=["\{\C\o\u\n\t\:\1\b\,\i\d\:\"\m\i\n\e\c\r\a\f\t\:\r\e\d\_\s\h\u\l\k\e\r\_\b\o\x\"\}","\{\C\o\u\n\t\:\1\b\,\i\d\:\"\m\i\n\e\c\r\a\f\t\:\o\r\a\n\g\e\_\s\h\u\l\k\e\r\_\b\o\x\"\}","\{\C\o\u\n\t\:\1\b\,\i\d\:\"\m\i\n\e\c\r\a\f\t\:\y\e\l\l\o\w\_\s\h\u\l\k\e\r\_\b\o\x\"\}","\{\C\o\u\n\t\:\1\b\,\i\d\:\"\m\i\n\e\c\r\a\f\t\:\l\i\m\e\_\s\h\u\l\k\e\r\_\b\o\x\"\}","\{\C\o\u\n\t\:\1\b\,\i\d\:\"\m\i\n\e\c\r\a\f\t\:\g\r\e\e\n\_\s\h\u\l\k\e\r\_\b\o\x\"\}","\{\C\o\u\n\t\:\1\b\,\i\d\:\"\m\i\n\e\c\r\a\f\t\:\c\y\a\n\_\s\h\u\l\k\e\r\_\b\o\x\"\}","\{\C\o\u\n\t\:\1\b\,\i\d\:\"\m\i\n\e\c\r\a\f\t\:\l\i\g\h\t\_\b\l\u\e\_\s\h\u\l\k\e\r\_\b\o\x\"\}","\{\C\o\u\n\t\:\1\b\,\i\d\:\"\m\i\n\e\c\r\a\f\t\:\b\l\u\e\_\s\h\u\l\k\e\r\_\b\o\x\"\}","\{\C\o\u\n\t\:\1\b\,\i\d\:\"\m\i\n\e\c\r\a\f\t\:\p\u\r\p\l\e\_\s\h\u\l\k\e\r\_\b\o\x\"\}","\{\C\o\u\n\t\:\1\b\,\i\d\:\"\m\i\n\e\c\r\a\f\t\:\m\a\g\e\n\t\a\_\s\h\u\l\k\e\r\_\b\o\x\"\}","\{\C\o\u\n\t\:\1\b\,\i\d\:\"\m\i\n\e\c\r\a\f\t\:\p\i\n\k\_\s\h\u\l\k\e\r\_\b\o\x\"\}","\{\C\o\u\n\t\:\1\b\,\i\d\:\"\m\i\n\e\c\r\a\f\t\:\s\h\u\l\k\e\r\_\b\o\x\"\}","\{\C\o\u\n\t\:\1\b\,\i\d\:\"\m\i\n\e\c\r\a\f\t\:\b\r\o\w\n\_\s\h\u\l\k\e\r\_\b\o\x\"\}","\{\C\o\u\n\t\:\1\b\,\i\d\:\"\m\i\n\e\c\r\a\f\t\:\w\h\i\t\e\_\s\h\u\l\k\e\r\_\b\o\x\"\}","\{\C\o\u\n\t\:\1\b\,\i\d\:\"\m\i\n\e\c\r\a\f\t\:\l\i\g\h\t\_\g\r\a\y\_\s\h\u\l\k\e\r\_\b\o\x\"\}","\{\C\o\u\n\t\:\1\b\,\i\d\:\"\m\i\n\e\c\r\a\f\t\:\g\r\a\y\_\s\h\u\l\k\e\r\_\b\o\x\"\}","\{\C\o\u\n\t\:\1\b\,\i\d\:\"\m\i\n\e\c\r\a\f\t\:\b\l\a\c\k\_\s\h\u\l\k\e\r\_\b\o\x\"\}"])
        `schemItem`=variable::set_item_name(item=`schemItem`,text="%var(Префикс WE)Схема &#abc4d6%var_local(schemName)")
        `schemItem`=variable::set_item_lore(lore=["&#7a8085Блоки: %var_local(region)","&#7a8085Габариты: &#abc4d6%math(abs(%var_local(x dist))+1) x %math(abs(%var_local(y dist))+1) x %math(abs(%var_local(z dist))+1)"],item=`schemItem`)
        `schemItem`=variable::set_item_custom_tag(item=`schemItem`,tag_name="worldedit",tag_value="schem")
        `schemItem`=variable::set_template_code(template=`schemItem`,code=`schemData`)
        player::give_items(items=[`schemItem`,"\{\}","\{\}","\{\}","\{\}","\{\}","\{\}","\{\}","\{\}","\{\}","\{\}","\{\}","\{\}","\{\}","\{\}","\{\}","\{\}"])
        player::message(messages=[`Префикс WE`,"&#a6ff6eРегион успешно сохранён в схему","%space%%var_local(region) %var_local(speed) %var_local(time)"],merging="CONCATENATION")
        player::play_sound(sound=sound(sound="minecraft:entity.experience_orb.pickup",volume=1.0,pitch=1.0),location=value::location<default>)
    }
}
function `We.setCommand`(){
    code::call_function(function_name="We.check")
    `args`=variable::create_list(values=["type: Materials, name: Materials","type: Option, permission: build_or_dev, exception: \"%var(Префикс WE)Использование: &7$scmd &b<материал>\""])
    code::call_function(function_name="Mapi.commandConstructor")
    `Player`=variable::set_value(value=(1.0))
    `Function`=variable::set_value(value="We.set")
    code::call_function(function_name="We.run")
    player::message(messages=[`Префикс WE`,"&#a6ff6eРегион успешно заполнен","%space%%var_local(region) %var_local(speed) %var_local(time)"],merging="CONCATENATION")
}
function `We.replaceCommand`(){
    code::call_function(function_name="We.check")
    `args`=variable::create_list(values=["type: Materials, name: Replace","type: Materials, name: Materials","type: Option, permission: build_or_dev, exception: \"%var(Префикс WE)Использование: &7$scmd &b<заменяемое> &e<замена>\""])
    code::call_function(function_name="Mapi.commandConstructor")
    `Player`=variable::set_value(value=(1.0))
    `Function`=variable::set_value(value="We.replace")
    code::call_function(function_name="We.run")
    if (variable::exists(variable=`Replaced`)){
        player::message(messages=[`Префикс WE`,"&#a6ff6eЗаменено &#abc4d6%var_local(Replaced) &#a6ff6eблоков","%space%%var_local(region) %var_local(speed) %var_local(time)"])
    }
    else{
        player::message(messages=[`Префикс WE`,"&#a6ff6eБлоки успешно заменены","%space%%var_local(region) %var_local(speed) %var_local(time)"])
    }
}
function `We.sphereCommand`(){
    `Already Setting`=variable::set_value(value=(1.0))
    code::call_function(function_name="We.check")
    if (variable::equals(compare=["hsphere"],value=`command`)){
        `args`=variable::create_list(values=["type: Materials, name: Materials","type: Number, name: Radius, greater_or_equals: 0","type: Int, name: Thickness, optional: true, greater_or_equals: 0","type: Option, permission: build_or_dev, exception: \"%var(Префикс WE)Использование: &7$scmd &b<материал> &e<радиус> &a[<толщина>]\""])
    }
    else{
        `args`=variable::create_list(values=["type: Materials, name: Materials","type: Number, name: Radius, greater_or_equals: 0","type: Option, permission: build_or_dev, exception: \"%var(Префикс WE)Использование: &7$scmd &b<материал> &e<радиус>\""])
    }
    code::call_function(function_name="Mapi.commandConstructor")
    `volume`=variable::multiply(value=[`Radius`,`Radius`,`Radius`,(2.0),(2.0),(2.0)])
    `Function`=variable::set_value(value="We.sphere")
    `Center`=variable::set_value(value=value::location<default>)
    if (variable::equals(compare=["hsphere"],value=`command`)){
        `Hollow`=variable::set_value(value=(1.0))
        if not (variable::exists(variable=`Thickness`)){
            `Thickness`=variable::set_value(value=(1.0))
        }
    }
    `Player`=variable::set_value(value=(1.0))
    code::call_function(function_name="We.run")
    player::message(messages=[`Префикс WE`,"&#a6ff6eСфера успешно создана","%space%%var_local(region) %var_local(speed) %var_local(time)"])
}
function `We.cylCommand`(){
    `Already Setting`=variable::set_value(value=(1.0))
    code::call_function(function_name="We.check")
    if (variable::equals(compare=["hcyl"],value=`command`)){
        `args`=variable::create_list(values=["type: Materials, name: Materials","type: Number, name: Radius, greater_or_equals: 0","type: Int, name: Height, optional: true, greater_or_equals: 0","type: Int, name: Thickness, optional: true, greater_or_equals: 0","type: Option, permission: build_or_dev, exception: \"%var(Префикс WE)Использование: &7$scmd &b<материал> &e<радиус> &a[<высота>] &d[<толщина>]\""])
    }
    else{
        `args`=variable::create_list(values=["type: Materials, name: Materials","type: Number, name: Radius, greater_or_equals: 0","type: Int, name: Height, optional: true, greater_or_equals: 0","type: Option, permission: build_or_dev, exception: \"%var(Префикс WE)Использование: &7$scmd &b<материал> &e<радиус> &a[<высота>]\""])
    }
    code::call_function(function_name="Mapi.commandConstructor")
    if not (variable::exists(variable=`Height`)){
        `Height`=variable::set_value(value=(1.0))
    }
    `Function`=variable::set_value(value="We.cyl")
    `Center`=variable::set_value(value=value::location<default>)
    if (variable::equals(compare=["hcyl"],value=`command`)){
        `Hollow`=variable::set_value(value=(1.0))
        if not (variable::exists(variable=`Thickness`)){
            `Thickness`=variable::set_value(value=(1.0))
        }
    }
    `volume`=variable::multiply(value=[`Radius`,`Radius`,(2.0),(2.0)])
    `Player`=variable::set_value(value=(1.0))
    code::call_function(function_name="We.run")
    player::message(messages=[`Префикс WE`,"&#a6ff6eЦилиндр успешно создан","%space%%var_local(region) %var_local(speed) %var_local(time)"])
}
function `We.wallsCommand`(){
    code::call_function(function_name="We.check")
    `args`=variable::create_list(values=["type: Materials, name: Materials","type: Option, permission: build_or_dev, exception: \"%var(Префикс WE)Использование: &7$scmd &b<материал>\""])
    code::call_function(function_name="Mapi.commandConstructor")
    `Player`=variable::set_value(value=(1.0))
    `Function`=variable::set_value(value="We.walls")
    code::call_function(function_name="We.run")
    player::message(messages=[`Префикс WE`,"&#a6ff6eСтены успешно созданы","%space%%var_local(region) %var_local(speed) %var_local(time)"])
}
function `We.outlineCommand`(){
    code::call_function(function_name="We.check")
    `args`=variable::create_list(values=["type: Materials, name: Materials","type: Option, permission: build_or_dev, exception: \"%var(Префикс WE)Использование: &7$scmd &b<материал>\""])
    code::call_function(function_name="Mapi.commandConstructor")
    `Player`=variable::set_value(value=(1.0))
    `Function`=variable::set_value(value="We.outline")
    code::call_function(function_name="We.run")
    player::message(messages=[`Префикс WE`,"&#a6ff6eКонтуры успешно созданы","%space%%var_local(region) %var_local(speed) %var_local(time)"],merging="CONCATENATION")
}
function `We.countCommand`(){
    code::call_function(function_name="We.check")
    `args`=variable::create_list(values=["type: Materials, name: Materials","type: Option, permission: build_or_dev, exception: \"%var(Префикс WE)Использование: &7$scmd &b<материал>\""])
    code::call_function(function_name="Mapi.commandConstructor")
    `Player`=variable::set_value(value=(1.0))
    `Function`=variable::set_value(value="We.count")
    code::call_function(function_name="We.run")
    player::message(messages=["%var(Префикс WE)&#a6ff6eНайдено &#abc4d6%var_local(Count) &#a6ff6eблоков","%space%%var_local(region) %var_local(speed) %var_local(time)"])
}
function `We.fastCommand`(){
    `args`=variable::create_list(values=["type: Option, permission: build_or_dev, exception: \"%var(Префикс WE)Использование: &7$scmd\""])
    code::call_function(function_name="Mapi.commandConstructor")
    if (variable::exists(variable=`We.%player%.fastMode`)){
        variable::purge(names=["We.%player%.fastMode"],scope="SAVE")
        player::message(messages=["%var(Префикс WE)Быстрый режим &#ff6e6eвыключен"])
    }
    else{
        variable::purge(names=["We.%player%.undo","We.%player%.numberUndo","We.%player%.numberRedo","We.%player%.redo"],scope="GAME",match="NAME_CONTAINS")
        `We.%player%.fastMode`=variable::set_value(value=(1.0))
        player::message(messages=["%var(Префикс WE)Быстрый режим &#a6ff6eвключён"])
    }
    player::play_sound(sound=sound(sound="minecraft:ui.button.click",volume=1.0,pitch=1.0),location=value::location<default>)
}
function `We.undoCommand`(){
    if not (variable::exists(variable=`We.%player%.fastMode`)){
        if (variable::greater_or_equals(value=`We.%player%.numberUndo`,compare=(1.0))){
            `Already Setting`=variable::set_value(value=(1.0))
            code::call_function(function_name="We.check")
            `args`=variable::create_list(values=["type: Int, greater: 0, name: \"Undo Count\", optional: true","type: Option, permission: build_or_dev, exception: \"%var(Префикс WE)Использование: &7$scmd &b[<число отмен>]\""])
            code::call_function(function_name="Mapi.commandConstructor")
            if not (variable::exists(variable=`Undo Count`)){
                `Undo Count`=variable::set_value(value=(1.0))
            }
            else{
                `Undo Count`=variable::clamp(number=`Undo Count`,min=(0.0),max=`We.%player%.numberUndo`)
            }
            if (variable::greater_or_equals(value=`We.%player%.numberUndo`,compare=`Undo Count`)){
                `Player`=variable::set_value(value=(1.0))
                `Function`=variable::set_value(value="We.undo")
                repeat::for_each_map_entry(map=`We.%player%.undo.%var(We.%player%.numberUndo)`){`AmknoKT9QPdCCNoAmkBO`,`list` ->
                    `size`=variable::get_list_length(list=`list`)
                    `volume`=variable::add(value=[`volume`,`size`])
                }
                code::call_function(function_name="We.run")
                player::message(messages=[`Префикс WE`,"&#a6ff6eОтменено &#abc4d6%var_local(Undo Count) &#a6ff6eдействий","%space%%var_local(region) %var_local(speed) %var_local(time)"],merging="CONCATENATION")
            }
            else{
                player::message(messages=["%var(Префикс WE)&#ff6e6eБуфер отмены пуст"])
                player::play_sound(sound=sound(sound="minecraft:block.lava.extinguish",volume=0.5,pitch=2.0),location=value::location<default>)
            }
        }
        else{
            player::message(messages=["%var(Префикс WE)&#ff6e6eБуфер отмены пуст"])
            player::play_sound(sound=sound(sound="minecraft:block.lava.extinguish",volume=0.5,pitch=2.0),location=value::location<default>)
        }
    }
    else{
        player::message(messages=["%var(Префикс WE)&#ff6e6eЭта команда не работает в быстром режиме"])
        player::play_sound(sound=sound(sound="minecraft:block.lava.extinguish",volume=0.5,pitch=2.0),location=value::location<default>)
    }
}
function `We.redoCommand`(){
    if not (variable::exists(variable=`We.%player%.fastMode`)){
        if (variable::greater_or_equals(value=`We.%player%.numberRedo`,compare=(1.0))){
            `Already Setting`=variable::set_value(value=(1.0))
            code::call_function(function_name="We.check")
            `args`=variable::create_list(values=["type: Int, greater: 0, name: \"Redo Count\", optional: true","type: Option, permission: build_or_dev, exception: \"%var(Префикс WE)Использование: &7$scmd &b[<число отмен>]\""])
            code::call_function(function_name="Mapi.commandConstructor")
            if not (variable::exists(variable=`Redo Count`)){
                `Redo Count`=variable::set_value(value=(1.0))
            }
            else{
                `Redo Count`=variable::clamp(number=`Redo Count`,min=(0.0),max=`We.%player%.numberRedo`)
            }
            if (variable::greater_or_equals(value=`We.%player%.numberRedo`,compare=`Redo Count`)){
                `Player`=variable::set_value(value=(1.0))
                `Function`=variable::set_value(value="We.redo")
                repeat::for_each_map_entry(map=`We.%player%.redo.%var(We.%player%.numberRedo)`){`5Kzd0qpRo5jvSV89kSUA`,`list` ->
                    `size`=variable::get_list_length(list=`list`)
                    `volume`=variable::add(value=[`volume`,`size`])
                }
                code::call_function(function_name="We.run")
                player::message(messages=[`Префикс WE`,"&#a6ff6eОтменено &#abc4d6%var_local(Redo Count) &#a6ff6eотмен","%space%%var_local(region) %var_local(speed) %var_local(time)"],merging="CONCATENATION")
            }
            else{
                player::message(messages=["%var(Префикс WE)&#ff6e6eБуфер отмены пуст"])
                player::play_sound(sound=sound(sound="minecraft:block.lava.extinguish",volume=0.5,pitch=2.0),location=value::location<default>)
            }
        }
        else{
            player::message(messages=["%var(Префикс WE)&#ff6e6eБуфер отмены пуст"])
            player::play_sound(sound=sound(sound="minecraft:block.lava.extinguish",volume=0.5,pitch=2.0),location=value::location<default>)
        }
    }
    else{
        player::message(messages=["%var(Префикс WE)&#ff6e6eЭта команда не работает в быстром режиме"])
        player::play_sound(sound=sound(sound="minecraft:block.lava.extinguish",volume=0.5,pitch=2.0),location=value::location<default>)
    }
}
function `We.regionCommand`(){
    `args`=variable::create_list(values=["name: subcommand, equals: [create, info, flags, select, list, remove, tp]","type: Option, maxArguments: 1000","type: Option, permission: build_or_dev, exception: \"%var(Префикс WE)Использование: &7$scmd &b<create&7|&binfo&7|&bflags&7|&bselect&7|&blist&7|&bremove&7|&btp> &e<параметры>\""])
    code::call_function(function_name="Mapi.commandConstructor")
    if (variable::equals(compare=["create"],value=`subcommand`)){
        `Check Region`=variable::set_value(value=(1.0))
        code::call_function(function_name="We.check")
        `args`=variable::create_list(values=["{}","name: regionId","type: Option, permission: build_or_dev, exception: \"%var(Префикс WE)Использование: &7$scmd create &e<название>\""])
        code::call_function(function_name="Mapi.commandConstructor")
        if not (variable::map_has_key(map=`regions`,key=`regionId`)){
            `Positions`=variable::create_list(values=[`We.%player%.firstPos`,`We.%player%.secondPos`])
            code::call_function(function_name="We.sortPositions")
            `regionFirstPos`=variable::set_all_coordinates(x=(floor(`x min`,0)),y=(floor(`y min`,0)),z=(floor(`z min`,0)))
            `regionSecondPos`=variable::set_all_coordinates(x=(floor(`x max`,0)+0.999),y=(floor(`y max`,0)+0.999),z=(floor(`z max`,0)+0.999))
            `region`=variable::create_list(values=[`regionFirstPos`,`regionSecondPos`])
            `regions`=variable::set_map_value(map=`regions`,key=`regionId`,value=`region`)
            repeat::for_each_map_entry(map=`We.flags`){`flag`,`toHrbRfCi8gwCpstcCIB` ->
                if (variable::map_has_key(map=`We.defaultFlags`,key=`flag`)){
                    `regionInfo.%var_local(regionId).%var_local(flag)`=variable::get_map_value(map=`We.defaultFlags`,key=`flag`)
                }
                else{
                    variable::purge(names=["regionInfo.%var_local(regionId).%var_local(flag)"],scope="SAVE")
                }
            }
            player::message(messages=["%var(Префикс WE)&#a6ff6eРегион &#abc4d6%var_local(regionId)&#a6ff6e успешно создан"])
            player::play_sound(sound=sound(sound="minecraft:entity.experience_orb.pickup",volume=1.0,pitch=1.0),location=value::location<default>)
            code::start_process(local_variables_mode="COPY",process_name="We.flagsMenu")
        }
        else{
            player::message(messages=["%var(Префикс WE)&#ff6e6eРегион &#abc4d6%var_local(regionId)&#ff6e6e уже существует"])
            player::play_sound(sound=sound(sound="minecraft:block.lava.extinguish",volume=0.5,pitch=2.0),location=value::location<default>)
        }
        break
    }
    code::call_function(function_name="We.region_flags")
    code::call_function(function_name="We.region_select")
    code::call_function(function_name="We.region_remove")
}
function `We.region_flags`(){
    if (variable::equals(compare=["flags"],value=`subcommand`)){
        `args`=variable::create_list(values=[(0.0),"name: regionId","type: Option, permission: build_or_dev, exception: \"%var(Префикс WE)Использование: &7$scmd flags &e<регион>\""])
        code::call_function(function_name="Mapi.commandConstructor")
        if (variable::map_has_key(map=`regions`,key=`regionId`)){
            code::start_process(process_name="We.flagsMenu",local_variables_mode="COPY")
        }
        else{
            player::message(messages=["%var(Префикс WE)&#ff6e6eРегион &#abc4d6%var_local(regionId)&#ff6e6e не существует"])
            player::play_sound(sound=sound(sound="minecraft:block.lava.extinguish",volume=0.5,pitch=2.0),location=value::location<default>)
        }
        break
    }
    if (variable::equals(compare=["info"],value=`subcommand`)){
        `args`=variable::create_list(values=[(0.0),"name: regionId, optional: true","type: Option, permission: build_or_dev, exception: \"%var(Префикс WE)Использование: &7$scmd info &e&o<регион>\""])
        code::call_function(function_name="Mapi.commandConstructor")
        if not (variable::exists(variable=`regionId`)){
            `Location`=variable::set_value(value=value::location<default>)
            code::call_function(function_name="We.getRegion")
        }
        else{
            if (variable::map_has_key(map=`regions`,key=`regionId`)){
                `region`=variable::get_map_value(map=`regions`,key=`regionId`)
                `regionFirstPos`=variable::get_list_value(list=`region`,number=(0.0))
                `regionSecondPos`=variable::get_list_value(list=`region`,number=(1.0))
            }
            else{
                player::message(messages=["%var(Префикс WE)&#ff6e6eРегион &#abc4d6%var_local(regionId)&#ff6e6e не существует"])
                player::play_sound(sound=sound(sound="minecraft:block.lava.extinguish",volume=0.5,pitch=2.0),location=value::location<default>)
                break
            }
        }
        variable::get_all_coordinates(location=`regionFirstPos`,x=`x1`,y=`y1`,z=`z1`)
        variable::get_all_coordinates(location=`regionSecondPos`,x=`x2`,y=`y2`,z=`z2`)
        player::message(messages=["&7┌──────────&f Информация о регионе &7──────────","&7│&f Идентификатор: &#abc4d6%var_local(regionId)","&7│&f Границы: &#d877f2%var_local(x1), %var_local(y1), %var_local(z1) &f→&#d877f2 %math(floor(%var_local(x2))), %math(floor(%var_local(y2))), %math(floor(%var_local(z2)))","&7└──────────────────────────────────"],merging="SEPARATE_LINES")
    }
}
function `We.region_remove`(){
    if (variable::equals(compare=["remove"],value=`subcommand`)){
        `args`=variable::create_list(values=[(0.0),"name: regionId","type: Option, permission: build_or_dev, exception: \"%var(Префикс WE)Использование: &7$scmd remove &e<регион>\""])
        code::call_function(function_name="Mapi.commandConstructor")
        if (variable::not_equals(compare=[`globalRegionId`],value=`regionId`)){
            if (variable::map_has_key(map=`regions`,key=`regionId`)){
                `regions`=variable::remove_map_entry(values=[],map=`regions`,key=`regionId`)
                variable::purge(names=["regionInfo.%var_local(regionId)."],scope="SAVE",match="NAME_CONTAINS")
                player::message(messages=["%var(Префикс WE)&#a6ff6eРегион &#abc4d6%var_local(regionId)&#a6ff6e успешно удалён"])
                player::play_sound(sound=sound(sound="minecraft:entity.experience_orb.pickup",volume=1.0,pitch=1.0),location=value::location<default>)
            }
            else{
                player::message(messages=["%var(Префикс WE)&#ff6e6eРегион &#abc4d6%var_local(regionId)&#ff6e6e не существует"])
                player::play_sound(sound=sound(sound="minecraft:block.lava.extinguish",volume=0.5,pitch=2.0),location=value::location<default>)
            }
        }
        else{
            player::message(messages=["%var(Префикс WE)&#ff6e6eНельзя удалить глобальный регион"])
            player::play_sound(sound=sound(sound="minecraft:block.lava.extinguish",volume=0.5,pitch=2.0),location=value::location<default>)
        }
        break
    }
    if (variable::equals(compare=["list"],value=`subcommand`)){
        `args`=variable::create_list(values=[(0.0),"type: Option, permission: build_or_dev, exception: \"%var(Префикс WE)Использование: &7$scmd list\""])
        code::call_function(function_name="Mapi.commandConstructor")
        `regions`=variable::get_map_keys(map=`regions`)
        `regions`=variable::join_text(list=`regions`,separator="&7, &#d877f2")
        player::message(messages=["%var(Префикс WE)Список всех регионов: &#d877f2",`regions`],merging="CONCATENATION")
    }
}
function `We.region_select`(){
    if (variable::equals(compare=["select"],value=`subcommand`)){
        `args`=variable::create_list(values=[(0.0),"name: regionId","type: Option, permission: build_or_dev, exception: \"%var(Префикс WE)Использование: &7$scmd select &e<регион>\""])
        code::call_function(function_name="Mapi.commandConstructor")
        `region`=variable::get_map_value(map=`regions`,key=`regionId`)
        if (variable::is_type(variable_type="ARRAY",value=`region`)){
            `firstPos`=variable::get_list_value(list=`region`,number=(0.0))
            `secondPos`=variable::get_list_value(list=`region`,number=(1.0))
            variable::align_location(variable=`We.%player%.firstPos`,location=`firstPos`,rotation_mode="REMOVE",align_mode="BLOCK_CENTER")
            variable::align_location(variable=`We.%player%.secondPos`,location=`secondPos`,rotation_mode="REMOVE")
            player::message(messages=["%var(Префикс WE)&#a6ff6eРегион &#abc4d6%var_local(regionId)&#a6ff6e успешно выделен"])
            player::play_sound(sound=sound(sound="minecraft:entity.experience_orb.pickup",volume=1.0,pitch=1.0),location=value::location<default>)
        }
        else{
            player::message(messages=["%var(Префикс WE)&#ff6e6eРегион &#abc4d6%var_local(regionId)&#ff6e6e не существует"])
            player::play_sound(sound=sound(sound="minecraft:block.lava.extinguish",volume=0.5,pitch=2.0),location=value::location<default>)
        }
        break
    }
    if (variable::equals(compare=["tp"],value=`subcommand`)){
        `args`=variable::create_list(values=[(0.0),"name: regionId","type: Option, permission: build_or_dev, exception: \"%var(Префикс WE)Использование: &7$scmd tp &e<регион>\""])
        code::call_function(function_name="Mapi.commandConstructor")
        if (variable::map_has_key(map=`regions`,key=`regionId`)){
            if (variable::exists(variable=`regionInfo.%var_local(regionId).teleport`)){
                player::teleport(keep_rotation="FALSE",location=`regionInfo.%var_local(regionId).teleport`)
            }
            else{
                `region`=variable::get_map_value(map=`regions`,key=`regionId`)
                `firstPos`=variable::get_list_value(list=`region`,number=(0.0))
                `secondPos`=variable::get_list_value(list=`region`,number=(1.0))
                `tp`=variable::center_location(locations=[`firstPos`,`secondPos`])
                player::teleport(keep_rotation="FALSE",location=`tp`)
            }
            player::message(messages=["%var(Префикс WE)&#a6ff6eВы успешно телепортированы к региону &#abc4d6%var_local(regionId)"])
            player::play_sound(sound=sound(sound="minecraft:entity.experience_orb.pickup",volume=1.0,pitch=1.0),location=value::location<default>)
        }
        else{
            player::message(messages=["%var(Префикс WE)&#ff6e6eРегион &#abc4d6%var_local(regionId)&#ff6e6e не существует"])
            player::play_sound(sound=sound(sound="minecraft:block.lava.extinguish",volume=0.5,pitch=2.0),location=value::location<default>)
        }
    }
}
event<block_piston_retract>{
    `list`=variable::set_value(value=value::event_blocks_involved)
    variable::list_append_value(values=[value::event_block_location],variable=`list`)
    repeat::for_each_in_list(list=`list`){`TSpwb36nogto3gBwawey`,`Location` ->
        code::call_function(function_name="We.getRegion")
        if not (variable::exists(variable=`regionInfo.%var_local(regionId).pistons`)){
            world::cancel_event()
            break
        }
    }
}
event<block_piston_extend>{
    `Location`=variable::set_value(value=value::event_block_location)
    code::call_function(function_name="We.getRegion")
    if not (variable::exists(variable=`regionInfo.%var_local(regionId).pistons`)){
        world::cancel_event()
        break
    }
    variable::get_block_data(variable=`facing`,location=value::event_block_location,tag_name="facing")
    variable::get_vector_from_block_face(variable=`vector`,block_face=`facing`)
    `list`=variable::set_value(value=value::event_blocks_involved)
    variable::list_append_value(values=[value::event_block_location],variable=`list`)
    repeat::for_each_in_list(list=`list`){`eTiq8BfKjr74dmFK7UXe`,`Location` ->
        `Location`=variable::shift_location_on_vector(location=`Location`,vector=`vector`)
        code::call_function(function_name="We.getRegion")
        if not (variable::exists(variable=`regionInfo.%var_local(regionId).pistons`)){
            world::cancel_event()
            break
        }
    }
}
event<block_ignite>{
    `Location`=variable::set_value(value=value::event_block_location)
    code::call_function(function_name="We.getRegion")
    if not (variable::exists(variable=`regionInfo.%var_local(regionId).fire`)){
        world::cancel_event()
    }
}
event<block_grow>{
    `Location`=variable::set_value(value=value::event_block_location)
    code::call_function(function_name="We.getRegion")
    if not (variable::exists(variable=`regionInfo.%var_local(regionId).grow`)){
        world::cancel_event()
    }
}
event<block_flow>{
    `Location`=variable::set_value(value=value::event_block_location)
    code::call_function(function_name="We.getRegion")
    if not (variable::exists(variable=`regionInfo.%var_local(regionId).flow`)){
        world::cancel_event()
    }
}
function `We.expandCommand`(){
    `Check Region`=variable::set_value(value=(1.0))
    code::call_function(function_name="We.check")
    `args`=variable::create_list(values=["type: Int, name: expand","type: Direction, name: direction","type: Option, permission: build_or_dev, exception: \"%var(Префикс WE)Использование: &7$scmd &b<сдвиг> &e<направление>\""])
    code::call_function(function_name="Mapi.commandConstructor")
    variable::get_vector_from_block_face(variable=`vector`,block_face=`direction`)
    variable::get_all_coordinates(location=`We.%player%.firstPos`,x=`firstX`,y=`firstY`,z=`firstZ`)
    variable::get_all_coordinates(location=`We.%player%.secondPos`,x=`secondX`,y=`secondY`,z=`secondZ`)
    `directions`=variable::create_list(values=["east","west","up","down","south","north"])
    `axises`=variable::create_list(values=["X","X","Y","Y","Z","Z"])
    `axises`=variable::create_map(keys=`directions`,values=`axises`)
    `axis`=variable::get_map_value(map=`axises`,key=`direction`)
    if (variable::equals(compare=["east","up","south"],value=`direction`)){
        if (variable::greater(value=`first%var_local(axis)`,compare=`second%var_local(axis)`)){
            `pos`=variable::set_value(value="We.%player%.firstPos")
        }
        else{
            `pos`=variable::set_value(value="We.%player%.secondPos")
        }
    }
    else{
        if (variable::less(value=`first%var_local(axis)`,compare=`second%var_local(axis)`)){
            `pos`=variable::set_value(value="We.%player%.firstPos")
        }
        else{
            `pos`=variable::set_value(value="We.%player%.secondPos")
        }
    }
    code::call_function(function_name="We.expand2")
}
function `We.expand2`(){
    `vector`=variable::set_vector_length(vector=`vector`,length=`expand`)
    `y`=variable::get_coordinate(type="Y",location=`%var_local(pos)`)
    `%var_local(pos)`=variable::shift_location_on_vector(location=`%var_local(pos)`,vector=`vector`)
    if (variable::equals(compare=["Y"],value=`axis`)){
        `newPos`=variable::set_value(value=`%var_local(pos)`)
        `Y`=variable::get_coordinate(type="Y",location=`newPos`)
        `y`=variable::clamp(number=`y`,min=(-63.5),max=(319.5))
        `Y`=variable::clamp(number=`Y`,min=(-63.5),max=(319.5))
        `%var_local(pos)`=variable::set_coordinate(type="Y",location=`newPos`,coordinate=`Y`)
        `previousExpand`=variable::set_value(value=`expand`)
        `expand`=variable::subtract(value=[`Y`,`y`])
        `expand`=variable::absolute(number=`expand`)
        if (variable::less(value=`previousExpand`,compare=(0.0))){
            `expand`=variable::multiply(value=[`expand`,(-1.0)])
        }
    }
    `Направления`=variable::create_list(values=["на восток","на запад","вверх","вниз","на юг","на север"])
    `Направления`=variable::create_map(keys=`directions`,values=`Направления`)
    `Направление`=variable::get_map_value(map=`Направления`,key=`direction`)
    variable::get_all_coordinates(location=`We.%player%.firstPos`,x=`nextFirstX`,y=`nextFirstY`,z=`nextFirstZ`)
    variable::get_all_coordinates(location=`We.%player%.secondPos`,x=`nextSecondX`,y=`nextSecondY`,z=`nextSecondZ`)
    `dx`=variable::subtract(value=[`secondX`,`firstX`])
    `dy`=variable::subtract(value=[`secondY`,`firstY`])
    `dz`=variable::subtract(value=[`secondZ`,`firstZ`])
    `size`=variable::multiply(value=[(abs(`dx`)+1),(abs(`dy`)+1),(abs(`dz`)+1)])
    `dx`=variable::subtract(value=[`nextSecondX`,`nextFirstX`])
    `dy`=variable::subtract(value=[`nextSecondY`,`nextFirstY`])
    `dz`=variable::subtract(value=[`nextSecondZ`,`nextFirstZ`])
    `nextSize`=variable::multiply(value=[(abs(`dx`)+1),(abs(`dy`)+1),(abs(`dz`)+1)])
    `size`=variable::subtract(value=[`nextSize`,`size`])
    if (variable::greater_or_equals(value=`size`,compare=(0.0))){
        `sign`=variable::set_value(value="&#a6ff6e+")
    }
    else{
        `sign`=variable::set_value(value="&#ff6e6e")
    }
    player::message(messages=["%var(Префикс WE)&#a6ff6eРегион расширен на &#abc4d6%var_local(expand)&#a6ff6e блоков %var_local(Направление)","&7(%var_local(sign)%var_local(size) &fм³&7)","&7(&f%var_local(nextSize) м³&7)"])
    player::play_sound(sound=sound(sound="minecraft:entity.experience_orb.pickup",volume=1.0,pitch=1.0),location=value::location<default>)
}
event<entity_interact>{
    `Location`=variable::set_value(value=value::location<default>)
    code::call_function(function_name="We.getRegion")
    if not (variable::exists(variable=`regionInfo.%var_local(regionId).interaction`)){
        world::cancel_event()
    }
}
event<entity_take_damage>{
    `Location`=variable::set_value(value=value::location<default>)
    code::call_function(function_name="We.getRegion")
    if not (variable::exists(variable=`regionInfo.%var_local(regionId).interaction`)){
        world::cancel_event()
    }
    else{
        if not (variable::exists(variable=`regionInfo.%var_local(regionId).entityDamage`)){
            world::cancel_event()
        }
    }
}
event<player_move>{
    `Location`=variable::set_value(value=value::event_new_location<default>)
    code::call_function(function_name="We.getRegion")
    if (variable::not_equals(compare=[`regionId`],value=`We.%player%.region`)){
        `previousRegionId`=variable::set_value(value=`We.%player%.region`)
        `newRegionId`=variable::set_value(value=`regionId`)
        if (variable::exists(variable=`We.%player%.region`)){
            `regionId`=variable::set_value(value=`previousRegionId`)
            code::controller_exception(){
                code::start_process(local_variables_mode="COPY",process_name="RegionExitEvent")
            }
        }
        `regionId`=variable::set_value(value=`newRegionId`)
        code::controller_exception(){
            code::start_process(process_name="RegionEntryEvent",local_variables_mode="COPY")
        }
        code::wait(duration=(1.0))
        if (world::event_is_canceled()){
            code::call_function(function_name="We.cancelMoveRegion")
        }
        else{
            `We.%player%.region`=variable::set_value(value=`newRegionId`)
            if (variable::exists(variable=`regionInfo.%var_local(previousRegionId).exitMessage`)){
                `text`=variable::set_value(value=`regionInfo.%var_local(previousRegionId).exitMessage`)
                code::call_function(function_name="We.placeholders")
                player::message(messages=[`text`],merging="SPACES")
            }
            if (variable::exists(variable=`regionInfo.%var_local(newRegionId).entryMessage`)){
                `text`=variable::set_value(value=`regionInfo.%var_local(newRegionId).entryMessage`)
                code::call_function(function_name="We.placeholders")
                player::message(messages=[`text`],merging="SPACES")
            }
        }
    }
}
event<player_teleport>{
    `Location`=variable::set_value(value=value::event_new_location<default>)
    code::call_function(function_name="We.getRegion")
    if (variable::not_equals(compare=[`regionId`],value=`We.%player%.region`)){
        if (variable::exists()){
            `previousRegionId`=variable::set_value(value=`We.%player%.region`)
        }
        `newRegionId`=variable::set_value(value=`regionId`)
        if (variable::exists(variable=`We.%player%.region`)){
            `regionId`=variable::set_value(value=`previousRegionId`)
            code::controller_exception(){
                code::start_process(local_variables_mode="COPY",process_name="RegionExitEvent")
            }
        }
        `regionId`=variable::set_value(value=`newRegionId`)
        code::controller_exception(){
            code::start_process(process_name="RegionEntranceEvent",local_variables_mode="COPY")
        }
        code::wait(duration=(1.0))
        if (world::event_is_canceled()){
            code::call_function(function_name="We.cancelMoveRegion")
        }
        else{
            `We.%player%.region`=variable::set_value(value=`newRegionId`)
            if (variable::exists(variable=`regionInfo.%var_local(previousRegionId).exitMessage`)){
                `text`=variable::set_value(value=`regionInfo.%var_local(previousRegionId).exitMessage`)
                code::call_function(function_name="We.placeholders")
                player::message(messages=[`text`],merging="SPACES")
            }
            if (variable::exists(variable=`regionInfo.%var_local(newRegionId).entranceMessage`)){
                `text`=variable::set_value(value=`regionInfo.%var_local(newRegionId).entranceMessage`)
                code::call_function(function_name="We.placeholders")
                player::message(messages=[`text`],merging="SPACES")
            }
        }
    }
}
function `We.placeholders`(){
    `text`=variable::replace_text(text=`text`,replace="$name",replacement=value::name<default>)
    `text`=variable::replace_text(text=`text`,replace="$display_name",replacement=value::display_name<default>)
    `text`=variable::replace_text(text=`text`,replace="$region",replacement=`We.%player%.region`)
    `text`=variable::replace_text(text=`text`,replace="$var",replacement="%var")
}
event<entity_drop_item>{
    `Location`=variable::set_value(value=value::location<default>)
    code::call_function(function_name="We.getRegion")
    if (variable::exists(variable=`regionInfo.%var_local(regionId).itemDrops`)){
        entity::set_custom_tag<victim_entity>(name="isDropped",value="true")
    }
    else{
        world::cancel_event()
    }
}
event<dispenser_dispense_item>{
    `Location`=variable::set_value(value=value::event_block_location)
    code::call_function(function_name="We.getRegion")
    if not (variable::exists(variable=`regionInfo.%var_local(regionId).blockDrops`)){
        world::cancel_event()
    }
}
function `We.cancelMoveRegion`(){
    `region`=variable::get_map_value(map=`regions`,key=`We.%player%.region`)
    `regionFirstPos`=variable::get_list_value(list=`region`,number=(0.0))
    `regionSecondPos`=variable::get_list_value(list=`region`,number=(1.0))
    if not (player::in_area(location_1=`regionFirstPos`,location_2=`regionSecondPos`,ignore_y_axis="FALSE")){
        `minY`=variable::get_coordinate(type="Y",location=`regionFirstPos`)
        `center`=variable::center_location(locations=[`regionFirstPos`,`regionSecondPos`])
        `center`=variable::set_coordinate(type="Y",location=`center`,coordinate=`minY`)
        repeat::on_path(locations=[value::location<default>,`center`],step=(1.0),rotation="FALSE"){`pos` ->
            if (variable::in_range(value=`pos`,min=`regionFirstPos`,max=`regionSecondPos`)){
                code::stop_repeat()
            }
        }
        repeat::while(world::block_equals()){
            `pos`=variable::shift_coordinate(location=`pos`,distance=(1.0),type="Y")
        }
        player::teleport(dismount="FALSE",location=`pos`)
    }
    select::entity_by_name(name_or_uuid=value::vehicle<default>)
    if (variable::greater_or_equals(value=value::selection_size,compare=(1.0))){
        player::ride_entity<default_player>(name_or_uuid=value::vehicle<default>)
    }
}
function `We.switchFlag2`(){
    if (variable::text_starts_with(compare=["Checkmark"],value=`type`)){
        `checkmark`=variable::replace_text(first="FIRST",text=`type`,replace="Checkmark")
        `checkmark`=variable::parse_json(json=`checkmark`)
        `checkmarks`=variable::get_map_keys(map=`checkmark`)
        if (variable::equals(compare=["left","right"],value=value::event_inventory_click_type)){
            `size`=variable::get_list_length(list=`checkmarks`)
            if (variable::greater_or_equals(value=`size`,compare=(2.0))){
                if (variable::equals(compare=["left"],value=value::event_inventory_click_type)){
                    `index`=variable::add(value=[`We.%player%.regionInfo.%var_local(regionId).%var_local(flag).index`,(1.0)])
                }
                else{
                    `index`=variable::subtract(value=[`We.%player%.regionInfo.%var_local(regionId).%var_local(flag).index`,(1.0)])
                }
                `We.%player%.regionInfo.%var_local(regionId).%var_local(flag).index`=variable::warp(number=`index`,min=(0.0),max=`size`)
            }
        }
        if (variable::equals(compare=["drop"],value=value::event_inventory_click_type)){
            if (variable::exists(variable=`regionInfo.%var_local(regionId).%var_local(flag)`)){
                variable::purge(names=["regionInfo.%var_local(regionId).%var_local(flag)"],scope="SAVE")
            }
            else{
                `regionInfo.%var_local(regionId).%var_local(flag)`=variable::set_value(value=`checkmarks`)
            }
        }
        if (variable::equals(compare=["shift_left","shift_right","swap_offhand"],value=value::event_inventory_click_type)){
            `checkmarker`=variable::get_list_value(list=`checkmarks`,number=`We.%player%.regionInfo.%var_local(regionId).%var_local(flag).index`)
            if (variable::is_type(variable_type="ARRAY",value=`value`)){
                if (variable::list_contains_value(values=[`checkmarker`],list=`value`)){
                    `regionInfo.%var_local(regionId).%var_local(flag)`=variable::remove_list_value(list=`value`,value=`checkmarker`)
                    if (variable::list_is_empty(list=`regionInfo.%var_local(regionId).%var_local(flag)`)){
                        variable::purge(names=["regionInfo.%var_local(regionId).%var_local(flag)"],scope="SAVE")
                    }
                }
                else{
                    variable::list_append_value(values=[`checkmarker`],variable=`regionInfo.%var_local(regionId).%var_local(flag)`)
                }
            }
            else{
                `regionInfo.%var_local(regionId).%var_local(flag)`=variable::create_list(values=[`checkmarker`])
            }
        }
    }
}
function `We.getFlagIcon2`(){
    if (variable::text_starts_with(compare=["Marker"],value=`type`)){
        `marker`=variable::replace_text(first="FIRST",text=`type`,replace="Marker")
        `marker`=variable::parse_json(json=`marker`)
        if not (variable::exists(variable=`regionInfo.%var_local(regionId).%var_local(flag)`)){
            `value`=variable::set_value(value="none")
        }
        repeat::for_each_map_entry(map=`marker`){`getMarker`,`text` ->
            if (variable::equals(compare=[`value`],value=`getMarker`)){
                variable::list_append_value(values=["&b⏺ %var_local(text)"],variable=`lore`)
            }
            else{
                variable::list_append_value(values=["&7○ %var_local(text)"],variable=`lore`)
            }
        }
    }
    if (variable::equals(compare=["Location"],value=`type`)){
        if (variable::is_type(variable_type="LOCATION",value=`value`)){
            variable::get_all_coordinates(location=`value`,x=`x`,y=`y`,z=`z`)
            variable::list_append_value(values=["&#7a8085Координаты: &#a6ff6e%var_local(x), %var_local(y), %var_local(z)"],variable=`lore`)
        }
        else{
            variable::list_append_value(values=["&#7a8085Значение: &#ff6e6eНе установлено"],variable=`lore`)
        }
    }
    if (variable::text_starts_with(compare=["Checkmark"],value=`type`)){
        `checkmark`=variable::replace_text(text=`type`,replace="Checkmark",first="FIRST")
        `checkmark`=variable::parse_json(json=`checkmark`)
        `checkmarks`=variable::get_map_keys(map=`checkmark`)
        `checkmarker`=variable::get_list_value(list=`checkmarks`,number=`We.%player%.regionInfo.%var_local(regionId).%var_local(flag).index`)
        repeat::for_each_map_entry(map=`checkmark`){`getCheckmarker`,`text` ->
            `isSelected`=variable::set_value(value="%empty%")
            if (variable::equals(compare=[`checkmarker`],value=`getCheckmarker`)){
                `isSelected`=variable::set_value(value="&#d877f2")
            }
            `line`=variable::set_value(value="&7☐ %var_local(isSelected)%var_local(text)")
            if (variable::is_type(variable_type="ARRAY",value=`value`)){
                if (variable::list_contains_value(values=[`getCheckmarker`],list=`value`)){
                    `line`=variable::set_value(value="&#a6ff6e☑ %var_local(isSelected)%var_local(text)")
                }
            }
            variable::list_append_value(values=[`line`],variable=`lore`)
        }
    }
}
function `We.getFlagIcon`(){
    `value`=variable::set_value(value=`regionInfo.%var_local(regionId).%var_local(flag)`)
    `flagIcon`=variable::get_map_value(map=`We.flagsIcons`,key=`flag`)
    if not (variable::exists(variable=`autoSlotDisable`)){
        `flags`=variable::get_map_keys(map=`We.flags`)
        `slot`=variable::get_list_index_of_value(list=`flags`,value=`flag`)
    }
    if not (variable::is_type(variable_type="ITEM",value=`flagIcon`)){
        if not (variable::exists(variable=`icons`)){
            `icons`=variable::create_list(values=["\{\C\o\u\n\t\:\1\b\,\i\d\:\"\m\i\n\e\c\r\a\f\t\:\w\h\i\t\e\_\d\y\e\"\}","\{\C\o\u\n\t\:\1\b\,\i\d\:\"\m\i\n\e\c\r\a\f\t\:\l\i\g\h\t\_\g\r\a\y\_\d\y\e\"\}","\{\C\o\u\n\t\:\1\b\,\i\d\:\"\m\i\n\e\c\r\a\f\t\:\b\l\u\e\_\d\y\e\"\}","\{\C\o\u\n\t\:\1\b\,\i\d\:\"\m\i\n\e\c\r\a\f\t\:\g\r\e\e\n\_\d\y\e\"\}","\{\C\o\u\n\t\:\1\b\,\i\d\:\"\m\i\n\e\c\r\a\f\t\:\r\e\d\_\d\y\e\"\}","\{\C\o\u\n\t\:\1\b\,\i\d\:\"\m\i\n\e\c\r\a\f\t\:\c\y\a\n\_\d\y\e\"\}","\{\C\o\u\n\t\:\1\b\,\i\d\:\"\m\i\n\e\c\r\a\f\t\:\b\r\o\w\n\_\d\y\e\"\}","\{\C\o\u\n\t\:\1\b\,\i\d\:\"\m\i\n\e\c\r\a\f\t\:\b\o\n\e\_\m\e\a\l\"\}","\{\C\o\u\n\t\:\1\b\,\i\d\:\"\m\i\n\e\c\r\a\f\t\:\o\r\a\n\g\e\_\d\y\e\"\}","\{\C\o\u\n\t\:\1\b\,\i\d\:\"\m\i\n\e\c\r\a\f\t\:\q\u\a\r\t\z\"\}","\{\C\o\u\n\t\:\1\b\,\i\d\:\"\m\i\n\e\c\r\a\f\t\:\n\e\t\h\e\r\i\t\e\_\s\c\r\a\p\"\}","\{\C\o\u\n\t\:\1\b\,\i\d\:\"\m\i\n\e\c\r\a\f\t\:\b\l\a\c\k\_\d\y\e\"\}","\{\C\o\u\n\t\:\1\b\,\i\d\:\"\m\i\n\e\c\r\a\f\t\:\y\e\l\l\o\w\_\d\y\e\"\}","\{\C\o\u\n\t\:\1\b\,\i\d\:\"\m\i\n\e\c\r\a\f\t\:\c\l\a\y\_\b\a\l\l\"\}","\{\C\o\u\n\t\:\1\b\,\i\d\:\"\m\i\n\e\c\r\a\f\t\:\s\l\i\m\e\_\b\a\l\l\"\}","\{\C\o\u\n\t\:\1\b\,\i\d\:\"\m\i\n\e\c\r\a\f\t\:\l\i\g\h\t\_\b\l\u\e\_\d\y\e\"\}","\{\C\o\u\n\t\:\1\b\,\i\d\:\"\m\i\n\e\c\r\a\f\t\:\p\u\r\p\l\e\_\d\y\e\"\}","\{\C\o\u\n\t\:\1\b\,\i\d\:\"\m\i\n\e\c\r\a\f\t\:\p\i\n\k\_\d\y\e\"\}","\{\C\o\u\n\t\:\1\b\,\i\d\:\"\m\i\n\e\c\r\a\f\t\:\m\a\g\e\n\t\a\_\d\y\e\"\}","\{\C\o\u\n\t\:\1\b\,\i\d\:\"\m\i\n\e\c\r\a\f\t\:\l\i\m\e\_\d\y\e\"\}","\{\C\o\u\n\t\:\1\b\,\i\d\:\"\m\i\n\e\c\r\a\f\t\:\g\r\a\y\_\d\y\e\"\}"])
        }
        `flagIcon`=variable::get_list_value(list=`icons`,number=`slot`)
        `flagIcon`=variable::set_item_name(item=`flagIcon`,text=`flag`)
    }
    `lore`=variable::get_item_lore(item=`flagIcon`)
    `flagIcon`=variable::set_item_custom_tag(item=`flagIcon`,tag_name="flag",tag_value=`flag`)
    if (variable::equals(compare=["Boolean"],value=`type`)){
        if (variable::exists(variable=`regionInfo.%var_local(regionId).%var_local(flag)`)){
            variable::list_append_value(values=["&#7a8085Значение: &#a6ff6eВключено"],variable=`lore`)
        }
        else{
            variable::list_append_value(values=["&#7a8085Значение: &#ff6e6eВыключено"],variable=`lore`)
        }
    }
    else{
        if (variable::text_starts_with(compare=["Marker","Location","Checkmark"],value=`type`)){
            code::call_function(function_name="We.getFlagIcon2")
        }
        else{
            if (variable::exists(variable=`regionInfo.%var_local(regionId).%var_local(flag)`)){
                variable::list_append_value(values=["&#7a8085Значение: &#abc4d6%var_local(value)"],variable=`lore`)
            }
            else{
                variable::list_append_value(values=["&#7a8085Значение: &#ff6e6eНе установлено"],variable=`lore`)
            }
        }
    }
    `flagIcon`=variable::set_item_lore(lore=[`lore`,"&8flag: %var_local(flag)"],item=`flagIcon`)
    player::set_menu_item(item=`flagIcon`,slot=`slot`)
}
function `We.switchFlag`(){
    if (variable::exists(variable=`regionInfo.%var_local(regionId).%var_local(flag)`)){
        `value`=variable::set_value(value=`regionInfo.%var_local(regionId).%var_local(flag)`)
    }
    if (variable::equals(compare=["Location"],value=`type`)){
        if (variable::equals(compare=["left"],value=value::event_inventory_click_type)){
            `regionInfo.%var_local(regionId).%var_local(flag)`=variable::set_value(value=value::location<default>)
        }
        if (variable::equals(compare=["right"],value=value::event_inventory_click_type)){
            variable::align_location(align_mode="BLOCK_CENTER",coordinates_mode="X_Z",variable=`regionInfo.%var_local(regionId).%var_local(flag)`,location=value::location<default>)
        }
        if (variable::equals(compare=["drop"],value=value::event_inventory_click_type)){
            variable::purge(names=["regionInfo.%var_local(regionId).%var_local(flag)"],scope="SAVE")
        }
    }
    else{
        if (variable::text_starts_with(compare=["Marker"],value=`type`)){
            `marker`=variable::replace_text(first="FIRST",text=`type`,replace="Marker")
            `marker`=variable::parse_json(json=`marker`)
            `markers`=variable::get_map_keys(map=`marker`)
            `size`=variable::get_list_length(list=`markers`)
            if (variable::greater_or_equals(value=`size`,compare=(2.0))){
                if (variable::equals(compare=["right"],value=value::event_inventory_click_type)){
                    `index`=variable::subtract(value=[`regionInfo.%var_local(regionId).%var_local(flag).index`,(1.0)])
                }
                if (variable::equals(compare=["left"],value=value::event_inventory_click_type)){
                    `index`=variable::add(value=[`regionInfo.%var_local(regionId).%var_local(flag).index`,(1.0)])
                }
                if (variable::equals(compare=["drop"],value=value::event_inventory_click_type)){
                    `index`=variable::set_value(value=(0.0))
                }
                `index`=variable::warp(number=`index`,min=(0.0),max=`size`)
                `regionInfo.%var_local(regionId).%var_local(flag)`=variable::get_list_value(list=`markers`,number=`index`)
                if (variable::equals(compare=["none"],value=`regionInfo.%var_local(regionId).%var_local(flag)`)){
                    variable::purge(names=["regionInfo.%var_local(regionId).%var_local(flag)"],scope="SAVE")
                }
                `regionInfo.%var_local(regionId).%var_local(flag).index`=variable::set_value(value=`index`)
            }
        }
        else{
            code::call_function(function_name="We.switchFlag2")
        }
    }
}
event<player_chat>{
    if (variable::exists(variable=`We.%player%.inputting`)){
        if not (variable::text_starts_with(compare=[`pcmd`],value=value::event_chat_message)){
            world::cancel_event()
            if (variable::equals(compare=["flagValue"],value=`We.%player%.inputting`)){
                player::title(subtitle="%space%",fade_in=(0.0),stay=(0.0),fade_out=(0.0))
                `regionId`=variable::set_value(value=`We.%player%.menuRegion`)
                `flag`=variable::set_value(value=`We.%player%.flag`)
                `input`=variable::set_value(value=value::event_chat_message)
                `type`=variable::get_map_value(map=`We.flags`,key=`flag`)
                if (variable::equals(compare=["Int","Float"],value=`type`)){
                    code::controller_exception(exception_type="ERROR",variable=`exception`){
                        `number`=variable::add(value=[`input`])
                    }
                    if (variable::greater_or_equals(value="%length_local(exception)",compare=(1.0))){
                        player::message(messages=["%var(Префикс WE)&#ff6e6eНеверное число &#abc4d6%var_local(input)"])
                        player::play_sound(sound=sound(sound="minecraft:block.lava.extinguish",volume=0.5,pitch=2.0),location=value::location<default>)
                        break
                    }
                    if (variable::equals(compare=["Int"],value=`type`)){
                        `numberRounded`=variable::round(number=`number`)
                        if (variable::not_equals(compare=[`number`],value=`numberRounded`)){
                            player::message(messages=["%var(Префикс WE)&#ff6e6eНеверное целое число &#abc4d6%var_local(input)"])
                            player::play_sound(sound=sound(sound="minecraft:block.lava.extinguish",volume=0.5,pitch=2.0),location=value::location<default>)
                            break
                        }
                    }
                    `input`=variable::set_value(value=`number`)
                }
                `regionInfo.%var_local(regionId).%var_local(flag)`=variable::set_value(value=`input`)
                player::play_sound(sound=sound(sound="minecraft:entity.experience_orb.pickup",volume=1.0,pitch=1.0),location=value::location<default>)
                variable::purge(names=["We.%player%.flag","We.%player%.inputting"])
                code::start_process(process_name="We.flagsMenu",target_mode="CURRENT_TARGET",local_variables_mode="COPY")
            }
        }
    }
}
event<player_click_inventory>{
    if (variable::equals(compare=["Настройка флагов региона%space%"],value=value::open_inventory_title<default>)){
        world::cancel_event()
        `flag`=variable::get_item_custom_tag(item=value::event_item,tag_name="flag")
        if (variable::is_type(variable_type="TEXT",value=`flag`)){
            `regionId`=variable::set_value(value=`We.%player%.menuRegion`)
            `type`=variable::get_map_value(map=`We.flags`,key=`flag`)
            if (variable::text_starts_with(compare=["Boolean","Marker","Location","Checkmark"],value=`type`)){
                if (variable::equals(compare=["Boolean"],value=`type`)){
                    if (variable::exists(variable=`regionInfo.%var_local(regionId).%var_local(flag)`)){
                        variable::purge(names=["regionInfo.%var_local(regionId).%var_local(flag)"],scope="SAVE")
                    }
                    else{
                        `regionInfo.%var_local(regionId).%var_local(flag)`=variable::set_value(value=(1.0))
                    }
                }
                else{
                    code::call_function(function_name="We.switchFlag")
                }
                player::play_sound(sound=sound(sound="minecraft:ui.button.click",volume=1.0,pitch=2.0),location=value::location<default>)
                code::call_function(function_name="We.getFlagIcon")
                break
            }
            if (variable::equals(compare=["drop"],value=value::event_inventory_click_type)){
                variable::purge(names=["regionInfo.%var_local(regionId).%var_local(flag)"],scope="SAVE")
                player::play_sound(sound=sound(sound="minecraft:ui.button.click",volume=1.0,pitch=1.0),location=value::location<default>)
                code::call_function(function_name="We.getFlagIcon")
                break
            }
            `We.%player%.flag`=variable::set_value(value=`flag`)
            `We.%player%.inputting`=variable::set_value(value="flagValue")
            player::close_menu()
            player::title(subtitle="&#a6ff6eВведите значение в чат",fade_in=(0.0),stay=(1200.0))
            repeat::multi_times(amount=(1200.0)){`VEOESRFE5rpQhB8vMIE0` ->
                code::wait(duration=(1.0))
                if not (variable::exists(variable=`We.%player%.inputting`)){
                    break
                }
            }
            player::title(subtitle="&#ff6e6eВы не успели ввести значение",fade_in=(5.0),stay=(20.0),fade_out=(5.0))
            player::play_sound(sound=sound(sound="minecraft:block.lava.extinguish",volume=0.5,pitch=2.0),location=value::location<default>)
            variable::purge(names=["We.%player%.flag","We.%player%.inputting"])
        }
    }
}
process `We.flagsMenu`(){
    `We.%player%.menuRegion`=variable::set_value(value=`regionId`)
    if (variable::not_equals(compare=["Настройка флагов региона%space%"],value=value::open_inventory_title<default>)){
        player::show_menu(items=["\{\}","\{\}","\{\}","\{\}","\{\}","\{\}","\{\}","\{\}","\{\}","\{\}","\{\}","\{\}","\{\}","\{\}","\{\}","\{\}","\{\}","\{\}","\{\}","\{\}","\{\}","\{\}","\{\}","\{\}","\{\}","\{\}","\{\}"],name="Настройка флагов региона%space%")
        `size`=variable::get_map_size(map=`We.flags`)
        if (variable::greater(value=`size`,compare=(27.0))){
            `lines`=variable::subtract(value=[`size`,(27.0)])
            `lines`=variable::divide(value=[`lines`,(9.0)])
            `lines`=variable::round(round_type="CEIL",number=`lines`)
            player::expand_menu(items=["\{\}","\{\}","\{\}","\{\}","\{\}","\{\}","\{\}","\{\}","\{\}","\{\}","\{\}","\{\}","\{\}","\{\}","\{\}","\{\}","\{\}","\{\}","\{\}","\{\}","\{\}","\{\}","\{\}","\{\}","\{\}","\{\}","\{\}"],size=`lines`)
        }
    }
    `autoSlotDisable`=variable::set_value(value=(1.0))
    repeat::for_each_map_entry(map=`We.flags`){`flag`,`type` ->
        code::call_function(function_name="We.getFlagIcon")
        `slot`=variable::add(value=[`slot`,(1.0)])
    }
}
event<player_take_damage>{
    `Location`=variable::set_value(value=value::location<default>)
    code::call_function(function_name="We.getRegion")
    if not (variable::exists(variable=`regionInfo.%var_local(regionId).damage`)){
        world::cancel_event()
    }
    else{
        if (world::damage_cause_equals(cause="FALL")){
            if not (variable::exists(variable=`regionInfo.%var_local(regionId).fallDamage`)){
                world::cancel_event()
            }
        }
    }
}
event<player_interact>{
    code::call_function(function_name="notHasCreativeAndPermissions")
    `Location`=variable::set_value(value=value::event_block_location)
    code::call_function(function_name="We.getRegion")
    if not (variable::exists(variable=`regionInfo.%var_local(regionId).interaction`)){
        world::cancel_event()
    }
    else{
        if (variable::equals(compare=["right_click_block","physical"],value=value::event_interaction)){
            if (variable::exists(variable=`regionInfo.%var_local(regionId).denyUse`)){
                `door`=variable::create_list(values=["_door"])
                `trapdoor`=variable::create_list(values=["_trapdoor"])
                `button`=variable::create_list(values=["_button"])
                `container`=variable::create_list(values=["chest","shulker_box","barrel"])
                `furnace`=variable::create_list(values=["furnace","smoker"])
                `table`=variable::create_list(values=["_table","anvil","lodestone","_anchor","grindstone","stonecutter"])
                `lever`=variable::create_list(values=["lever"])
                `pressure_plate`=variable::create_list(values=["_pressure_plate"])
                `fence_gate`=variable::create_list(values=["_fence_gate"])
                `bell`=variable::create_list(values=["bell"])
                `bed`=variable::create_list(values=["_bed"])
                `campfire`=variable::create_list(values=["campfire"])
                `lectern`=variable::create_list(values=["lectern"])
                `redstone`=variable::create_list(values=["repeater","comparator","redstone","hopper","dispenser","dropper","daylight_detector","tripwire_hook","note_block"])
                `flower_pot`=variable::create_list(values=["flower_pot","potted_"])
                `block`=variable::get_block_material(location=value::event_block_location)
                repeat::for_each_in_list(list=`regionInfo.%var_local(regionId).denyUse`){`HNM2OzfJ9fBTEkHQxJ6B`,`value` ->
                    if (variable::equals(compare=["flower_pot"],value=`value`)){
                        if (variable::text_starts_with(compare=[`%var_local(value)`],value=`block`)){
                            world::cancel_event()
                            break
                        }
                    }
                    if (variable::text_ends_with(compare=[`%var_local(value)`],value=`block`)){
                        world::cancel_event()
                        break
                    }
                }
            }
        }
    }
}
event<entity_explode>{
    `Location`=variable::set_value(value=value::location<default>)
    code::call_function(function_name="We.getRegion")
    if not (variable::exists(variable=`regionInfo.%var_local(regionId).explosions`)){
        world::cancel_event()
    }
    else{
        `cancelExplode`=variable::create_list(values=[])
        repeat::for_each_in_list(list=value::event_blocks_involved){`zQWsCFjQkG3ZRUfZyhec`,`Location` ->
            code::call_function(function_name="We.getRegion")
            if not (variable::exists(variable=`regionInfo.%var_local(regionId).blockExplosions`)){
                variable::list_append_value(values=[`Location`],variable=`cancelExplode`)
            }
        }
        world::clear_exploded_blocks(location=[`cancelExplode`])
    }
}
event<player_damage_player>{
    `Location`=variable::set_value(value=value::location<victim_entity>)
    code::call_function(function_name="We.getRegion")
    if not (variable::exists(variable=`regionInfo.%var_local(regionId).pvp`)){
        world::cancel_event()
    }
}
event<player_projectile_hit>{
    if (variable::equals(compare=["player"],value=value::entity_type<victim_entity>)){
        `Location`=variable::set_value(value=value::location<victim_entity>)
        code::call_function(function_name="We.getRegion")
        if not (variable::exists(variable=`regionInfo.%var_local(regionId).pvp`)){
            world::cancel_event()
        }
    }
}
event<player_chat>{
    if not (variable::text_starts_with(compare=[`pcmd`],value=value::event_chat_message)){
        `Location`=variable::set_value(value=value::location<default>)
        code::call_function(function_name="We.getRegion")
        if not (variable::exists(variable=`regionInfo.%var_local(regionId).chat`)){
            world::cancel_event()
        }
    }
}
event<entity_death>{
    `Location`=variable::set_value(value=value::location<default>)
    code::call_function(function_name="We.getRegion")
    if not (variable::exists(variable=`regionInfo.%var_local(regionId).entityDrop`)){
        entity::set_death_drops(drops="FALSE")
    }
}
function `notHasCreativeAndPermissions`(){
    if (player::gamemode_equals(gamemode="CREATIVE")){
        break
    }
    else{
        if not (player::has_privilege()){
            if not (player::has_privilege(privilege="DEVELOPER")){
                break
            }
        }
    }
}
event<player_break_block>{
    code::call_function(function_name="notHasCreativeAndPermissions")
    `Location`=variable::set_value(value=value::event_block_location)
    code::call_function(function_name="We.getRegion")
    if not (variable::exists(variable=`regionInfo.%var_local(regionId).mining`)){
        world::cancel_event()
    }
}
event<player_place_block>{
    code::call_function(function_name="notHasCreativeAndPermissions")
    `Location`=variable::set_value(value=value::event_block_location)
    code::call_function(function_name="We.getRegion")
    if not (variable::exists(variable=`regionInfo.%var_local(regionId).build`)){
        world::cancel_event()
    }
}
process `RegionExitEvent`(){
    code::wait(duration=(1.0))
    if not (world::event_is_canceled()){
        if (variable::exists(variable=`regionInfo.%var_local(regionId).fly`)){
            if not (player::gamemode_equals(gamemode="CREATIVE")){
                if not (player::gamemode_equals(gamemode="SPECTATOR")){
                    player::set_allow_flying(allow_flying="FALSE")
                }
            }
        }
        if (variable::exists(variable=`We.%player%.lastGamemode`)){
            `gamemode`=variable::set_value(value=`We.%player%.lastGamemode`)
            variable::purge(names=["We.%player%.lastGamemode"])
            if (variable::equals(compare=["survival"],value=`gamemode`)){
                player::set_gamemode()
            }
            if (variable::equals(compare=["creative"],value=`gamemode`)){
                player::set_gamemode(gamemode="CREATIVE")
            }
            if (variable::equals(compare=["adventure"],value=`gamemode`)){
                player::set_gamemode(gamemode="ADVENTURE")
            }
            if (variable::equals(compare=["spectator"],value=`gamemode`)){
                player::set_gamemode(gamemode="SPECTATOR")
            }
        }
        if (variable::exists(variable=`regionInfo.%var_local(regionId).time`)){
            player::set_time(time=value::world_time)
        }
        if (variable::exists(variable=`regionInfo.%var_local(regionId).playerDrop`)){
            player::set_inventory_kept(kept="FALSE")
        }
    }
}
process `RegionEntryEvent`(){
    code::wait(duration=(1.0))
    if not (world::event_is_canceled()){
        if (variable::exists(variable=`regionInfo.%var_local(regionId).fly`)){
            player::set_allow_flying(allow_flying="TRUE")
        }
        `LgCOcVupXhCKEvYnCI1s`=variable::set_value()
        if (variable::exists(variable=`regionInfo.%var_local(regionId).gamemode`)){
            `gamemode`=variable::set_value(value=`regionInfo.%var_local(regionId).gamemode`)
            `We.%player%.lastGamemode`=variable::set_value(value=value::gamemode<default>)
            if (variable::equals(compare=["survival"],value=`gamemode`)){
                player::set_gamemode()
            }
            if (variable::equals(compare=["creative"],value=`gamemode`)){
                player::set_gamemode(gamemode="CREATIVE")
            }
            if (variable::equals(compare=["adventure"],value=`gamemode`)){
                player::set_gamemode(gamemode="ADVENTURE")
            }
            if (variable::equals(compare=["spectator"],value=`gamemode`)){
                player::set_gamemode(gamemode="SPECTATOR")
            }
        }
        if (variable::exists(variable=`regionInfo.%var_local(regionId).time`)){
            player::set_time(time=`regionInfo.%var_local(regionId).time`)
        }
        if (variable::exists(variable=`regionInfo.%var_local(regionId).playerDrop`)){
            player::set_inventory_kept()
        }
    }
}
event<player_food_level_change>{
    `Location`=variable::set_value(value=value::location<default>)
    code::call_function(function_name="We.getRegion")
    if not (variable::exists(variable=`regionInfo.%var_local(regionId).hunger`)){
        world::cancel_event()
    }
}
event<entity_spawn>{
    if (entity::is_item()){
        if (entity::spawn_reason_equals(reason="DEFAULT")){
            if not (entity::has_custom_tag(tag="isDropped",tag_value="true")){
                `Location`=variable::set_value(value=value::location<default>)
                code::call_function(function_name="We.getRegion")
                if not (variable::exists(variable=`regionInfo.%var_local(regionId).blockDrops`)){
                    world::cancel_event()
                }
            }
        }
    }
    if (entity::spawn_reason_equals(reason="NATURAL")){
        `Location`=variable::set_value(value=value::location<default>)
        code::call_function(function_name="We.getRegion")
        if not (variable::exists(variable=`regionInfo.%var_local(regionId).mobSpawning`)){
            world::cancel_event()
        }
    }
}
event<player_drop_item>{
    `Location`=variable::set_value(value=value::location<default>)
    code::call_function(function_name="We.getRegion")
    if (variable::exists(variable=`regionInfo.%var_local(regionId).itemDrops`)){
        entity::set_custom_tag<default_entity>(name="isDropped",value="true")
    }
    else{
        world::cancel_event()
    }
}
function `We.schemSave`(){
    `allCountedblocksList`=variable::create_list(values=[])
    `countedblocksList`=variable::create_list(values=[])
    `blocksList`=variable::create_list(values=[])
    `nbtSign`=variable::create_map()
    `nbtStorages`=variable::create_map()
    `blockId`=variable::get_block_material(value_type="ID_WITH_DATA",location=`Pos min`)
    `blockId`=variable::replace_text(first="FIRST",text=`blockId`,replace="minecraft:")
    repeat::on_grid(start=`Pos 1`,end=`Pos 2`){`Location` ->
        `blockPreviousId`=variable::set_value(value=`blockId`)
        `blockId`=variable::get_block_material(value_type="ID_WITH_DATA",location=`Location`)
        `blockId`=variable::replace_text(first="FIRST",text=`blockId`,replace="minecraft:")
        if not (variable::list_contains_value(values=[`blockId`],list=`blocksList`)){
            variable::list_append_value(variable=`blocksList`,values=[`blockId`])
        }
        if (variable::equals(value=`blockPreviousId`,compare=[`blockId`])){
            `blockCount`=variable::add(value=[`blockCount`,(1.0)])
        }
        else{
            `indexId`=variable::get_list_index_of_value(search_mode="LAST",list=`blocksList`,value=`blockPreviousId`)
            variable::list_append_value(values=[`indexId`,`blockCount`],variable=`countedblocksList`)
            `countedblocksListSize`=variable::add(value=[`countedblocksListSize`,(2.0)])
            if (variable::greater_or_equals(value=`countedblocksListSize`,compare=(200.0))){
                `allCountedblocksList`=variable::list_append_list(list_1=`allCountedblocksList`,list_2=`countedblocksList`)
                `countedblocksList`=variable::create_list(values=[])
                `countedblocksListSize`=variable::set_value(value=(0.0))
            }
            `blockCount`=variable::set_value(value=(1.0))
        }
        if (variable::exists(variable=`saveNbt`)){
            code::call_function(function_name="We.schemSaveNbt")
        }
        `blocks`=variable::add(value=[`blocks`,(1.0)])
        code::call_function(function_name="We.wait")
    }
    code::call_function(function_name="We.schemSaveEnd")
}
function `We.schemSaveNbt`(){
    if (world::block_equals(blocks=["minecraft:oak_sign","minecraft:spruce_sign","minecraft:birch_sign","minecraft:jungle_sign","minecraft:acacia_sign","minecraft:dark_oak_sign","minecraft:mangrove_sign","minecraft:crimson_sign","minecraft:warped_sign"],location=`Location`)){
        `nbtSignText`=variable::get_sign_text(sign_line="ALL",location=`Location`)
        `vector`=variable::get_vector_between_locations(start_location=`Location`,end_location=`Pos 1`)
        `vector`=variable::set_text(text=[`vector`])
        `nbtSign`=variable::set_map_value(map=`nbtSign`,key=`vector`,value=`nbtSignText`)
    }
    if (world::block_equals(blocks=["minecraft:chest","minecraft:barrel","minecraft:furnace","minecraft:blast_furnace","minecraft:smoker","minecraft:dispenser","minecraft:dropper","minecraft:trapped_chest","minecraft:orange_shulker_box","minecraft:white_shulker_box","minecraft:shulker_box","minecraft:green_shulker_box","minecraft:red_shulker_box","minecraft:black_shulker_box","minecraft:brown_shulker_box","minecraft:blue_shulker_box","minecraft:purple_shulker_box","minecraft:cyan_shulker_box","minecraft:pink_shulker_box","minecraft:magenta_shulker_box","minecraft:light_blue_shulker_box","minecraft:gray_shulker_box","minecraft:light_gray_shulker_box","minecraft:yellow_shulker_box","minecraft:lime_shulker_box"],location=`Location`)){
        `storage`=variable::get_container_contents(location=`Location`,ignore_empty_slots="FALSE")
        repeat::for_each_in_list(list=`storage`){`i`,`item` ->
            `item`=variable::set_text(text=[`item`])
            `storage`=variable::set_list_value(list=`storage`,number=`i`,value=`item`)
        }
        `vector`=variable::get_vector_between_locations(start_location=`Location`,end_location=`Pos 1`)
        `vector`=variable::set_text(text=[`vector`])
        `nbtStorages`=variable::set_map_value(map=`nbtStorages`,key=`vector`,value=`storage`)
    }
}
function `We.schemSaveEnd`(){
    `indexId`=variable::get_list_index_of_value(search_mode="LAST",list=`blocksList`,value=`blockId`)
    variable::list_append_value(values=[`indexId`,`blockCount`],variable=`countedblocksList`)
    `allCountedblocksList`=variable::list_append_list(list_1=`allCountedblocksList`,list_2=`countedblocksList`)
    `gabarit`=variable::get_vector_between_locations(start_location=`Pos 2`,end_location=`Pos 1`)
    `gabarit`=variable::set_text(text=[`gabarit`])
    `keys`=variable::create_list(values=["gabarit","blocksList","countedblocksList"])
    `values`=variable::create_list(values=[`gabarit`,`blocksList`,`allCountedblocksList`])
    `schemData`=variable::create_map(keys=`keys`,values=`values`)
    if (variable::exists(variable=`saveNbt`)){
        `nbt`=variable::create_map()
        if (variable::greater_or_equals(value="%length_local(nbtSign)",compare=(1.0))){
            `nbt`=variable::set_map_value(map=`nbt`,key="sign",value=`nbtSign`)
        }
        if (variable::greater_or_equals(value="%length_local(nbtStorages)",compare=(1.0))){
            `nbt`=variable::set_map_value(map=`nbt`,key="storage",value=`nbtStorages`)
        }
        if (variable::greater_or_equals(value="%length_local(nbt)",compare=(1.0))){
            `schemData`=variable::set_map_value(map=`schemData`,key="nbt",value=`nbt`)
        }
    }
}
function `We.schemLoad`(){
    `regionList`=variable::create_list(values=[])
    `bi`=variable::get_list_value(list=`countedblocksList`,number=(0.0))
    `bi`=variable::add(value=[`bi`])
    `blockCount`=variable::get_list_value(list=`countedblocksList`,number=(1.0))
    `getIndex`=variable::set_value(value=(2.0))
    `countedblocksListSize`=variable::get_list_length(list=`countedblocksList`)
    `cutEnd`=variable::clamp(number=(200.0),min=(0.0),max=`countedblocksListSize`)
    `countedblocksListCutted`=variable::trim_list(list=`countedblocksList`,start=(0.0),end=`cutEnd`)
    repeat::on_grid(start=`Pos 1`,end=`Pos 2`){`Location` ->
        code::call_function(function_name="We.locationUndo")
        code::call_function(function_name="We.schemLoad2")
        `blocks`=variable::add(value=[`blocks`,(1.0)])
        code::call_function(function_name="We.wait")
    }
    code::call_function(function_name="We.undoEnd")
    repeat::for_each_in_list(list=`blocksList`){`bi`,`b` ->
        world::set_block(locations=[`%var_local(bi)regionList`],block=`b`)
        code::call_function(function_name="We.wait")
    }
    `nbt`=variable::get_map_value(map=`schemData`,key="nbt")
    if (variable::is_type(variable_type="MAP",value=`nbt`)){
        `nbtStorages`=variable::get_map_value(map=`nbt`,key="storage")
        if (variable::is_type(variable_type="MAP",value=`nbtStorages`)){
            repeat::for_each_map_entry(map=`nbtStorages`){`vector`,`storage` ->
                code::call_function(function_name="We.wait")
                `Location`=variable::shift_location_on_vector(location=`Pos 1`,vector=`vector`)
                world::set_container(location=[`Location`],items=[`storage`,"\{\}","\{\}","\{\}","\{\}","\{\}","\{\}","\{\}","\{\}","\{\}","\{\}","\{\}","\{\}","\{\}","\{\}","\{\}","\{\}","\{\}","\{\}","\{\}","\{\}","\{\}","\{\}","\{\}","\{\}","\{\}","\{\}"])
            }
        }
        `nbtSign`=variable::get_map_value(map=`nbt`,key="sign")
        if (variable::is_type(variable_type="MAP",value=`nbtSign`)){
            repeat::for_each_map_entry(map=`nbtSign`){`vector`,`signText` ->
                code::call_function(function_name="We.wait")
                `Location`=variable::shift_location_on_vector(location=`Pos 1`,vector=`vector`)
                repeat::for_each_in_list(list=`signText`){`i`,`text` ->
                    `i`=variable::add(value=[`i`,(1.0)])
                    world::set_sign_text(location=`Location`,text=`text`,line=`i`)
                }
            }
        }
    }
}
function `We.schemLoad2`(){
    if (variable::greater_or_equals(value=`blockCount`,compare=(1.0))){
        `blockCount`=variable::subtract(value=[`blockCount`,(1.0)])
        variable::list_append_value(values=[`Location`],variable=`regionList`)
        `regionListSize`=variable::add(value=[`regionListSize`,(1.0)])
        if (variable::greater_or_equals(value=`regionListSize`,compare=(200.0))){
            if (variable::exists(variable=`%var_local(bi)regionList`)){
                `%var_local(bi)regionList`=variable::list_append_list(list_1=`%var_local(bi)regionList`,list_2=`regionList`)
            }
            else{
                `%var_local(bi)regionList`=variable::set_value(value=`regionList`)
            }
            variable::increment(variable=`%var_local(bi)regionListSize`,number=`regionListSize`)
            `regionList`=variable::create_list(values=[])
            `regionListSize`=variable::set_value(value=(0.0))
        }
    }
    if (variable::less_or_equals(value=`blockCount`,compare=(0.0))){
        if (variable::exists(variable=`%var_local(bi)regionList`)){
            `%var_local(bi)regionList`=variable::list_append_list(list_1=`%var_local(bi)regionList`,list_2=`regionList`)
        }
        else{
            `%var_local(bi)regionList`=variable::set_value(value=`regionList`)
        }
        variable::increment(variable=`%var_local(bi)regionListSize`,number=`regionListSize`)
        code::call_function(function_name="We.schemLoad3")
    }
}
function `We.schemLoad3`(){
    `index`=variable::add(value=[`index`,(2.0)])
    if (variable::less(value=`index`,compare=`countedblocksListSize`)){
        if (variable::greater_or_equals(value=`%var_local(bi)regionListSize`,compare=(48000.0))){
            `bl`=variable::get_list_value(list=`blocksList`,number=`bi`)
            `BIregionList`=variable::set_value(value=`%var_local(bi)regionList`)
            `BIregionListSize`=variable::set_value(value=`%var_local(bi)regionListSize`)
            `Parts`=variable::divide(value=[`BIregionListSize`,(48000.0)])
            `Parts`=variable::round(round_type="CEIL",number=`Parts`)
            repeat::multi_times(amount=`Parts`){`Part` ->
                `Cut End`=variable::multiply(value=[`Part`,(48000.0)])
                `Part`=variable::subtract(value=[`Part`,(1.0)])
                `Cut Start`=variable::multiply(value=[`Part`,(48000.0)])
                `Cut End`=variable::clamp(number=`Cut End`,min=`Cut Start`,max=`BIregionListSize`)
                `set`=variable::trim_list(list=`BIregionList`,start=`Cut Start`,end=`Cut End`)
                world::set_block(locations=[`set`],block=`bl`)
                code::call_function(function_name="We.wait")
            }
            `%var_local(bi)regionList`=variable::create_list(values=[])
            `%var_local(bi)regionListSize`=variable::set_value(value=(0.0))
        }
        if (variable::greater_or_equals(value=`getIndex`,compare=(200.0))){
            `cutEnd`=variable::add(value=[`index`,(200.0)])
            `cutEnd`=variable::clamp(number=`cutEnd`,min=(0.0),max=`countedblocksListSize`)
            `countedblocksListCutted`=variable::trim_list(list=`countedblocksList`,start=`index`,end=`cutEnd`)
            `getIndex`=variable::set_value(value=(0.0))
        }
        `regionList`=variable::create_list(values=[])
        `regionListSize`=variable::set_value(value=(0.0))
        `bi`=variable::get_list_value(list=`countedblocksListCutted`,number=`getIndex`)
        `bi`=variable::add(value=[`bi`])
        `getIndex`=variable::add(value=[`getIndex`,(1.0)])
        `blockCount`=variable::get_list_value(list=`countedblocksListCutted`,number=`getIndex`)
        `getIndex`=variable::add(value=[`getIndex`,(1.0)])
    }
}
event<player_place_block>{
    if (player::gamemode_equals(gamemode="CREATIVE")){
        if not (player::has_privilege()){
            if not (player::has_privilege(privilege="DEVELOPER")){
                break
            }
        }
        if (variable::equals(compare=["hand"],value=value::event_equipment_slot)){
            `eventItem`=variable::set_value(value=value::main_hand_item<default>)
        }
        else{
            `eventItem`=variable::set_value(value=value::off_hand_item<default>)
        }
        if (variable::item_has_tag(item=`eventItem`,tag="worldedit",value="schem")){
            code::controller_exception(exception_type="ALL",variable=`exception`){
                `schemData`=variable::get_template_code(template=`eventItem`,return_type="MAP")
            }
            if (variable::less_or_equals(value=(%length_local(`exception`)),compare=(0.0))){
                world::cancel_event()
                `Already Setting`=variable::set_value(value=(1.0))
                code::call_function(function_name="We.check")
                `countedblocksList`=variable::get_map_value(map=`schemData`,key="countedblocksList")
                `blocksList`=variable::get_map_value(map=`schemData`,key="blocksList")
                `gabarit`=variable::get_map_value(map=`schemData`,key="gabarit")
                `Pos 1`=variable::set_value(value=value::event_block_location)
                `Pos 2`=variable::shift_location_on_vector(location=`Pos 1`,vector=`gabarit`)
                `Player`=variable::set_value(value=(1.0))
                `Function`=variable::set_value(value="We.schemLoad")
                code::wait(duration=(1.0))
                code::call_function(function_name="We.run")
                player::action_bar(messages=[`Префикс WE`,"&#a6ff6eСхема успешно загружена","%space%%var_local(region) %var_local(speed) %var_local(time)"],merging="CONCATENATION")
            }
        }
    }
}
function `We.distrCommand`(){
    code::call_function(function_name="We.check")
    `args`=variable::create_list(values=["type: Option, permission: build_or_dev, exception: \"%var(Префикс WE)Использование: &7$scmd\""])
    code::call_function(function_name="Mapi.commandConstructor")
    `Player`=variable::set_value(value=(1.0))
    `Function`=variable::set_value(value="We.distr")
    code::call_function(function_name="We.run")
    player::message(messages=["&7┌──────────────────────────────────"],merging="SPACES")
    variable::sort_any_map(sort_type="VALUES",sort_order="DESCENDING",variable=`distr`,map=`distr`)
    `values`=variable::get_map_values(map=`distr`)
    `maxCount`=variable::get_list_value(list=`values`,number=(0.0))
    `maxCountLength`=variable::get_text_length(text=`maxCount`)
    repeat::for_each_map_entry(map=`distr`){`blockId`,`count` ->
        `percent`=variable::divide(value=[`count`,`blocks`,(0.01)],division_mode="DEFAULT")
        `percent`=variable::round(number=`percent`,precision=(3.0))
        `percentLength`=variable::get_text_length(text=`percent`)
        `spacesCount`=variable::subtract(value=[(7.0),`percentLength`])
        `spaces`=variable::repeat_text(text="%space%",repeat=`spacesCount`)
        `percent`=variable::set_text(text=[`spaces`,`percent`],merging="CONCATENATION")
        `countLength`=variable::get_text_length(text=`count`)
        `spacesCount`=variable::subtract(value=[`maxCountLength`,`countLength`])
        `spaces`=variable::repeat_text(text="%space%",repeat=`spacesCount`)
        player::send_minimessage(minimessage="<gray>│ <#a6ff6e>%var_local(percent)% %space%<#abc4d6>%var_local(count) %var_local(spaces) <white><hover:show_text:\"%var_local(blockId)\"><lang:block.minecraft.%var_local(blockId)>")
    }
    player::message(messages=["&7│ &r%var_local(region) %var_local(speed) %var_local(time)","&7└──────────────────────────────────"],merging="SEPARATE_LINES")
}
function `We.centerCommand`(){
    `Check Region`=variable::set_value(value=(1.0))
    code::call_function(function_name="We.check")
    `args`=variable::create_list(values=["type: Materials, name: \"Materials\", optional: true","type: Option, permission: build_or_dev, exception: \"%var(Префикс WE)Использование: &7$scmd &b[<материал>]\""])
    code::call_function(function_name="Mapi.commandConstructor")
    `Center`=variable::center_location(locations=[`We.%player%.firstPos`,`We.%player%.secondPos`])
    variable::get_all_coordinates(location=`Center`,x=`x`,y=`y`,z=`z`)
    if (variable::exists(variable=`Materials`)){
        `Material`=variable::get_list_random_value(list=`Materials`)
        world::set_block(locations=[`Center`],block=`Material`)
    }
    player::message(messages=["%var(Префикс WE)&#a6ff6eЦентр выделенного региона: &#abc4d6%math(floor(%var_local(x))), %math(floor(%var_local(y))), %math(floor(%var_local(z)))"])
    player::play_sound(sound=sound(sound="minecraft:entity.experience_orb.pickup",volume=1.0,pitch=1.0),location=value::location<default>)
}
function `We.unstuckCommand`(){
    `args`=variable::create_list(values=["type: Option, permission: build_or_dev, exception: \"%var(Префикс WE)Использование: &7$scmd\""])
    code::call_function(function_name="Mapi.commandConstructor")
    `Location`=variable::set_value(value=value::location<default>)
    repeat::while(world::block_equals()){
        `Location`=variable::shift_coordinate(type="Y",location=`Location`,distance=(1.0))
    }
    player::teleport(location=`Location`,keep_rotation="TRUE")
    player::message(messages=["%var(Префикс WE)&#a6ff6eВы перемещены наверх"])
    player::play_sound(sound=sound(sound="minecraft:entity.experience_orb.pickup",volume=1.0,pitch=1.0),location=value::location<default>)
}
function `We.copyCommand`(){
    code::call_function(function_name="We.check")
    `args`=variable::create_list(values=["type: Option, permission: build_or_dev, exception: \"%var(Префикс WE)Использование: &7$scmd\""])
    code::call_function(function_name="Mapi.commandConstructor")
    `Player`=variable::set_value(value=(1.0))
    `Function`=variable::set_value(value="We.copy")
    code::call_function(function_name="We.run")
    variable::align_location(align_mode="BLOCK_CENTER",variable=`playerPos`,location=value::location<default>,rotation_mode="REMOVE")
    `We.%player%.copyVector`=variable::get_vector_between_locations(start_location=`Pos min`,end_location=`playerPos`)
    `We.%player%.copyRegionVector`=variable::get_vector_between_locations(start_location=`Pos 1`,end_location=`Pos 2`)
    `We.%player%.clipboard`=variable::set_value(value=`clipboard`)
    player::message(messages=["%var(Префикс WE)&#a6ff6eРегион успешно скопирован","%space%%var_local(region) %var_local(speed) %var_local(time)"],merging="CONCATENATION")
}
function `We.pasteCommand`(){
    `check.clipboard`=variable::set_value(value=(1.0))
    code::call_function(function_name="We.check")
    `args`=variable::create_list(values=["type: Option, permission: build_or_dev, exception: \"%var(Префикс WE)Использование: &7$scmd\""])
    code::call_function(function_name="Mapi.commandConstructor")
    `Player`=variable::set_value(value=(1.0))
    `Function`=variable::set_value(value="We.paste")
    `clipboard`=variable::set_value(value=`We.%player%.clipboard`)
    `pasteLocation`=variable::shift_location_on_vector(location=value::location<default>,vector=`We.%player%.copyVector`)
    variable::align_location(rotation_mode="REMOVE",variable=`pasteLocation`,location=`pasteLocation`)
    repeat::for_each_map_entry(map=`clipboard`){`blDYRlPgA57ISoGLky8j`,`list` ->
        `size`=variable::get_list_length(list=`list`)
        `volume`=variable::add(value=[`volume`,`size`])
    }
    code::call_function(function_name="We.run")
    player::message(messages=["%var(Префикс WE)&#a6ff6eРегион успешно вставлен","%space%%var_local(region) %var_local(speed) %var_local(time)"],merging="CONCATENATION")
}
function `We.clearclipboardCommand`(){
    `args`=variable::create_list(values=["type: Option, permission: build_or_dev, exception: \"%var(Префикс WE)Использование: &7$scmd\""])
    code::call_function(function_name="Mapi.commandConstructor")
    variable::purge(names=["We.%player%.clipboard","We.%player%.copyVector","We.%player%.copyRegionVector"])
    player::message(messages=["%var(Префикс WE)&#a6ff6eБуфер обмена успешно очищен"],merging="CONCATENATION")
    player::play_sound(sound=sound(sound="minecraft:entity.experience_orb.pickup",volume=1.0,pitch=1.0),location=value::location<default>)
}
function `We.rotateCommand`(){
    `Already Setting`=variable::set_value(value=(1.0))
    `check.clipboard`=variable::set_value(value=(1.0))
    code::call_function(function_name="We.check")
    `args`=variable::create_list(values=["type: Int, name: angleY","type: Int, name: angleX, optional: true","type: Int, name: angleZ, optional: true","type: Option, permission: build_or_dev, exception: \"%var(Префикс WE)Использование: &7$scmd &b<поворот вокруг Y> &e[<поворот вокруг X>] &a[<поворот вокруг Z>]\""])
    code::call_function(function_name="Mapi.commandConstructor")
    `Player`=variable::set_value(value=(1.0))
    `Function`=variable::set_value(value="We.rotate")
    `clipboard`=variable::set_value(value=`We.%player%.clipboard`)
    repeat::for_each_map_entry(map=`clipboard`){`VXYDCGmpBe8nVZHHAsUh`,`list` ->
        `size`=variable::get_list_length(list=`list`)
        `volume`=variable::add(value=[`volume`,`size`])
    }
    `regionVector`=variable::set_value(value=`We.%player%.copyRegionVector`)
    code::call_function(function_name="We.run")
    `We.%player%.clipboard`=variable::set_value(value=`clipboard`)
    player::message(messages=["%var(Префикс WE)&#a6ff6eСкопированный регион повёрнут на &#abc4d6%var_local(angleX)°, %var_local(angleY)°, %var_local(angleZ)°","%space%%var_local(region) %var_local(speed) %var_local(time)"])
}
function `We.rotate`(){
    `list`=variable::get_map_values(map=`clipboard`)
    `list`=variable::get_list_value(list=`list`,number=(0.0))
    `firstLocation`=variable::get_list_value(list=`list`,number=(0.0))
    `regionVector`=variable::multiply_vector(vector=`regionVector`,multiplier=(0.5))
    `center`=variable::shift_location_on_vector(location=`firstLocation`,vector=`regionVector`)
    repeat::for_each_map_entry(map=`clipboard`){`Material`,`regionList0` ->
        `regionList`=variable::create_list(values=[])
        `regionListMin`=variable::create_list(values=[])
        repeat::for_each_in_list(list=`regionList0`){`i`,`Location` ->
            `vector`=variable::get_vector_between_locations(start_location=`Location`,end_location=`center`)
            `vector`=variable::rotate_vector_around_axis(vector=`vector`,angle=`angleX`)
            `vector`=variable::rotate_vector_around_axis(vector=`vector`,angle=`angleY`,axis="Y")
            `vector`=variable::rotate_vector_around_axis(axis="Z",vector=`vector`,angle=`angleZ`)
            `Location`=variable::shift_location_on_vector(location=`center`,vector=`vector`)
            variable::list_append_value(values=[`Location`],variable=`regionListMin`)
            `size`=variable::add(value=[`size`,(1.0)])
            if (variable::greater_or_equals(value=`size`,compare=(200.0))){
                `regionList`=variable::list_append_list(list_1=`regionList`,list_2=`regionListMin`)
                `regionListMin`=variable::create_list(values=[])
                `size`=variable::set_value(value=(0.0))
                `blocks`=variable::add(value=[`blocks`,(200.0)])
                `Iterations`=variable::add(value=[`Iterations`,(199.0)])
                code::call_function(function_name="We.wait")
            }
        }
        `regionList`=variable::list_append_list(list_1=`regionList`,list_2=`regionListMin`)
        `clipboard`=variable::set_map_value(map=`clipboard`,key=`Material`,value=`regionList`)
        `blocks`=variable::add(value=[`blocks`,`size`])
        `size`=variable::set_value(value=(0.0))
    }
}
function `We.stackCommand`(){
    code::call_function(function_name="We.check")
    `args`=variable::create_list(values=["type: Int, name: stack","type: Int, name: distance, optional: true","name: direction, optional: true, equals: [north, south, east, west, up, down]","type: Option, permission: build_or_dev, exception: \"%var(Префикс WE)Использование: &7$scmd &b<кол-во> &e&o<расстояние> &a&o<направление>\""])
    code::call_function(function_name="Mapi.commandConstructor")
    if not (variable::exists(variable=`direction`)){
        variable::vector_to_direction_name(variable=`direction`,vector=value::direction_of_view<default>)
    }
    `Player`=variable::set_value(value=(1.0))
    `Function`=variable::set_value(value="We.stack")
    `Positions`=variable::create_list(values=[`We.%player%.firstPos`,`We.%player%.secondPos`])
    code::call_function(function_name="We.sortPositions")
    `volume`=variable::multiply(value=[`Volume Region`,`stack`])
    code::call_function(function_name="We.run")
    `directions`=variable::create_list(values=["east","west","up","down","south","north"])
    `Направления`=variable::create_list(values=["на восток","на запад","вверх","вниз","на юг","на север"])
    `Направления`=variable::create_map(keys=`directions`,values=`Направления`)
    `Направление`=variable::get_map_value(map=`Направления`,key=`direction`)
    player::message(messages=["%var(Префикс WE)&#a6ff6eРегион проставлен &#abc4d6%var_local(stack)&#a6ff6e раз %var_local(Направление)","%space%%var_local(region) %var_local(speed) %var_local(time)"],merging="CONCATENATION")
}
function `We.stack`(){
    `distance`=variable::add(value=[`distance`,(1.0)])
    variable::get_vector_from_block_face(variable=`vector`,block_face=`direction`)
    if (variable::equals(compare=["down"],value=`direction`)){
        `length`=variable::subtract(value=[(-(abs(`y1`-((`y2`))))),`distance`])
    }
    if (variable::equals(compare=["up"],value=`direction`)){
        `length`=variable::add(value=[`distance`])
    }
    if (variable::equals(compare=["north"],value=`direction`)){
        `length`=variable::subtract(value=[(abs(`z1`-((`z2`)))),`distance`])
    }
    if (variable::equals(compare=["south"],value=`direction`)){
        `length`=variable::add(value=[(-(abs(`z1`-((`z2`))))),`distance`])
    }
    if (variable::equals(compare=["east"],value=`direction`)){
        `length`=variable::add(value=[(-(abs(`x1`-((`x2`))))),`distance`])
    }
    if (variable::equals(compare=["west"],value=`direction`)){
        `length`=variable::subtract(value=[(abs(`x1`-((`x2`)))),`distance`])
    }
    `vector`=variable::set_vector_length(vector=`vector`,length=`length`)
    `Part Set Action`=variable::set_value(value="clone")
    `Copy Location`=variable::set_value(value=`Pos min`)
    `Paste Location`=variable::set_value(value=`Pos min`)
    repeat::multi_times(amount=`stack`){`HJfMvscLcXkuMyXpTb5S` ->
        `Paste Location`=variable::shift_location_on_vector(location=`Paste Location`,vector=`vector`)
        code::call_function(function_name="We.partSet")
    }
}
function `We.coneCommand`(){
    `Already Setting`=variable::set_value(value=(1.0))
    code::call_function(function_name="We.check")
    if (variable::equals(compare=["cone"],value=`command`)){
        `args`=variable::create_list(values=["type: Materials, name: Materials","type: Int, name: radius, greater_or_equals: 0","type: Int, name: height, greater_or_equals: 0","type: Option, permission: build_or_dev, exception: \"%var(Префикс WE)Использование: &7$scmd &b<материал> &e<радиус> &a<высота>\""])
    }
    else{
        `args`=variable::create_list(values=["type: Materials, name: Materials","type: Number, name: radius, greater_or_equals: 0","type: Int, name: height, greater_or_equals: 0","type: Int, name: Thickness, greater_or_equals: 0","type: Option, permission: build_or_dev, exception: \"%var(Префикс WE)Использование: &7$scmd &b<материал> &e<радиус> &a<высота> &d&o<толщина>\""])
        `Hollow`=variable::set_value(value=(1.0))
    }
    code::call_function(function_name="Mapi.commandConstructor")
    if (variable::exists(variable=`Hollow`)){
        if not (variable::exists(variable=`Thickness`)){
            `Thickness`=variable::set_value(value=(1.0))
        }
    }
    `Player`=variable::set_value(value=(1.0))
    `Function`=variable::set_value(value="We.cone")
    `volume`=variable::pow(base=`radius`,power=(2.0))
    `volume`=variable::multiply(value=[`volume`,`height`])
    variable::align_location(rotation_mode="REMOVE",variable=`center`,location=value::location<default>)
    code::call_function(function_name="We.run")
    player::message(messages=["%var(Префикс WE)&#a6ff6eКонус успешно создан","%space%%var_local(region) %var_local(speed) %var_local(time)"])
}
function `We.cone`(){
    code::call_function(function_name="We.locationStart")
    variable::get_all_coordinates(location=`center`,x=`X`,z=`Z`)
    `radiusHeight`=variable::divide(value=[`radius`,`height`])
    repeat::multi_times(amount=`height`){`currentHeight` ->
        `currentHeight`=variable::subtract(value=[`currentHeight`,(1.0)])
        `subtrahend`=variable::multiply(value=[`radiusHeight`,`currentHeight`])
        `Radius`=variable::subtract(value=[`radius`,`subtrahend`])
        `-Radius`=variable::multiply(value=[`Radius`,(-1.0)])
        `Pos 1`=variable::shift_all_coordinates(location=`center`,x=`-Radius`,y=`currentHeight`,z=`-Radius`)
        `Pos 2`=variable::shift_all_coordinates(location=`center`,x=`Radius`,y=`currentHeight`,z=`Radius`)
        if (variable::exists(variable=`Hollow`)){
            `RadiusSquared Min`=variable::subtract(value=[`Radius`,`Thickness`])
            `RadiusSquared Min`=variable::pow(base=`RadiusSquared Min`,power=(2))
        }
        `RadiusSquared`=variable::pow(base=`Radius`,power=(2.0))
        repeat::on_grid(start=`Pos 1`,end=`Pos 2`){`Location` ->
            variable::get_all_coordinates(location=`Location`,x=`x`,z=`z`)
            `x`=variable::subtract(value=[`x`,(-0.5),`X`])
            `x`=variable::pow(base=`x`,power=(2.0))
            `z`=variable::subtract(value=[`z`,(-0.5),`Z`])
            `z`=variable::pow(base=`z`,power=(2.0))
            `Result`=variable::add(value=[`x`,`z`])
            if (variable::in_range(value=`Result`,min=`RadiusSquared Min`,max=`RadiusSquared`)){
                code::call_function(function_name="We.locationAction")
            }
            else{
                code::call_function(function_name="We.wait")
            }
        }
    }
    code::call_function(function_name="We.locationEnd")
}
function `We.deselCommand`(){
    `args`=variable::create_list(values=["type: Option, permission: build_or_dev, exception: \"%var(Префикс WE)Использование: &7$scmd\""])
    code::call_function(function_name="Mapi.commandConstructor")
    variable::purge(names=["We.%player%.firstPos","We.%player%.secondPos"])
    player::message(messages=["%var(Префикс WE)&#a6ff6eВыделение успешно очищено"],merging="CONCATENATION")
    player::play_sound(sound=sound(sound="minecraft:entity.experience_orb.pickup",volume=1.0,pitch=1.0),location=value::location<default>)
}
function `We.calcCommand`(){
    `args`=variable::create_list(values=["type: String, name: \"expression\"","type: Option, permission: build_or_dev, exception: \"%var(Префикс WE)Использование: &7$scmd &b<выражение>\""])
    code::call_function(function_name="Mapi.commandConstructor")
    player::message(messages=["%var(Префикс WE)&#abc4d6[%var_local(expression)] &7= &#d877f2%math(%var_local(expression))"],merging="CONCATENATION")
}
function `We.oldidsCommand`(){
    `args`=variable::create_list(values=["type: Int, name: page","type: Option, permission: build_or_dev, exception: \"%var(Префикс WE)Использование: &7$scmd &b<страница>\""])
    code::call_function(function_name="Mapi.commandConstructor")
    `pageListSize`=variable::set_value(value=(15.0))
    `list`=variable::create_map()
    repeat::for_each_in_list(list=`We.oldBlockIds`){`mainIndex`,`addList` ->
        repeat::for_each_in_list(list=`addList`){`index`,`id` ->
            if (variable::greater(value=`index`,compare=(0.0))){
                `key`=variable::set_value(value="%var_local(mainIndex):%var_local(index)")
            }
            else{
                `key`=variable::set_value(value=`mainIndex`)
            }
            `list`=variable::set_map_value(map=`list`,key=`key`,value=`id`)
        }
    }
    `blockIds`=variable::get_map_values(map=`list`)
    `list`=variable::get_map_keys(map=`list`)
    `listSize`=variable::get_list_length(list=`list`)
    `listPageMax`=variable::divide(value=[`listSize`,`pageListSize`])
    `listPageMax`=variable::round(round_type="CEIL",number=`listPageMax`)
    `page`=variable::warp(number=`page`,min=(1.0),max=(`listPageMax`+1))
    `pageMaxIndex`=variable::multiply(value=[`page`,`pageListSize`])
    `pageMinIndex`=variable::subtract(value=[`pageMaxIndex`,`pageListSize`])
    `pageMaxIndex`=variable::clamp(number=`pageMaxIndex`,min=`pageMinIndex`,max=`listSize`)
    `list`=variable::trim_list(list=`list`,start=`pageMinIndex`,end=`pageMaxIndex`)
    `blockIds`=variable::trim_list(list=`blockIds`,start=`pageMinIndex`,end=`pageMaxIndex`)
    `pageList`=variable::create_map(keys=`list`,values=`blockIds`)
    player::message(messages=["&7┌───────────&f Страница (%var_local(page)/%var_local(listPageMax)) &7────────────"])
    repeat::for_each_map_entry(map=`pageList`){`index`,`blockId` ->
        player::send_minimessage(minimessage="<gray>│ <#abc4d6>%var_local(index) %space% <white><hover:show_text:\"%var_local(blockId)\"><lang:block.minecraft.%var_local(blockId)>")
    }
    player::message(messages=["&7└──────────────────────────────────"],merging="SPACES")
}
function `We.breakCommand`(){
    code::call_function(function_name="We.check")
    `args`=variable::create_list(values=["name: drops, optional: true, equals: [true, false]","type: Materials, name: Materials, optional: true","type: Option, permission: build_or_dev, exception: \"%var(Префикс WE)Использование: &7$scmd &b[<выпадение предметов>] &e[<материал>]\""])
    code::call_function(function_name="Mapi.commandConstructor")
    `Player`=variable::set_value(value=(1.0))
    `Function`=variable::set_value(value="We.break")
    if (variable::equals(compare=["false"],value=`drops`)){
        variable::purge(names=["drops"],scope="LOCAL")
    }
    code::call_function(function_name="We.run")
    player::message(messages=[`Префикс WE`,"&#a6ff6eРазрушено &#abc4d6%var_local(broken) &#a6ff6eблоков","%space%%var_local(region) %var_local(speed) %var_local(time)"],merging="CONCATENATION")
}
function `We.break`(){
    code::call_function(function_name="We.locationStart")
    repeat::on_grid(start=`Pos 1`,end=`Pos 2`){`Location` ->
        `blocks`=variable::add(value=[`blocks`,(1.0)])
        if not (world::block_equals(blocks=["air","lava","water"],location=`Location`)){
            if (variable::exists(variable=`Materials`)){
                if not (world::block_equals(blocks=[`Materials`],location=`Location`)){
                    code::call_function(function_name="We.wait")
                    code::skip_iteration()
                }
            }
            code::call_function(function_name="We.locationUndo")
            `Region Size`=variable::add(value=[`Region Size`,(1.0)])
            variable::list_append_value(values=[`Location`],variable=`Region`)
            if (variable::greater_or_equals(value=`Region Size`,compare=(200.0))){
                `Massive Region`=variable::list_append_list(list_1=`Massive Region`,list_2=`Region`)
                `Region`=variable::create_list(values=[])
                `Massive Region Size`=variable::add(value=[`Massive Region Size`,`Region Size`])
                `Region Size`=variable::set_value(value=(0.0))
                `Iterations`=variable::add(value=[`Iterations`,(199.0)])
                code::call_function(function_name="We.wait")
                if (variable::greater_or_equals(value=`Massive Region Size`,compare=(48000.0))){
                    code::call_function(function_name="We.break2")
                    `broken`=variable::add(value=[`broken`,`Massive Region Size`])
                    `Massive Region`=variable::create_list(values=[])
                    `Massive Region Size`=variable::set_value(value=(0.0))
                }
            }
        }
        else{
            code::call_function(function_name="We.wait")
        }
    }
    code::call_function(function_name="We.undoEnd")
    `Massive Region`=variable::list_append_list(list_1=`Massive Region`,list_2=`Region`)
    code::call_function(function_name="We.break2")
    `broken`=variable::add(value=[`broken`,`Massive Region Size`,`Region Size`])
}
function `We.break2`(){
    if not (variable::exists(variable=`drops`)){
        world::set_block_drops_enabled(enable="FALSE")
    }
    world::break_block(locations=[`Massive Region`])
    if not (variable::exists(variable=`drops`)){
        world::set_block_drops_enabled(enable="TRUE")
    }
}
function `We.generateCommand`(){
    code::call_function(function_name="We.check")
    `args`=variable::create_list(values=["type: Materials, name: Materials","type: String, name: expression","type: Option, permission: build_or_dev, exception: \"%var(Префикс WE)Использование: &7$scmd &b<материал> &e<выражение>\""])
    code::call_function(function_name="Mapi.commandConstructor")
    `Player`=variable::set_value(value=(1.0))
    `Function`=variable::set_value(value="We.generate")
    code::call_function(function_name="We.run")
    player::message(messages=["%var(Префикс WE)&#a6ff6eСоздано &#abc4d6%var_local(generated) &#a6ff6eблоков","%space%%var_local(region) %var_local(speed) %var_local(time)"])
}
function `We.generate`(){
    code::call_function(function_name="We.locationStart")
    `center`=variable::center_location(locations=[`Pos 1`,`Pos 2`])
    variable::get_all_coordinates(location=`center`,x=`x`,y=`y`,z=`z`)
    `x`=variable::round(round_type="FLOOR",number=`x`)
    `y`=variable::round(round_type="FLOOR",number=`y`)
    `z`=variable::round(round_type="FLOOR",number=`z`)
    `center`=variable::set_all_coordinates(x=`x`,y=`y`,z=`z`)
    `expression`=variable::replace_text(text=`expression`,replace="pi",replacement="3.1415926535")
    repeat::on_grid(start=`Pos 1`,end=`Pos 2`){`Location` ->
        `vector`=variable::get_vector_between_locations(start_location=`Location`,end_location=`center`)
        `x`=variable::get_vector_component(vector=`vector`)
        `y`=variable::get_vector_component(vector=`vector`,vector_component="Y")
        `z`=variable::get_vector_component(vector_component="Z",vector=`vector`)
        `e`=variable::replace_text(text=`expression`,replace="random()",replacement="%random%")
        `e`=variable::replace_text(text=`e`,replace="x",replacement=`x`)
        `e`=variable::replace_text(text=`e`,replace="y",replacement=`y`)
        `e`=variable::replace_text(text=`e`,replace="z",replacement=`z`)
        if (variable::greater(value=(`e`),compare=(0.0))){
            code::call_function(function_name="We.locationAction")
            `generated`=variable::add(value=[`generated`,(1.0)])
        }
        else{
            `blocks`=variable::add(value=[`blocks`,(1.0)])
            code::call_function(function_name="We.wait")
        }
    }
    code::call_function(function_name="We.locationEnd")
}
function `We.brush_break`(){
    if (variable::exists(variable=`create`)){
        `args`=variable::create_list(values=[(0.0),"name: drops, optional: true, equals: [true, false]","type: Materials, name: Materials, optional: true","type: Int, name: Radius, greater_or_equals: 0","type: Option, permission: build_or_dev, exception: \"%var(Префикс WE)Использование: &7$scmd %var_local(brushType) &b[<выпадение предметов>] &e[<материал>] &a<радиус>\""])
        code::call_function(function_name="Mapi.commandConstructor")
        if (variable::exists(variable=`Materials`)){
            `brushInfo`=variable::set_map_value(map=`brushInfo`,key="materials",value=`Materials`)
        }
        `brushInfo`=variable::set_map_value(map=`brushInfo`,key="radius",value=`Radius`)
        if (variable::equals(compare=["true"],value=`drops`)){
            `brushInfo`=variable::set_map_value(map=`brushInfo`,key="drops",value=(1.0))
        }
    }
    else{
        if (variable::map_has_key(map=`brushInfo`,key="materials")){
            `Materials`=variable::get_map_value(map=`brushInfo`,key="materials")
        }
        `Radius`=variable::get_map_value(map=`brushInfo`,key="radius")
        if (variable::map_has_key(map=`brushInfo`,key="drops")){
            `drops`=variable::set_value(value=(1.0))
        }
        `vector`=variable::set_vector(x=`Radius`,y=`Radius`,z=`Radius`)
        `Pos 1`=variable::shift_location_on_vector(location=`position`,vector=`vector`)
        `vector`=variable::multiply_vector(vector=`vector`,multiplier=(-1.0))
        `Pos 2`=variable::shift_location_on_vector(location=`position`,vector=`vector`)
        `Player`=variable::set_value(value=(1.0))
        `Function`=variable::set_value(value="We.break")
        code::call_function(function_name="We.run")
    }
}
function `We.brush_cube`(){
    if (variable::exists(variable=`create`)){
        `args`=variable::create_list(values=["{}","type: Materials, name: Materials","type: Int, name: Radius, greater_or_equals: 0","type: Option, permission: build_or_dev, exception: \"%var(Префикс WE)Использование: &7$scmd %var_local(brushType) &b<материал> &e<радиус>\""])
        code::call_function(function_name="Mapi.commandConstructor")
        `brushInfo`=variable::set_map_value(map=`brushInfo`,key="materials",value=`Materials`)
        `brushInfo`=variable::set_map_value(map=`brushInfo`,key="radius",value=`Radius`)
    }
    else{
        `Materials`=variable::get_map_value(map=`brushInfo`,key="materials")
        `Radius`=variable::get_map_value(map=`brushInfo`,key="radius")
        `vector`=variable::set_vector(x=`Radius`,y=`Radius`,z=`Radius`)
        `Pos 1`=variable::shift_location_on_vector(location=`position`,vector=`vector`)
        `vector`=variable::multiply_vector(vector=`vector`,multiplier=(-1.0))
        `Pos 2`=variable::shift_location_on_vector(location=`position`,vector=`vector`)
        `Player`=variable::set_value(value=(1.0))
        `Function`=variable::set_value(value="We.set")
        code::call_function(function_name="We.run")
    }
}
function `We.brushCommand`(){
    `args`=variable::create_list(values=["name: brushType, equals: %var(We.brushes)","type: Option, permission: build_or_dev, maxArguments: 999, exception: \"%var(Префикс WE)Использование: &7$scmd &b<тип кисти>\""])
    code::call_function(function_name="Mapi.commandConstructor")
    `type`=variable::get_item_type(type=value::main_hand_item<default>,value="ID")
    if (variable::exists(variable=`type`)){
        `brush`=variable::set_item_custom_tag(item=value::main_hand_item<default>,tag_name="worldedit",tag_value="brush")
        `create`=variable::set_value(value=(1.0))
        `brushInfo`=variable::create_map()
        code::call_function(function_name="We.brush_%var_local(brushType)")
        `brushInfo`=variable::set_map_value(map=`brushInfo`,key="type",value=`brushType`)
        `brushInfo`=variable::to_json(value=`brushInfo`)
        `brush`=variable::set_item_custom_tag(item=`brush`,tag_name="brush",tag_value=`brushInfo`)
        player::set_equipment(item=`brush`)
        player::message(messages=["%var(Префикс WE)&#a6ff6eКисть успешно создана"])
        player::play_sound(sound=sound(sound="minecraft:entity.experience_orb.pickup",volume=1.0,pitch=1.0),location=value::location<default>)
    }
    else{
        player::message(messages=["%var(Префикс WE)&#ff6e6eДержите в руке предмет"])
        player::play_sound(sound=sound(sound="minecraft:block.lava.extinguish",volume=0.5,pitch=2.0),location=value::location<default>)
    }
}
function `We.brush_explode`(){
    if (variable::exists(variable=`create`)){
        `args`=variable::create_list(values=[(0.0),"type: Int, name: power","type: Option, permission: build_or_dev, exception: \"%var(Префикс WE)Использование: &7$scmd %var_local(brushType) &b<сила взрыва>\""])
        code::call_function(function_name="Mapi.commandConstructor")
        `brushInfo`=variable::set_map_value(map=`brushInfo`,key="power",value=`power`)
    }
    else{
        `power`=variable::get_map_value(map=`brushInfo`,key="power")
        world::create_explosion(location=`position`,power=`power`)
    }
}
function `We.brush_sphere`(){
    if (variable::exists(variable=`create`)){
        `args`=variable::create_list(values=[(0.0),"type: Materials, name: Materials","type: Number, name: Radius, greater_or_equals: 0","type: Option, permission: build_or_dev, exception: \"%var(Префикс WE)Использование: &7$scmd %var_local(brushType) &b<материал> &e<радиус>\""])
        code::call_function(function_name="Mapi.commandConstructor")
        `brushInfo`=variable::set_map_value(map=`brushInfo`,key="materials",value=`Materials`)
        `brushInfo`=variable::set_map_value(map=`brushInfo`,key="radius",value=`Radius`)
    }
    else{
        `Materials`=variable::get_map_value(map=`brushInfo`,key="materials")
        `Radius`=variable::get_map_value(map=`brushInfo`,key="radius")
        `Center`=variable::set_value(value=`position`)
        `volume`=variable::multiply(value=[`Radius`,`Radius`,`Radius`,(2.0),(2.0),(2.0)])
        `Player`=variable::set_value(value=(1.0))
        `Function`=variable::set_value(value="We.sphere")
        code::call_function(function_name="We.run")
    }
}
event<player_interact>{
    if (player::gamemode_equals(gamemode="CREATIVE")){
        if not (player::has_privilege()){
            if not (player::has_privilege(privilege="DEVELOPER")){
                break
            }
        }
    }
    else{
        break
    }
    if (variable::equals(compare=["right_click_air","right_click_block"],value=value::event_interaction)){
        if (variable::item_has_tag(item=value::main_hand_item<default>,tag="worldedit",value="brush")){
            world::cancel_event()
            `Already Setting`=variable::set_value(value=(1.0))
            code::call_function(function_name="We.check")
            `position`=variable::set_value(value=value::target_block_location<default>)
            if not (world::block_equals(blocks=["air"],location=`position`)){
                `distance`=variable::locations_distance(location_1=value::location<default>,location_2=`position`)
                if (variable::less_or_equals(value=`distance`,compare=(100.0))){
                    `brush`=variable::set_value(value=value::main_hand_item<default>)
                    `brushInfo`=variable::get_item_custom_tag(item=`brush`,tag_name="brush")
                    `brushInfo`=variable::parse_json(json=`brushInfo`)
                    `brushType`=variable::get_map_value(map=`brushInfo`,key="type")
                    `disableSound`=variable::set_value(value=(1.0))
                    player::swing_hand()
                    code::call_function(function_name="We.brush_%var_local(brushType)")
                }
            }
        }
    }
}
function `We.brush_cyl`(){
    if (variable::exists(variable=`create`)){
        `args`=variable::create_list(values=[(0.0),"type: Materials, name: Materials","type: Number, name: Radius, greater_or_equals: 0","type: Option, permission: build_or_dev, exception: \"%var(Префикс WE)Использование: &7$scmd %var_local(brushType) &b<материал> &e<радиус>\""])
        code::call_function(function_name="Mapi.commandConstructor")
        `brushInfo`=variable::set_map_value(map=`brushInfo`,key="materials",value=`Materials`)
        `brushInfo`=variable::set_map_value(map=`brushInfo`,key="radius",value=`Radius`)
    }
    else{
        `Materials`=variable::get_map_value(map=`brushInfo`,key="materials")
        `Radius`=variable::get_map_value(map=`brushInfo`,key="radius")
        `Center`=variable::set_value(value=`position`)
        `volume`=variable::multiply(value=[`Radius`,`Radius`,(2.0),(2.0)])
        `Player`=variable::set_value(value=(1.0))
        `Function`=variable::set_value(value="We.cyl")
        code::call_function(function_name="We.run")
    }
}
function `We.brush_replace`(){
    if (variable::exists(variable=`create`)){
        `args`=variable::create_list(values=[(0.0),"type: Materials, name: Replace","type: Materials, name: Materials","type: Int, name: Radius, greater_or_equals: 0","type: Option, permission: build_or_dev, exception: \"%var(Префикс WE)Использование: &7$scmd %var_local(brushType) &b<заменяемое> &e<замена> &a<радиус>\""])
        code::call_function(function_name="Mapi.commandConstructor")
        `brushInfo`=variable::set_map_value(map=`brushInfo`,key="replace",value=`Replace`)
        `brushInfo`=variable::set_map_value(map=`brushInfo`,key="materials",value=`Materials`)
        `brushInfo`=variable::set_map_value(map=`brushInfo`,key="radius",value=`Radius`)
    }
    else{
        `Replace`=variable::get_map_value(map=`brushInfo`,key="replace")
        `Materials`=variable::get_map_value(map=`brushInfo`,key="materials")
        `Radius`=variable::get_map_value(map=`brushInfo`,key="radius")
        `vector`=variable::set_vector(x=`Radius`,y=`Radius`,z=`Radius`)
        `Pos 1`=variable::shift_location_on_vector(location=`position`,vector=`vector`)
        `vector`=variable::multiply_vector(vector=`vector`,multiplier=(-1.0))
        `Pos 2`=variable::shift_location_on_vector(location=`position`,vector=`vector`)
        `Player`=variable::set_value(value=(1.0))
        `Function`=variable::set_value(value="We.replace")
        code::call_function(function_name="We.run")
    }
}
function `We.smoothCommand`(){
    code::call_function(function_name="We.check")
    `args`=variable::create_list(values=["type: Materials, name: Materials","type: Option, permission: build_or_dev, exception: \"%var(Префикс WE)Использование: &7$scmd &b<материал>\""])
    code::call_function(function_name="Mapi.commandConstructor")
    `Player`=variable::set_value(value=(1.0))
    `Function`=variable::set_value(value="We.smooth")
    `Positions`=variable::create_list(values=[`We.%player%.firstPos`,`We.%player%.secondPos`])
    code::call_function(function_name="We.sortPositions")
    `Pos 1`=variable::set_coordinate(location=`Pos min`,coordinate=`y max`,type="Y")
    `Pos 2`=variable::set_value(value=`Pos max`)
    `height`=variable::add(value=[`y dist`,(1.0)])
    code::call_function(function_name="We.run")
    player::message(messages=["%var(Префикс WE)&#a6ff6eТерритория успешно сглажена","%space%%var_local(region) %var_local(speed) %var_local(time)"])
}
function `We.smooth`(){
    repeat::on_grid(start=`Pos 1`,end=`Pos 2`){`Location` ->
        repeat::multi_times(amount=`height`){`gK6k7dMkpGHKh3hX5V2K` ->
            if (world::block_equals(blocks=["air"],location=`Location`)){
                `Location`=variable::shift_coordinate(type="Y",location=`Location`,distance=(-1.0))
            }
        }
        `block`=variable::get_block_material(value_type="ID_WITH_DATA",location=`Location`)
        `Location Min`=variable::set_coordinate(type="Y",location=`Location`,coordinate=`y min`)
        `dy`=variable::locations_distance(type="Altitude",location_1=`Location Min`,location_2=`Location`)
        variable::gaussian_distribution(distribution="FOLDER_NORMAL",variable=`noise`,deviant=(5.0),mean=`dy`)
        player::show_debug_marker(location=`Location`,name=`noise`,duration=(60000.0),green=(100.0),alpha=(90.0))
        `Location`=variable::shift_coordinate(location=`Location Min`,distance=`noise`,type="Y")
        world::set_region(block=`block`,pos_1=`Location Min`,pos_2=`Location`)
        `Location`=variable::shift_coordinate(location=`Location`,distance=(1.0),type="Y")
        `Location Max`=variable::set_coordinate(location=`Location`,coordinate=`y max`,type="Y")
        world::clear_region(pos_1=`Location`,pos_2=`Location Max`)
        `blocks`=variable::add(value=[`blocks`,(1.0)])
    }
}
function `We.MaterialsType`(){
    `#length`=variable::get_text_length(text=`#arg`)
    `#number`=variable::replace_text(text=`#arg`,replace="[")
    `#number`=variable::get_text_length(text=`#number`)
    `#repeats`=variable::subtract(value=[`#length`,`#number`])
    repeat::multi_times(amount=`#repeats`){`T09jGE2rz3IQJKyVWgUz` ->
        `#subtext`=variable::add(value=[`#subtext`,(1.0)])
        `#subtext`=variable::get_index_of_subtext(text=`#arg`,subtext="[",start_index=`#subtext`)
        if (variable::greater_or_equals(value=`#subtext`,compare=(0.0))){
            `#subtext2`=variable::add(value=[`#subtext2`,(1.0)])
            `#subtext2`=variable::get_index_of_subtext(text=`ID Check`,subtext="]",start_index=`#subtext2`)
            if (variable::greater_or_equals(value=`#subtext2`,compare=(1.0))){
                `#subtext21`=variable::add(value=[`#subtext2`,(1.0)])
                `#blockStates`=variable::trim_text(text=`#arg`,start=`#subtext`,end=`#subtext21`)
                `#blockStates`=variable::replace_text(text=`#blockStates`,replace=",",replacement=";")
                `#first`=variable::trim_text(text=`#arg`,start=(0.0),end=`#subtext`)
                `#second`=variable::trim_text(text=`#arg`,start=`#subtext21`,end=`#length`)
                `#arg`=variable::set_text(merging="CONCATENATION",text=[`#first`,`#blockStates`,`#second`])
            }
        }
        else{
            code::stop_repeat()
        }
    }
    `#arg`=variable::split_text(text=`#arg`,delimiter=",")
    `%var_local(#name).proportions`=variable::create_map()
    repeat::for_each_in_list(list=`#arg`){`#materialIndex`,`stringBlockId` ->
        code::call_function(function_name="We.MaterialsType2")
    }
    `percents`=variable::get_map_values(map=`%var_local(#name).proportions`)
    `percents`=variable::add(value=[`percents`])
    if (variable::not_equals(compare=[(100.0)],value=`percents`)){
        `percents-100`=variable::subtract(value=[(100.0),`percents`])
        `delitel`=variable::clamp(number="%length_local(%var_local(#name).proportions)",min=(%length_local(`#arg`)-(%length_local(`%var_local(#name).proportions`))),max=(100000.0))
        `percent`=variable::divide(value=[`percents-100`,`delitel`])
        repeat::for_each_in_list(list=`#arg`){`XsMhMBfuIueCZFKAUBhK`,`Material` ->
            if not (variable::map_has_key(map=`%var_local(#name).proportions`,key=`Material`)){
                `%var_local(#name).proportions`=variable::set_map_value(map=`%var_local(#name).proportions`,key=`Material`,value=`percent`)
            }
        }
    }
}
function `We.MaterialsType2`(){
    `%subtext`=variable::get_index_of_subtext(text=`stringBlockId`,subtext="%")
    if (variable::greater_or_equals(value=`%subtext`,compare=(1.0))){
        `stringBlockIdLength`=variable::get_text_length(text=`stringBlockId`)
        if (variable::greater(value=`stringBlockIdLength`,compare=`%subtext`)){
            `percent`=variable::trim_text(text=`stringBlockId`,start=(0.0),end=`%subtext`)
            code::controller_exception(exception_type="ERROR",variable=`#exception`){
                `percent`=variable::add(value=[`percent`])
            }
            if (variable::greater_or_equals(value="%length_local(#exception)",compare=(1.0))){
                `#exceptionArgument`=variable::set_value(value="%var(Префикс WE)&#ff6e6eПроцентное соотношение блока &#abc4d6%var_local(percent)&#ff6e6e не является числом")
                code::stop_repeat()
            }
            `%subtext`=variable::add(value=[`%subtext`,(1.0)])
            `stringBlockId`=variable::trim_text(text=`stringBlockId`,start=`%subtext`,end=`stringBlockIdLength`)
        }
    }
    `stringBlockId`=variable::replace_text(text=`stringBlockId`,replace=";",replacement=",")
    code::call_function(function_name="We.getBlockId")
    code::controller_exception(exception_type="ERROR",variable=`#exception`){
        world::set_block(locations=[],block=`blockId`)
    }
    if (variable::greater_or_equals(value="%length_local(#exception)",compare=(1.0))){
        `#exceptionArgument`=variable::set_value(value="%var(Префикс WE)&#ff6e6eБлок &#abc4d6%var_local(blockId)&#ff6e6e не существует")
        code::stop_repeat()
    }
    else{
        `#arg`=variable::set_list_value(list=`#arg`,number=`#materialIndex`,value=`blockId`)
        if (variable::exists(variable=`percent`)){
            `%var_local(#name).proportions`=variable::set_map_value(map=`%var_local(#name).proportions`,key=`blockId`,value=`percent`)
            variable::purge(names=["percent"],scope="LOCAL")
        }
    }
}
function `We.DirectionType`(){
    `#directions`=variable::create_list(values=["n","s","w","e","u","d","f","north","south","west","east","up","down","b","me","forward","back","left","right","l","r"])
    `#directions1`=variable::create_list(values=["north","south","west","east","up","down",(0.0),"north","south","west","east","up","down",(180.0),(0.0),(0.0),(180.0),(90.0),(-90.0),(90.0),(-90.0)])
    `#directions`=variable::create_map(keys=`#directions`,values=`#directions1`)
    if (variable::equals(compare=["me"],value=`#arg`)){
        `#isMe`=variable::set_value(value=(1.0))
    }
    `#arg`=variable::get_map_value(map=`#directions`,key=`#arg`,default_value="none")
    if (variable::equals(compare=["none"],value=`#arg`)){
        `#exceptionArgument`=variable::set_value(value="%var(Префикс WE)&#ff6e6eНеизвестное направление %var_local(#vArg)")
    }
    else{
        if (variable::is_type(value=`#arg`)){
            if not (variable::exists(variable=`#isMe`)){
                `#vector`=variable::set_vector_component(vector_component="Y",vector=value::direction_of_view<default>,value=(0.0))
                `#vector`=variable::rotate_vector_around_axis(axis="Y",vector=`#vector`,angle=`#arg`)
            }
            else{
                `#vector`=variable::set_value(value=value::direction_of_view<default>)
                variable::purge(names=["#isMe"],scope="LOCAL")
            }
            variable::vector_to_direction_name(variable=`#arg`,vector=`#vector`)
        }
    }
}
